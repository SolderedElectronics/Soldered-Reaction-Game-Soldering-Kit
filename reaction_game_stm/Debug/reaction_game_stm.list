
reaction_game_stm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003350  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08003410  08003410  00013410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003510  08003510  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  08003510  08003510  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003510  08003510  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003510  08003510  00013510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003514  08003514  00013514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08003518  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  20000028  08003540  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  08003540  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006561  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016a4  00000000  00000000  000265b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000680  00000000  00000000  00027c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005c8  00000000  00000000  000282d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012794  00000000  00000000  000288a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000078de  00000000  00000000  0003b034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000743ec  00000000  00000000  00042912  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b6cfe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017b4  00000000  00000000  000b6d50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000028 	.word	0x20000028
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080033f8 	.word	0x080033f8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000002c 	.word	0x2000002c
 8000104:	080033f8 	.word	0x080033f8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_f2uiz>:
 8000220:	219e      	movs	r1, #158	; 0x9e
 8000222:	b510      	push	{r4, lr}
 8000224:	05c9      	lsls	r1, r1, #23
 8000226:	1c04      	adds	r4, r0, #0
 8000228:	f000 fcde 	bl	8000be8 <__aeabi_fcmpge>
 800022c:	2800      	cmp	r0, #0
 800022e:	d103      	bne.n	8000238 <__aeabi_f2uiz+0x18>
 8000230:	1c20      	adds	r0, r4, #0
 8000232:	f000 fbf9 	bl	8000a28 <__aeabi_f2iz>
 8000236:	bd10      	pop	{r4, pc}
 8000238:	219e      	movs	r1, #158	; 0x9e
 800023a:	1c20      	adds	r0, r4, #0
 800023c:	05c9      	lsls	r1, r1, #23
 800023e:	f000 fa45 	bl	80006cc <__aeabi_fsub>
 8000242:	f000 fbf1 	bl	8000a28 <__aeabi_f2iz>
 8000246:	2380      	movs	r3, #128	; 0x80
 8000248:	061b      	lsls	r3, r3, #24
 800024a:	469c      	mov	ip, r3
 800024c:	4460      	add	r0, ip
 800024e:	e7f2      	b.n	8000236 <__aeabi_f2uiz+0x16>

08000250 <__aeabi_fdiv>:
 8000250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000252:	464f      	mov	r7, r9
 8000254:	4646      	mov	r6, r8
 8000256:	46d6      	mov	lr, sl
 8000258:	0245      	lsls	r5, r0, #9
 800025a:	b5c0      	push	{r6, r7, lr}
 800025c:	0047      	lsls	r7, r0, #1
 800025e:	1c0c      	adds	r4, r1, #0
 8000260:	0a6d      	lsrs	r5, r5, #9
 8000262:	0e3f      	lsrs	r7, r7, #24
 8000264:	0fc6      	lsrs	r6, r0, #31
 8000266:	2f00      	cmp	r7, #0
 8000268:	d100      	bne.n	800026c <__aeabi_fdiv+0x1c>
 800026a:	e070      	b.n	800034e <__aeabi_fdiv+0xfe>
 800026c:	2fff      	cmp	r7, #255	; 0xff
 800026e:	d100      	bne.n	8000272 <__aeabi_fdiv+0x22>
 8000270:	e075      	b.n	800035e <__aeabi_fdiv+0x10e>
 8000272:	00eb      	lsls	r3, r5, #3
 8000274:	2580      	movs	r5, #128	; 0x80
 8000276:	04ed      	lsls	r5, r5, #19
 8000278:	431d      	orrs	r5, r3
 800027a:	2300      	movs	r3, #0
 800027c:	4699      	mov	r9, r3
 800027e:	469a      	mov	sl, r3
 8000280:	3f7f      	subs	r7, #127	; 0x7f
 8000282:	0260      	lsls	r0, r4, #9
 8000284:	0a43      	lsrs	r3, r0, #9
 8000286:	4698      	mov	r8, r3
 8000288:	0063      	lsls	r3, r4, #1
 800028a:	0e1b      	lsrs	r3, r3, #24
 800028c:	0fe4      	lsrs	r4, r4, #31
 800028e:	2b00      	cmp	r3, #0
 8000290:	d04e      	beq.n	8000330 <__aeabi_fdiv+0xe0>
 8000292:	2bff      	cmp	r3, #255	; 0xff
 8000294:	d046      	beq.n	8000324 <__aeabi_fdiv+0xd4>
 8000296:	4642      	mov	r2, r8
 8000298:	00d0      	lsls	r0, r2, #3
 800029a:	2280      	movs	r2, #128	; 0x80
 800029c:	04d2      	lsls	r2, r2, #19
 800029e:	4302      	orrs	r2, r0
 80002a0:	4690      	mov	r8, r2
 80002a2:	2200      	movs	r2, #0
 80002a4:	3b7f      	subs	r3, #127	; 0x7f
 80002a6:	0031      	movs	r1, r6
 80002a8:	1aff      	subs	r7, r7, r3
 80002aa:	464b      	mov	r3, r9
 80002ac:	4061      	eors	r1, r4
 80002ae:	b2c9      	uxtb	r1, r1
 80002b0:	4313      	orrs	r3, r2
 80002b2:	2b0f      	cmp	r3, #15
 80002b4:	d900      	bls.n	80002b8 <__aeabi_fdiv+0x68>
 80002b6:	e0b5      	b.n	8000424 <__aeabi_fdiv+0x1d4>
 80002b8:	486e      	ldr	r0, [pc, #440]	; (8000474 <__aeabi_fdiv+0x224>)
 80002ba:	009b      	lsls	r3, r3, #2
 80002bc:	58c3      	ldr	r3, [r0, r3]
 80002be:	469f      	mov	pc, r3
 80002c0:	2300      	movs	r3, #0
 80002c2:	4698      	mov	r8, r3
 80002c4:	0026      	movs	r6, r4
 80002c6:	4645      	mov	r5, r8
 80002c8:	4692      	mov	sl, r2
 80002ca:	4653      	mov	r3, sl
 80002cc:	2b02      	cmp	r3, #2
 80002ce:	d100      	bne.n	80002d2 <__aeabi_fdiv+0x82>
 80002d0:	e089      	b.n	80003e6 <__aeabi_fdiv+0x196>
 80002d2:	2b03      	cmp	r3, #3
 80002d4:	d100      	bne.n	80002d8 <__aeabi_fdiv+0x88>
 80002d6:	e09e      	b.n	8000416 <__aeabi_fdiv+0x1c6>
 80002d8:	2b01      	cmp	r3, #1
 80002da:	d018      	beq.n	800030e <__aeabi_fdiv+0xbe>
 80002dc:	003b      	movs	r3, r7
 80002de:	337f      	adds	r3, #127	; 0x7f
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	dd69      	ble.n	80003b8 <__aeabi_fdiv+0x168>
 80002e4:	076a      	lsls	r2, r5, #29
 80002e6:	d004      	beq.n	80002f2 <__aeabi_fdiv+0xa2>
 80002e8:	220f      	movs	r2, #15
 80002ea:	402a      	ands	r2, r5
 80002ec:	2a04      	cmp	r2, #4
 80002ee:	d000      	beq.n	80002f2 <__aeabi_fdiv+0xa2>
 80002f0:	3504      	adds	r5, #4
 80002f2:	012a      	lsls	r2, r5, #4
 80002f4:	d503      	bpl.n	80002fe <__aeabi_fdiv+0xae>
 80002f6:	4b60      	ldr	r3, [pc, #384]	; (8000478 <__aeabi_fdiv+0x228>)
 80002f8:	401d      	ands	r5, r3
 80002fa:	003b      	movs	r3, r7
 80002fc:	3380      	adds	r3, #128	; 0x80
 80002fe:	2bfe      	cmp	r3, #254	; 0xfe
 8000300:	dd00      	ble.n	8000304 <__aeabi_fdiv+0xb4>
 8000302:	e070      	b.n	80003e6 <__aeabi_fdiv+0x196>
 8000304:	01ad      	lsls	r5, r5, #6
 8000306:	0a6d      	lsrs	r5, r5, #9
 8000308:	b2d8      	uxtb	r0, r3
 800030a:	e002      	b.n	8000312 <__aeabi_fdiv+0xc2>
 800030c:	000e      	movs	r6, r1
 800030e:	2000      	movs	r0, #0
 8000310:	2500      	movs	r5, #0
 8000312:	05c0      	lsls	r0, r0, #23
 8000314:	4328      	orrs	r0, r5
 8000316:	07f6      	lsls	r6, r6, #31
 8000318:	4330      	orrs	r0, r6
 800031a:	bce0      	pop	{r5, r6, r7}
 800031c:	46ba      	mov	sl, r7
 800031e:	46b1      	mov	r9, r6
 8000320:	46a8      	mov	r8, r5
 8000322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000324:	4643      	mov	r3, r8
 8000326:	2b00      	cmp	r3, #0
 8000328:	d13f      	bne.n	80003aa <__aeabi_fdiv+0x15a>
 800032a:	2202      	movs	r2, #2
 800032c:	3fff      	subs	r7, #255	; 0xff
 800032e:	e003      	b.n	8000338 <__aeabi_fdiv+0xe8>
 8000330:	4643      	mov	r3, r8
 8000332:	2b00      	cmp	r3, #0
 8000334:	d12d      	bne.n	8000392 <__aeabi_fdiv+0x142>
 8000336:	2201      	movs	r2, #1
 8000338:	0031      	movs	r1, r6
 800033a:	464b      	mov	r3, r9
 800033c:	4061      	eors	r1, r4
 800033e:	b2c9      	uxtb	r1, r1
 8000340:	4313      	orrs	r3, r2
 8000342:	2b0f      	cmp	r3, #15
 8000344:	d834      	bhi.n	80003b0 <__aeabi_fdiv+0x160>
 8000346:	484d      	ldr	r0, [pc, #308]	; (800047c <__aeabi_fdiv+0x22c>)
 8000348:	009b      	lsls	r3, r3, #2
 800034a:	58c3      	ldr	r3, [r0, r3]
 800034c:	469f      	mov	pc, r3
 800034e:	2d00      	cmp	r5, #0
 8000350:	d113      	bne.n	800037a <__aeabi_fdiv+0x12a>
 8000352:	2304      	movs	r3, #4
 8000354:	4699      	mov	r9, r3
 8000356:	3b03      	subs	r3, #3
 8000358:	2700      	movs	r7, #0
 800035a:	469a      	mov	sl, r3
 800035c:	e791      	b.n	8000282 <__aeabi_fdiv+0x32>
 800035e:	2d00      	cmp	r5, #0
 8000360:	d105      	bne.n	800036e <__aeabi_fdiv+0x11e>
 8000362:	2308      	movs	r3, #8
 8000364:	4699      	mov	r9, r3
 8000366:	3b06      	subs	r3, #6
 8000368:	27ff      	movs	r7, #255	; 0xff
 800036a:	469a      	mov	sl, r3
 800036c:	e789      	b.n	8000282 <__aeabi_fdiv+0x32>
 800036e:	230c      	movs	r3, #12
 8000370:	4699      	mov	r9, r3
 8000372:	3b09      	subs	r3, #9
 8000374:	27ff      	movs	r7, #255	; 0xff
 8000376:	469a      	mov	sl, r3
 8000378:	e783      	b.n	8000282 <__aeabi_fdiv+0x32>
 800037a:	0028      	movs	r0, r5
 800037c:	f000 fc3e 	bl	8000bfc <__clzsi2>
 8000380:	2776      	movs	r7, #118	; 0x76
 8000382:	1f43      	subs	r3, r0, #5
 8000384:	409d      	lsls	r5, r3
 8000386:	2300      	movs	r3, #0
 8000388:	427f      	negs	r7, r7
 800038a:	4699      	mov	r9, r3
 800038c:	469a      	mov	sl, r3
 800038e:	1a3f      	subs	r7, r7, r0
 8000390:	e777      	b.n	8000282 <__aeabi_fdiv+0x32>
 8000392:	4640      	mov	r0, r8
 8000394:	f000 fc32 	bl	8000bfc <__clzsi2>
 8000398:	4642      	mov	r2, r8
 800039a:	1f43      	subs	r3, r0, #5
 800039c:	409a      	lsls	r2, r3
 800039e:	2376      	movs	r3, #118	; 0x76
 80003a0:	425b      	negs	r3, r3
 80003a2:	4690      	mov	r8, r2
 80003a4:	1a1b      	subs	r3, r3, r0
 80003a6:	2200      	movs	r2, #0
 80003a8:	e77d      	b.n	80002a6 <__aeabi_fdiv+0x56>
 80003aa:	23ff      	movs	r3, #255	; 0xff
 80003ac:	2203      	movs	r2, #3
 80003ae:	e77a      	b.n	80002a6 <__aeabi_fdiv+0x56>
 80003b0:	000e      	movs	r6, r1
 80003b2:	20ff      	movs	r0, #255	; 0xff
 80003b4:	2500      	movs	r5, #0
 80003b6:	e7ac      	b.n	8000312 <__aeabi_fdiv+0xc2>
 80003b8:	2001      	movs	r0, #1
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	281b      	cmp	r0, #27
 80003be:	dca6      	bgt.n	800030e <__aeabi_fdiv+0xbe>
 80003c0:	379e      	adds	r7, #158	; 0x9e
 80003c2:	002a      	movs	r2, r5
 80003c4:	40bd      	lsls	r5, r7
 80003c6:	40c2      	lsrs	r2, r0
 80003c8:	1e6b      	subs	r3, r5, #1
 80003ca:	419d      	sbcs	r5, r3
 80003cc:	4315      	orrs	r5, r2
 80003ce:	076b      	lsls	r3, r5, #29
 80003d0:	d004      	beq.n	80003dc <__aeabi_fdiv+0x18c>
 80003d2:	230f      	movs	r3, #15
 80003d4:	402b      	ands	r3, r5
 80003d6:	2b04      	cmp	r3, #4
 80003d8:	d000      	beq.n	80003dc <__aeabi_fdiv+0x18c>
 80003da:	3504      	adds	r5, #4
 80003dc:	016b      	lsls	r3, r5, #5
 80003de:	d544      	bpl.n	800046a <__aeabi_fdiv+0x21a>
 80003e0:	2001      	movs	r0, #1
 80003e2:	2500      	movs	r5, #0
 80003e4:	e795      	b.n	8000312 <__aeabi_fdiv+0xc2>
 80003e6:	20ff      	movs	r0, #255	; 0xff
 80003e8:	2500      	movs	r5, #0
 80003ea:	e792      	b.n	8000312 <__aeabi_fdiv+0xc2>
 80003ec:	2580      	movs	r5, #128	; 0x80
 80003ee:	2600      	movs	r6, #0
 80003f0:	20ff      	movs	r0, #255	; 0xff
 80003f2:	03ed      	lsls	r5, r5, #15
 80003f4:	e78d      	b.n	8000312 <__aeabi_fdiv+0xc2>
 80003f6:	2300      	movs	r3, #0
 80003f8:	4698      	mov	r8, r3
 80003fa:	2080      	movs	r0, #128	; 0x80
 80003fc:	03c0      	lsls	r0, r0, #15
 80003fe:	4205      	tst	r5, r0
 8000400:	d009      	beq.n	8000416 <__aeabi_fdiv+0x1c6>
 8000402:	4643      	mov	r3, r8
 8000404:	4203      	tst	r3, r0
 8000406:	d106      	bne.n	8000416 <__aeabi_fdiv+0x1c6>
 8000408:	4645      	mov	r5, r8
 800040a:	4305      	orrs	r5, r0
 800040c:	026d      	lsls	r5, r5, #9
 800040e:	0026      	movs	r6, r4
 8000410:	20ff      	movs	r0, #255	; 0xff
 8000412:	0a6d      	lsrs	r5, r5, #9
 8000414:	e77d      	b.n	8000312 <__aeabi_fdiv+0xc2>
 8000416:	2080      	movs	r0, #128	; 0x80
 8000418:	03c0      	lsls	r0, r0, #15
 800041a:	4305      	orrs	r5, r0
 800041c:	026d      	lsls	r5, r5, #9
 800041e:	20ff      	movs	r0, #255	; 0xff
 8000420:	0a6d      	lsrs	r5, r5, #9
 8000422:	e776      	b.n	8000312 <__aeabi_fdiv+0xc2>
 8000424:	4642      	mov	r2, r8
 8000426:	016b      	lsls	r3, r5, #5
 8000428:	0150      	lsls	r0, r2, #5
 800042a:	4283      	cmp	r3, r0
 800042c:	d219      	bcs.n	8000462 <__aeabi_fdiv+0x212>
 800042e:	221b      	movs	r2, #27
 8000430:	2500      	movs	r5, #0
 8000432:	3f01      	subs	r7, #1
 8000434:	2601      	movs	r6, #1
 8000436:	001c      	movs	r4, r3
 8000438:	006d      	lsls	r5, r5, #1
 800043a:	005b      	lsls	r3, r3, #1
 800043c:	2c00      	cmp	r4, #0
 800043e:	db01      	blt.n	8000444 <__aeabi_fdiv+0x1f4>
 8000440:	4298      	cmp	r0, r3
 8000442:	d801      	bhi.n	8000448 <__aeabi_fdiv+0x1f8>
 8000444:	1a1b      	subs	r3, r3, r0
 8000446:	4335      	orrs	r5, r6
 8000448:	3a01      	subs	r2, #1
 800044a:	2a00      	cmp	r2, #0
 800044c:	d1f3      	bne.n	8000436 <__aeabi_fdiv+0x1e6>
 800044e:	1e5a      	subs	r2, r3, #1
 8000450:	4193      	sbcs	r3, r2
 8000452:	431d      	orrs	r5, r3
 8000454:	003b      	movs	r3, r7
 8000456:	337f      	adds	r3, #127	; 0x7f
 8000458:	000e      	movs	r6, r1
 800045a:	2b00      	cmp	r3, #0
 800045c:	dd00      	ble.n	8000460 <__aeabi_fdiv+0x210>
 800045e:	e741      	b.n	80002e4 <__aeabi_fdiv+0x94>
 8000460:	e7aa      	b.n	80003b8 <__aeabi_fdiv+0x168>
 8000462:	221a      	movs	r2, #26
 8000464:	2501      	movs	r5, #1
 8000466:	1a1b      	subs	r3, r3, r0
 8000468:	e7e4      	b.n	8000434 <__aeabi_fdiv+0x1e4>
 800046a:	01ad      	lsls	r5, r5, #6
 800046c:	2000      	movs	r0, #0
 800046e:	0a6d      	lsrs	r5, r5, #9
 8000470:	e74f      	b.n	8000312 <__aeabi_fdiv+0xc2>
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	08003410 	.word	0x08003410
 8000478:	f7ffffff 	.word	0xf7ffffff
 800047c:	08003450 	.word	0x08003450

08000480 <__aeabi_fmul>:
 8000480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000482:	464f      	mov	r7, r9
 8000484:	4646      	mov	r6, r8
 8000486:	46d6      	mov	lr, sl
 8000488:	0244      	lsls	r4, r0, #9
 800048a:	0045      	lsls	r5, r0, #1
 800048c:	b5c0      	push	{r6, r7, lr}
 800048e:	0a64      	lsrs	r4, r4, #9
 8000490:	1c0f      	adds	r7, r1, #0
 8000492:	0e2d      	lsrs	r5, r5, #24
 8000494:	0fc6      	lsrs	r6, r0, #31
 8000496:	2d00      	cmp	r5, #0
 8000498:	d100      	bne.n	800049c <__aeabi_fmul+0x1c>
 800049a:	e08d      	b.n	80005b8 <__aeabi_fmul+0x138>
 800049c:	2dff      	cmp	r5, #255	; 0xff
 800049e:	d100      	bne.n	80004a2 <__aeabi_fmul+0x22>
 80004a0:	e092      	b.n	80005c8 <__aeabi_fmul+0x148>
 80004a2:	2300      	movs	r3, #0
 80004a4:	2080      	movs	r0, #128	; 0x80
 80004a6:	4699      	mov	r9, r3
 80004a8:	469a      	mov	sl, r3
 80004aa:	00e4      	lsls	r4, r4, #3
 80004ac:	04c0      	lsls	r0, r0, #19
 80004ae:	4304      	orrs	r4, r0
 80004b0:	3d7f      	subs	r5, #127	; 0x7f
 80004b2:	0278      	lsls	r0, r7, #9
 80004b4:	0a43      	lsrs	r3, r0, #9
 80004b6:	4698      	mov	r8, r3
 80004b8:	007b      	lsls	r3, r7, #1
 80004ba:	0e1b      	lsrs	r3, r3, #24
 80004bc:	0fff      	lsrs	r7, r7, #31
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d100      	bne.n	80004c4 <__aeabi_fmul+0x44>
 80004c2:	e070      	b.n	80005a6 <__aeabi_fmul+0x126>
 80004c4:	2bff      	cmp	r3, #255	; 0xff
 80004c6:	d100      	bne.n	80004ca <__aeabi_fmul+0x4a>
 80004c8:	e086      	b.n	80005d8 <__aeabi_fmul+0x158>
 80004ca:	4642      	mov	r2, r8
 80004cc:	00d0      	lsls	r0, r2, #3
 80004ce:	2280      	movs	r2, #128	; 0x80
 80004d0:	3b7f      	subs	r3, #127	; 0x7f
 80004d2:	18ed      	adds	r5, r5, r3
 80004d4:	2300      	movs	r3, #0
 80004d6:	04d2      	lsls	r2, r2, #19
 80004d8:	4302      	orrs	r2, r0
 80004da:	4690      	mov	r8, r2
 80004dc:	469c      	mov	ip, r3
 80004de:	0031      	movs	r1, r6
 80004e0:	464b      	mov	r3, r9
 80004e2:	4079      	eors	r1, r7
 80004e4:	1c68      	adds	r0, r5, #1
 80004e6:	2b0f      	cmp	r3, #15
 80004e8:	d81c      	bhi.n	8000524 <__aeabi_fmul+0xa4>
 80004ea:	4a76      	ldr	r2, [pc, #472]	; (80006c4 <__aeabi_fmul+0x244>)
 80004ec:	009b      	lsls	r3, r3, #2
 80004ee:	58d3      	ldr	r3, [r2, r3]
 80004f0:	469f      	mov	pc, r3
 80004f2:	0039      	movs	r1, r7
 80004f4:	4644      	mov	r4, r8
 80004f6:	46e2      	mov	sl, ip
 80004f8:	4653      	mov	r3, sl
 80004fa:	2b02      	cmp	r3, #2
 80004fc:	d00f      	beq.n	800051e <__aeabi_fmul+0x9e>
 80004fe:	2b03      	cmp	r3, #3
 8000500:	d100      	bne.n	8000504 <__aeabi_fmul+0x84>
 8000502:	e0d7      	b.n	80006b4 <__aeabi_fmul+0x234>
 8000504:	2b01      	cmp	r3, #1
 8000506:	d137      	bne.n	8000578 <__aeabi_fmul+0xf8>
 8000508:	2000      	movs	r0, #0
 800050a:	2400      	movs	r4, #0
 800050c:	05c0      	lsls	r0, r0, #23
 800050e:	4320      	orrs	r0, r4
 8000510:	07c9      	lsls	r1, r1, #31
 8000512:	4308      	orrs	r0, r1
 8000514:	bce0      	pop	{r5, r6, r7}
 8000516:	46ba      	mov	sl, r7
 8000518:	46b1      	mov	r9, r6
 800051a:	46a8      	mov	r8, r5
 800051c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800051e:	20ff      	movs	r0, #255	; 0xff
 8000520:	2400      	movs	r4, #0
 8000522:	e7f3      	b.n	800050c <__aeabi_fmul+0x8c>
 8000524:	0c26      	lsrs	r6, r4, #16
 8000526:	0424      	lsls	r4, r4, #16
 8000528:	0c22      	lsrs	r2, r4, #16
 800052a:	4644      	mov	r4, r8
 800052c:	0424      	lsls	r4, r4, #16
 800052e:	0c24      	lsrs	r4, r4, #16
 8000530:	4643      	mov	r3, r8
 8000532:	0027      	movs	r7, r4
 8000534:	0c1b      	lsrs	r3, r3, #16
 8000536:	4357      	muls	r7, r2
 8000538:	4374      	muls	r4, r6
 800053a:	435a      	muls	r2, r3
 800053c:	435e      	muls	r6, r3
 800053e:	1912      	adds	r2, r2, r4
 8000540:	0c3b      	lsrs	r3, r7, #16
 8000542:	189b      	adds	r3, r3, r2
 8000544:	429c      	cmp	r4, r3
 8000546:	d903      	bls.n	8000550 <__aeabi_fmul+0xd0>
 8000548:	2280      	movs	r2, #128	; 0x80
 800054a:	0252      	lsls	r2, r2, #9
 800054c:	4694      	mov	ip, r2
 800054e:	4466      	add	r6, ip
 8000550:	043f      	lsls	r7, r7, #16
 8000552:	041a      	lsls	r2, r3, #16
 8000554:	0c3f      	lsrs	r7, r7, #16
 8000556:	19d2      	adds	r2, r2, r7
 8000558:	0194      	lsls	r4, r2, #6
 800055a:	1e67      	subs	r7, r4, #1
 800055c:	41bc      	sbcs	r4, r7
 800055e:	0c1b      	lsrs	r3, r3, #16
 8000560:	0e92      	lsrs	r2, r2, #26
 8000562:	199b      	adds	r3, r3, r6
 8000564:	4314      	orrs	r4, r2
 8000566:	019b      	lsls	r3, r3, #6
 8000568:	431c      	orrs	r4, r3
 800056a:	011b      	lsls	r3, r3, #4
 800056c:	d400      	bmi.n	8000570 <__aeabi_fmul+0xf0>
 800056e:	e09b      	b.n	80006a8 <__aeabi_fmul+0x228>
 8000570:	2301      	movs	r3, #1
 8000572:	0862      	lsrs	r2, r4, #1
 8000574:	401c      	ands	r4, r3
 8000576:	4314      	orrs	r4, r2
 8000578:	0002      	movs	r2, r0
 800057a:	327f      	adds	r2, #127	; 0x7f
 800057c:	2a00      	cmp	r2, #0
 800057e:	dd64      	ble.n	800064a <__aeabi_fmul+0x1ca>
 8000580:	0763      	lsls	r3, r4, #29
 8000582:	d004      	beq.n	800058e <__aeabi_fmul+0x10e>
 8000584:	230f      	movs	r3, #15
 8000586:	4023      	ands	r3, r4
 8000588:	2b04      	cmp	r3, #4
 800058a:	d000      	beq.n	800058e <__aeabi_fmul+0x10e>
 800058c:	3404      	adds	r4, #4
 800058e:	0123      	lsls	r3, r4, #4
 8000590:	d503      	bpl.n	800059a <__aeabi_fmul+0x11a>
 8000592:	0002      	movs	r2, r0
 8000594:	4b4c      	ldr	r3, [pc, #304]	; (80006c8 <__aeabi_fmul+0x248>)
 8000596:	3280      	adds	r2, #128	; 0x80
 8000598:	401c      	ands	r4, r3
 800059a:	2afe      	cmp	r2, #254	; 0xfe
 800059c:	dcbf      	bgt.n	800051e <__aeabi_fmul+0x9e>
 800059e:	01a4      	lsls	r4, r4, #6
 80005a0:	0a64      	lsrs	r4, r4, #9
 80005a2:	b2d0      	uxtb	r0, r2
 80005a4:	e7b2      	b.n	800050c <__aeabi_fmul+0x8c>
 80005a6:	4643      	mov	r3, r8
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d13d      	bne.n	8000628 <__aeabi_fmul+0x1a8>
 80005ac:	464a      	mov	r2, r9
 80005ae:	3301      	adds	r3, #1
 80005b0:	431a      	orrs	r2, r3
 80005b2:	4691      	mov	r9, r2
 80005b4:	469c      	mov	ip, r3
 80005b6:	e792      	b.n	80004de <__aeabi_fmul+0x5e>
 80005b8:	2c00      	cmp	r4, #0
 80005ba:	d129      	bne.n	8000610 <__aeabi_fmul+0x190>
 80005bc:	2304      	movs	r3, #4
 80005be:	4699      	mov	r9, r3
 80005c0:	3b03      	subs	r3, #3
 80005c2:	2500      	movs	r5, #0
 80005c4:	469a      	mov	sl, r3
 80005c6:	e774      	b.n	80004b2 <__aeabi_fmul+0x32>
 80005c8:	2c00      	cmp	r4, #0
 80005ca:	d11b      	bne.n	8000604 <__aeabi_fmul+0x184>
 80005cc:	2308      	movs	r3, #8
 80005ce:	4699      	mov	r9, r3
 80005d0:	3b06      	subs	r3, #6
 80005d2:	25ff      	movs	r5, #255	; 0xff
 80005d4:	469a      	mov	sl, r3
 80005d6:	e76c      	b.n	80004b2 <__aeabi_fmul+0x32>
 80005d8:	4643      	mov	r3, r8
 80005da:	35ff      	adds	r5, #255	; 0xff
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d10b      	bne.n	80005f8 <__aeabi_fmul+0x178>
 80005e0:	2302      	movs	r3, #2
 80005e2:	464a      	mov	r2, r9
 80005e4:	431a      	orrs	r2, r3
 80005e6:	4691      	mov	r9, r2
 80005e8:	469c      	mov	ip, r3
 80005ea:	e778      	b.n	80004de <__aeabi_fmul+0x5e>
 80005ec:	4653      	mov	r3, sl
 80005ee:	0031      	movs	r1, r6
 80005f0:	2b02      	cmp	r3, #2
 80005f2:	d000      	beq.n	80005f6 <__aeabi_fmul+0x176>
 80005f4:	e783      	b.n	80004fe <__aeabi_fmul+0x7e>
 80005f6:	e792      	b.n	800051e <__aeabi_fmul+0x9e>
 80005f8:	2303      	movs	r3, #3
 80005fa:	464a      	mov	r2, r9
 80005fc:	431a      	orrs	r2, r3
 80005fe:	4691      	mov	r9, r2
 8000600:	469c      	mov	ip, r3
 8000602:	e76c      	b.n	80004de <__aeabi_fmul+0x5e>
 8000604:	230c      	movs	r3, #12
 8000606:	4699      	mov	r9, r3
 8000608:	3b09      	subs	r3, #9
 800060a:	25ff      	movs	r5, #255	; 0xff
 800060c:	469a      	mov	sl, r3
 800060e:	e750      	b.n	80004b2 <__aeabi_fmul+0x32>
 8000610:	0020      	movs	r0, r4
 8000612:	f000 faf3 	bl	8000bfc <__clzsi2>
 8000616:	2576      	movs	r5, #118	; 0x76
 8000618:	1f43      	subs	r3, r0, #5
 800061a:	409c      	lsls	r4, r3
 800061c:	2300      	movs	r3, #0
 800061e:	426d      	negs	r5, r5
 8000620:	4699      	mov	r9, r3
 8000622:	469a      	mov	sl, r3
 8000624:	1a2d      	subs	r5, r5, r0
 8000626:	e744      	b.n	80004b2 <__aeabi_fmul+0x32>
 8000628:	4640      	mov	r0, r8
 800062a:	f000 fae7 	bl	8000bfc <__clzsi2>
 800062e:	4642      	mov	r2, r8
 8000630:	1f43      	subs	r3, r0, #5
 8000632:	409a      	lsls	r2, r3
 8000634:	2300      	movs	r3, #0
 8000636:	1a2d      	subs	r5, r5, r0
 8000638:	4690      	mov	r8, r2
 800063a:	469c      	mov	ip, r3
 800063c:	3d76      	subs	r5, #118	; 0x76
 800063e:	e74e      	b.n	80004de <__aeabi_fmul+0x5e>
 8000640:	2480      	movs	r4, #128	; 0x80
 8000642:	2100      	movs	r1, #0
 8000644:	20ff      	movs	r0, #255	; 0xff
 8000646:	03e4      	lsls	r4, r4, #15
 8000648:	e760      	b.n	800050c <__aeabi_fmul+0x8c>
 800064a:	2301      	movs	r3, #1
 800064c:	1a9b      	subs	r3, r3, r2
 800064e:	2b1b      	cmp	r3, #27
 8000650:	dd00      	ble.n	8000654 <__aeabi_fmul+0x1d4>
 8000652:	e759      	b.n	8000508 <__aeabi_fmul+0x88>
 8000654:	0022      	movs	r2, r4
 8000656:	309e      	adds	r0, #158	; 0x9e
 8000658:	40da      	lsrs	r2, r3
 800065a:	4084      	lsls	r4, r0
 800065c:	0013      	movs	r3, r2
 800065e:	1e62      	subs	r2, r4, #1
 8000660:	4194      	sbcs	r4, r2
 8000662:	431c      	orrs	r4, r3
 8000664:	0763      	lsls	r3, r4, #29
 8000666:	d004      	beq.n	8000672 <__aeabi_fmul+0x1f2>
 8000668:	230f      	movs	r3, #15
 800066a:	4023      	ands	r3, r4
 800066c:	2b04      	cmp	r3, #4
 800066e:	d000      	beq.n	8000672 <__aeabi_fmul+0x1f2>
 8000670:	3404      	adds	r4, #4
 8000672:	0163      	lsls	r3, r4, #5
 8000674:	d51a      	bpl.n	80006ac <__aeabi_fmul+0x22c>
 8000676:	2001      	movs	r0, #1
 8000678:	2400      	movs	r4, #0
 800067a:	e747      	b.n	800050c <__aeabi_fmul+0x8c>
 800067c:	2080      	movs	r0, #128	; 0x80
 800067e:	03c0      	lsls	r0, r0, #15
 8000680:	4204      	tst	r4, r0
 8000682:	d009      	beq.n	8000698 <__aeabi_fmul+0x218>
 8000684:	4643      	mov	r3, r8
 8000686:	4203      	tst	r3, r0
 8000688:	d106      	bne.n	8000698 <__aeabi_fmul+0x218>
 800068a:	4644      	mov	r4, r8
 800068c:	4304      	orrs	r4, r0
 800068e:	0264      	lsls	r4, r4, #9
 8000690:	0039      	movs	r1, r7
 8000692:	20ff      	movs	r0, #255	; 0xff
 8000694:	0a64      	lsrs	r4, r4, #9
 8000696:	e739      	b.n	800050c <__aeabi_fmul+0x8c>
 8000698:	2080      	movs	r0, #128	; 0x80
 800069a:	03c0      	lsls	r0, r0, #15
 800069c:	4304      	orrs	r4, r0
 800069e:	0264      	lsls	r4, r4, #9
 80006a0:	0031      	movs	r1, r6
 80006a2:	20ff      	movs	r0, #255	; 0xff
 80006a4:	0a64      	lsrs	r4, r4, #9
 80006a6:	e731      	b.n	800050c <__aeabi_fmul+0x8c>
 80006a8:	0028      	movs	r0, r5
 80006aa:	e765      	b.n	8000578 <__aeabi_fmul+0xf8>
 80006ac:	01a4      	lsls	r4, r4, #6
 80006ae:	2000      	movs	r0, #0
 80006b0:	0a64      	lsrs	r4, r4, #9
 80006b2:	e72b      	b.n	800050c <__aeabi_fmul+0x8c>
 80006b4:	2080      	movs	r0, #128	; 0x80
 80006b6:	03c0      	lsls	r0, r0, #15
 80006b8:	4304      	orrs	r4, r0
 80006ba:	0264      	lsls	r4, r4, #9
 80006bc:	20ff      	movs	r0, #255	; 0xff
 80006be:	0a64      	lsrs	r4, r4, #9
 80006c0:	e724      	b.n	800050c <__aeabi_fmul+0x8c>
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	08003490 	.word	0x08003490
 80006c8:	f7ffffff 	.word	0xf7ffffff

080006cc <__aeabi_fsub>:
 80006cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006ce:	46ce      	mov	lr, r9
 80006d0:	4647      	mov	r7, r8
 80006d2:	0243      	lsls	r3, r0, #9
 80006d4:	0a5b      	lsrs	r3, r3, #9
 80006d6:	024e      	lsls	r6, r1, #9
 80006d8:	00da      	lsls	r2, r3, #3
 80006da:	4694      	mov	ip, r2
 80006dc:	0a72      	lsrs	r2, r6, #9
 80006de:	4691      	mov	r9, r2
 80006e0:	0045      	lsls	r5, r0, #1
 80006e2:	004a      	lsls	r2, r1, #1
 80006e4:	b580      	push	{r7, lr}
 80006e6:	0e2d      	lsrs	r5, r5, #24
 80006e8:	001f      	movs	r7, r3
 80006ea:	0fc4      	lsrs	r4, r0, #31
 80006ec:	0e12      	lsrs	r2, r2, #24
 80006ee:	0fc9      	lsrs	r1, r1, #31
 80006f0:	09b6      	lsrs	r6, r6, #6
 80006f2:	2aff      	cmp	r2, #255	; 0xff
 80006f4:	d05b      	beq.n	80007ae <__aeabi_fsub+0xe2>
 80006f6:	2001      	movs	r0, #1
 80006f8:	4041      	eors	r1, r0
 80006fa:	428c      	cmp	r4, r1
 80006fc:	d039      	beq.n	8000772 <__aeabi_fsub+0xa6>
 80006fe:	1aa8      	subs	r0, r5, r2
 8000700:	2800      	cmp	r0, #0
 8000702:	dd5a      	ble.n	80007ba <__aeabi_fsub+0xee>
 8000704:	2a00      	cmp	r2, #0
 8000706:	d06a      	beq.n	80007de <__aeabi_fsub+0x112>
 8000708:	2dff      	cmp	r5, #255	; 0xff
 800070a:	d100      	bne.n	800070e <__aeabi_fsub+0x42>
 800070c:	e0d9      	b.n	80008c2 <__aeabi_fsub+0x1f6>
 800070e:	2280      	movs	r2, #128	; 0x80
 8000710:	04d2      	lsls	r2, r2, #19
 8000712:	4316      	orrs	r6, r2
 8000714:	281b      	cmp	r0, #27
 8000716:	dc00      	bgt.n	800071a <__aeabi_fsub+0x4e>
 8000718:	e0e9      	b.n	80008ee <__aeabi_fsub+0x222>
 800071a:	2001      	movs	r0, #1
 800071c:	4663      	mov	r3, ip
 800071e:	1a18      	subs	r0, r3, r0
 8000720:	0143      	lsls	r3, r0, #5
 8000722:	d400      	bmi.n	8000726 <__aeabi_fsub+0x5a>
 8000724:	e0b4      	b.n	8000890 <__aeabi_fsub+0x1c4>
 8000726:	0180      	lsls	r0, r0, #6
 8000728:	0987      	lsrs	r7, r0, #6
 800072a:	0038      	movs	r0, r7
 800072c:	f000 fa66 	bl	8000bfc <__clzsi2>
 8000730:	3805      	subs	r0, #5
 8000732:	4087      	lsls	r7, r0
 8000734:	4285      	cmp	r5, r0
 8000736:	dc00      	bgt.n	800073a <__aeabi_fsub+0x6e>
 8000738:	e0cc      	b.n	80008d4 <__aeabi_fsub+0x208>
 800073a:	1a2d      	subs	r5, r5, r0
 800073c:	48b5      	ldr	r0, [pc, #724]	; (8000a14 <__aeabi_fsub+0x348>)
 800073e:	4038      	ands	r0, r7
 8000740:	0743      	lsls	r3, r0, #29
 8000742:	d004      	beq.n	800074e <__aeabi_fsub+0x82>
 8000744:	230f      	movs	r3, #15
 8000746:	4003      	ands	r3, r0
 8000748:	2b04      	cmp	r3, #4
 800074a:	d000      	beq.n	800074e <__aeabi_fsub+0x82>
 800074c:	3004      	adds	r0, #4
 800074e:	0143      	lsls	r3, r0, #5
 8000750:	d400      	bmi.n	8000754 <__aeabi_fsub+0x88>
 8000752:	e0a0      	b.n	8000896 <__aeabi_fsub+0x1ca>
 8000754:	1c6a      	adds	r2, r5, #1
 8000756:	2dfe      	cmp	r5, #254	; 0xfe
 8000758:	d100      	bne.n	800075c <__aeabi_fsub+0x90>
 800075a:	e08d      	b.n	8000878 <__aeabi_fsub+0x1ac>
 800075c:	0180      	lsls	r0, r0, #6
 800075e:	0a47      	lsrs	r7, r0, #9
 8000760:	b2d2      	uxtb	r2, r2
 8000762:	05d0      	lsls	r0, r2, #23
 8000764:	4338      	orrs	r0, r7
 8000766:	07e4      	lsls	r4, r4, #31
 8000768:	4320      	orrs	r0, r4
 800076a:	bcc0      	pop	{r6, r7}
 800076c:	46b9      	mov	r9, r7
 800076e:	46b0      	mov	r8, r6
 8000770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000772:	1aa8      	subs	r0, r5, r2
 8000774:	4680      	mov	r8, r0
 8000776:	2800      	cmp	r0, #0
 8000778:	dd45      	ble.n	8000806 <__aeabi_fsub+0x13a>
 800077a:	2a00      	cmp	r2, #0
 800077c:	d070      	beq.n	8000860 <__aeabi_fsub+0x194>
 800077e:	2dff      	cmp	r5, #255	; 0xff
 8000780:	d100      	bne.n	8000784 <__aeabi_fsub+0xb8>
 8000782:	e09e      	b.n	80008c2 <__aeabi_fsub+0x1f6>
 8000784:	2380      	movs	r3, #128	; 0x80
 8000786:	04db      	lsls	r3, r3, #19
 8000788:	431e      	orrs	r6, r3
 800078a:	4643      	mov	r3, r8
 800078c:	2b1b      	cmp	r3, #27
 800078e:	dc00      	bgt.n	8000792 <__aeabi_fsub+0xc6>
 8000790:	e0d2      	b.n	8000938 <__aeabi_fsub+0x26c>
 8000792:	2001      	movs	r0, #1
 8000794:	4460      	add	r0, ip
 8000796:	0143      	lsls	r3, r0, #5
 8000798:	d57a      	bpl.n	8000890 <__aeabi_fsub+0x1c4>
 800079a:	3501      	adds	r5, #1
 800079c:	2dff      	cmp	r5, #255	; 0xff
 800079e:	d06b      	beq.n	8000878 <__aeabi_fsub+0x1ac>
 80007a0:	2301      	movs	r3, #1
 80007a2:	4a9d      	ldr	r2, [pc, #628]	; (8000a18 <__aeabi_fsub+0x34c>)
 80007a4:	4003      	ands	r3, r0
 80007a6:	0840      	lsrs	r0, r0, #1
 80007a8:	4010      	ands	r0, r2
 80007aa:	4318      	orrs	r0, r3
 80007ac:	e7c8      	b.n	8000740 <__aeabi_fsub+0x74>
 80007ae:	2e00      	cmp	r6, #0
 80007b0:	d020      	beq.n	80007f4 <__aeabi_fsub+0x128>
 80007b2:	428c      	cmp	r4, r1
 80007b4:	d023      	beq.n	80007fe <__aeabi_fsub+0x132>
 80007b6:	0028      	movs	r0, r5
 80007b8:	38ff      	subs	r0, #255	; 0xff
 80007ba:	2800      	cmp	r0, #0
 80007bc:	d039      	beq.n	8000832 <__aeabi_fsub+0x166>
 80007be:	1b57      	subs	r7, r2, r5
 80007c0:	2d00      	cmp	r5, #0
 80007c2:	d000      	beq.n	80007c6 <__aeabi_fsub+0xfa>
 80007c4:	e09d      	b.n	8000902 <__aeabi_fsub+0x236>
 80007c6:	4663      	mov	r3, ip
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d100      	bne.n	80007ce <__aeabi_fsub+0x102>
 80007cc:	e0db      	b.n	8000986 <__aeabi_fsub+0x2ba>
 80007ce:	1e7b      	subs	r3, r7, #1
 80007d0:	2f01      	cmp	r7, #1
 80007d2:	d100      	bne.n	80007d6 <__aeabi_fsub+0x10a>
 80007d4:	e10d      	b.n	80009f2 <__aeabi_fsub+0x326>
 80007d6:	2fff      	cmp	r7, #255	; 0xff
 80007d8:	d071      	beq.n	80008be <__aeabi_fsub+0x1f2>
 80007da:	001f      	movs	r7, r3
 80007dc:	e098      	b.n	8000910 <__aeabi_fsub+0x244>
 80007de:	2e00      	cmp	r6, #0
 80007e0:	d100      	bne.n	80007e4 <__aeabi_fsub+0x118>
 80007e2:	e0a7      	b.n	8000934 <__aeabi_fsub+0x268>
 80007e4:	1e42      	subs	r2, r0, #1
 80007e6:	2801      	cmp	r0, #1
 80007e8:	d100      	bne.n	80007ec <__aeabi_fsub+0x120>
 80007ea:	e0e6      	b.n	80009ba <__aeabi_fsub+0x2ee>
 80007ec:	28ff      	cmp	r0, #255	; 0xff
 80007ee:	d068      	beq.n	80008c2 <__aeabi_fsub+0x1f6>
 80007f0:	0010      	movs	r0, r2
 80007f2:	e78f      	b.n	8000714 <__aeabi_fsub+0x48>
 80007f4:	2001      	movs	r0, #1
 80007f6:	4041      	eors	r1, r0
 80007f8:	42a1      	cmp	r1, r4
 80007fa:	d000      	beq.n	80007fe <__aeabi_fsub+0x132>
 80007fc:	e77f      	b.n	80006fe <__aeabi_fsub+0x32>
 80007fe:	20ff      	movs	r0, #255	; 0xff
 8000800:	4240      	negs	r0, r0
 8000802:	4680      	mov	r8, r0
 8000804:	44a8      	add	r8, r5
 8000806:	4640      	mov	r0, r8
 8000808:	2800      	cmp	r0, #0
 800080a:	d038      	beq.n	800087e <__aeabi_fsub+0x1b2>
 800080c:	1b51      	subs	r1, r2, r5
 800080e:	2d00      	cmp	r5, #0
 8000810:	d100      	bne.n	8000814 <__aeabi_fsub+0x148>
 8000812:	e0ae      	b.n	8000972 <__aeabi_fsub+0x2a6>
 8000814:	2aff      	cmp	r2, #255	; 0xff
 8000816:	d100      	bne.n	800081a <__aeabi_fsub+0x14e>
 8000818:	e0df      	b.n	80009da <__aeabi_fsub+0x30e>
 800081a:	2380      	movs	r3, #128	; 0x80
 800081c:	4660      	mov	r0, ip
 800081e:	04db      	lsls	r3, r3, #19
 8000820:	4318      	orrs	r0, r3
 8000822:	4684      	mov	ip, r0
 8000824:	291b      	cmp	r1, #27
 8000826:	dc00      	bgt.n	800082a <__aeabi_fsub+0x15e>
 8000828:	e0d9      	b.n	80009de <__aeabi_fsub+0x312>
 800082a:	2001      	movs	r0, #1
 800082c:	0015      	movs	r5, r2
 800082e:	1980      	adds	r0, r0, r6
 8000830:	e7b1      	b.n	8000796 <__aeabi_fsub+0xca>
 8000832:	20fe      	movs	r0, #254	; 0xfe
 8000834:	1c6a      	adds	r2, r5, #1
 8000836:	4210      	tst	r0, r2
 8000838:	d171      	bne.n	800091e <__aeabi_fsub+0x252>
 800083a:	2d00      	cmp	r5, #0
 800083c:	d000      	beq.n	8000840 <__aeabi_fsub+0x174>
 800083e:	e0a6      	b.n	800098e <__aeabi_fsub+0x2c2>
 8000840:	4663      	mov	r3, ip
 8000842:	2b00      	cmp	r3, #0
 8000844:	d100      	bne.n	8000848 <__aeabi_fsub+0x17c>
 8000846:	e0d9      	b.n	80009fc <__aeabi_fsub+0x330>
 8000848:	2200      	movs	r2, #0
 800084a:	2e00      	cmp	r6, #0
 800084c:	d100      	bne.n	8000850 <__aeabi_fsub+0x184>
 800084e:	e788      	b.n	8000762 <__aeabi_fsub+0x96>
 8000850:	1b98      	subs	r0, r3, r6
 8000852:	0143      	lsls	r3, r0, #5
 8000854:	d400      	bmi.n	8000858 <__aeabi_fsub+0x18c>
 8000856:	e0e1      	b.n	8000a1c <__aeabi_fsub+0x350>
 8000858:	4663      	mov	r3, ip
 800085a:	000c      	movs	r4, r1
 800085c:	1af0      	subs	r0, r6, r3
 800085e:	e76f      	b.n	8000740 <__aeabi_fsub+0x74>
 8000860:	2e00      	cmp	r6, #0
 8000862:	d100      	bne.n	8000866 <__aeabi_fsub+0x19a>
 8000864:	e0b7      	b.n	80009d6 <__aeabi_fsub+0x30a>
 8000866:	0002      	movs	r2, r0
 8000868:	3a01      	subs	r2, #1
 800086a:	2801      	cmp	r0, #1
 800086c:	d100      	bne.n	8000870 <__aeabi_fsub+0x1a4>
 800086e:	e09c      	b.n	80009aa <__aeabi_fsub+0x2de>
 8000870:	28ff      	cmp	r0, #255	; 0xff
 8000872:	d026      	beq.n	80008c2 <__aeabi_fsub+0x1f6>
 8000874:	4690      	mov	r8, r2
 8000876:	e788      	b.n	800078a <__aeabi_fsub+0xbe>
 8000878:	22ff      	movs	r2, #255	; 0xff
 800087a:	2700      	movs	r7, #0
 800087c:	e771      	b.n	8000762 <__aeabi_fsub+0x96>
 800087e:	20fe      	movs	r0, #254	; 0xfe
 8000880:	1c6a      	adds	r2, r5, #1
 8000882:	4210      	tst	r0, r2
 8000884:	d064      	beq.n	8000950 <__aeabi_fsub+0x284>
 8000886:	2aff      	cmp	r2, #255	; 0xff
 8000888:	d0f6      	beq.n	8000878 <__aeabi_fsub+0x1ac>
 800088a:	0015      	movs	r5, r2
 800088c:	4466      	add	r6, ip
 800088e:	0870      	lsrs	r0, r6, #1
 8000890:	0743      	lsls	r3, r0, #29
 8000892:	d000      	beq.n	8000896 <__aeabi_fsub+0x1ca>
 8000894:	e756      	b.n	8000744 <__aeabi_fsub+0x78>
 8000896:	08c3      	lsrs	r3, r0, #3
 8000898:	2dff      	cmp	r5, #255	; 0xff
 800089a:	d012      	beq.n	80008c2 <__aeabi_fsub+0x1f6>
 800089c:	025b      	lsls	r3, r3, #9
 800089e:	0a5f      	lsrs	r7, r3, #9
 80008a0:	b2ea      	uxtb	r2, r5
 80008a2:	e75e      	b.n	8000762 <__aeabi_fsub+0x96>
 80008a4:	4662      	mov	r2, ip
 80008a6:	2a00      	cmp	r2, #0
 80008a8:	d100      	bne.n	80008ac <__aeabi_fsub+0x1e0>
 80008aa:	e096      	b.n	80009da <__aeabi_fsub+0x30e>
 80008ac:	2e00      	cmp	r6, #0
 80008ae:	d008      	beq.n	80008c2 <__aeabi_fsub+0x1f6>
 80008b0:	2280      	movs	r2, #128	; 0x80
 80008b2:	03d2      	lsls	r2, r2, #15
 80008b4:	4213      	tst	r3, r2
 80008b6:	d004      	beq.n	80008c2 <__aeabi_fsub+0x1f6>
 80008b8:	4648      	mov	r0, r9
 80008ba:	4210      	tst	r0, r2
 80008bc:	d101      	bne.n	80008c2 <__aeabi_fsub+0x1f6>
 80008be:	000c      	movs	r4, r1
 80008c0:	464b      	mov	r3, r9
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d0d8      	beq.n	8000878 <__aeabi_fsub+0x1ac>
 80008c6:	2780      	movs	r7, #128	; 0x80
 80008c8:	03ff      	lsls	r7, r7, #15
 80008ca:	431f      	orrs	r7, r3
 80008cc:	027f      	lsls	r7, r7, #9
 80008ce:	22ff      	movs	r2, #255	; 0xff
 80008d0:	0a7f      	lsrs	r7, r7, #9
 80008d2:	e746      	b.n	8000762 <__aeabi_fsub+0x96>
 80008d4:	2320      	movs	r3, #32
 80008d6:	003a      	movs	r2, r7
 80008d8:	1b45      	subs	r5, r0, r5
 80008da:	0038      	movs	r0, r7
 80008dc:	3501      	adds	r5, #1
 80008de:	40ea      	lsrs	r2, r5
 80008e0:	1b5d      	subs	r5, r3, r5
 80008e2:	40a8      	lsls	r0, r5
 80008e4:	1e43      	subs	r3, r0, #1
 80008e6:	4198      	sbcs	r0, r3
 80008e8:	2500      	movs	r5, #0
 80008ea:	4310      	orrs	r0, r2
 80008ec:	e728      	b.n	8000740 <__aeabi_fsub+0x74>
 80008ee:	2320      	movs	r3, #32
 80008f0:	1a1b      	subs	r3, r3, r0
 80008f2:	0032      	movs	r2, r6
 80008f4:	409e      	lsls	r6, r3
 80008f6:	40c2      	lsrs	r2, r0
 80008f8:	0030      	movs	r0, r6
 80008fa:	1e43      	subs	r3, r0, #1
 80008fc:	4198      	sbcs	r0, r3
 80008fe:	4310      	orrs	r0, r2
 8000900:	e70c      	b.n	800071c <__aeabi_fsub+0x50>
 8000902:	2aff      	cmp	r2, #255	; 0xff
 8000904:	d0db      	beq.n	80008be <__aeabi_fsub+0x1f2>
 8000906:	2380      	movs	r3, #128	; 0x80
 8000908:	4660      	mov	r0, ip
 800090a:	04db      	lsls	r3, r3, #19
 800090c:	4318      	orrs	r0, r3
 800090e:	4684      	mov	ip, r0
 8000910:	2f1b      	cmp	r7, #27
 8000912:	dd56      	ble.n	80009c2 <__aeabi_fsub+0x2f6>
 8000914:	2001      	movs	r0, #1
 8000916:	000c      	movs	r4, r1
 8000918:	0015      	movs	r5, r2
 800091a:	1a30      	subs	r0, r6, r0
 800091c:	e700      	b.n	8000720 <__aeabi_fsub+0x54>
 800091e:	4663      	mov	r3, ip
 8000920:	1b9f      	subs	r7, r3, r6
 8000922:	017b      	lsls	r3, r7, #5
 8000924:	d43d      	bmi.n	80009a2 <__aeabi_fsub+0x2d6>
 8000926:	2f00      	cmp	r7, #0
 8000928:	d000      	beq.n	800092c <__aeabi_fsub+0x260>
 800092a:	e6fe      	b.n	800072a <__aeabi_fsub+0x5e>
 800092c:	2400      	movs	r4, #0
 800092e:	2200      	movs	r2, #0
 8000930:	2700      	movs	r7, #0
 8000932:	e716      	b.n	8000762 <__aeabi_fsub+0x96>
 8000934:	0005      	movs	r5, r0
 8000936:	e7af      	b.n	8000898 <__aeabi_fsub+0x1cc>
 8000938:	0032      	movs	r2, r6
 800093a:	4643      	mov	r3, r8
 800093c:	4641      	mov	r1, r8
 800093e:	40da      	lsrs	r2, r3
 8000940:	2320      	movs	r3, #32
 8000942:	1a5b      	subs	r3, r3, r1
 8000944:	409e      	lsls	r6, r3
 8000946:	0030      	movs	r0, r6
 8000948:	1e43      	subs	r3, r0, #1
 800094a:	4198      	sbcs	r0, r3
 800094c:	4310      	orrs	r0, r2
 800094e:	e721      	b.n	8000794 <__aeabi_fsub+0xc8>
 8000950:	2d00      	cmp	r5, #0
 8000952:	d1a7      	bne.n	80008a4 <__aeabi_fsub+0x1d8>
 8000954:	4663      	mov	r3, ip
 8000956:	2b00      	cmp	r3, #0
 8000958:	d059      	beq.n	8000a0e <__aeabi_fsub+0x342>
 800095a:	2200      	movs	r2, #0
 800095c:	2e00      	cmp	r6, #0
 800095e:	d100      	bne.n	8000962 <__aeabi_fsub+0x296>
 8000960:	e6ff      	b.n	8000762 <__aeabi_fsub+0x96>
 8000962:	0030      	movs	r0, r6
 8000964:	4460      	add	r0, ip
 8000966:	0143      	lsls	r3, r0, #5
 8000968:	d592      	bpl.n	8000890 <__aeabi_fsub+0x1c4>
 800096a:	4b2a      	ldr	r3, [pc, #168]	; (8000a14 <__aeabi_fsub+0x348>)
 800096c:	3501      	adds	r5, #1
 800096e:	4018      	ands	r0, r3
 8000970:	e78e      	b.n	8000890 <__aeabi_fsub+0x1c4>
 8000972:	4663      	mov	r3, ip
 8000974:	2b00      	cmp	r3, #0
 8000976:	d047      	beq.n	8000a08 <__aeabi_fsub+0x33c>
 8000978:	1e4b      	subs	r3, r1, #1
 800097a:	2901      	cmp	r1, #1
 800097c:	d015      	beq.n	80009aa <__aeabi_fsub+0x2de>
 800097e:	29ff      	cmp	r1, #255	; 0xff
 8000980:	d02b      	beq.n	80009da <__aeabi_fsub+0x30e>
 8000982:	0019      	movs	r1, r3
 8000984:	e74e      	b.n	8000824 <__aeabi_fsub+0x158>
 8000986:	000c      	movs	r4, r1
 8000988:	464b      	mov	r3, r9
 800098a:	003d      	movs	r5, r7
 800098c:	e784      	b.n	8000898 <__aeabi_fsub+0x1cc>
 800098e:	4662      	mov	r2, ip
 8000990:	2a00      	cmp	r2, #0
 8000992:	d18b      	bne.n	80008ac <__aeabi_fsub+0x1e0>
 8000994:	2e00      	cmp	r6, #0
 8000996:	d192      	bne.n	80008be <__aeabi_fsub+0x1f2>
 8000998:	2780      	movs	r7, #128	; 0x80
 800099a:	2400      	movs	r4, #0
 800099c:	22ff      	movs	r2, #255	; 0xff
 800099e:	03ff      	lsls	r7, r7, #15
 80009a0:	e6df      	b.n	8000762 <__aeabi_fsub+0x96>
 80009a2:	4663      	mov	r3, ip
 80009a4:	000c      	movs	r4, r1
 80009a6:	1af7      	subs	r7, r6, r3
 80009a8:	e6bf      	b.n	800072a <__aeabi_fsub+0x5e>
 80009aa:	0030      	movs	r0, r6
 80009ac:	4460      	add	r0, ip
 80009ae:	2501      	movs	r5, #1
 80009b0:	0143      	lsls	r3, r0, #5
 80009b2:	d400      	bmi.n	80009b6 <__aeabi_fsub+0x2ea>
 80009b4:	e76c      	b.n	8000890 <__aeabi_fsub+0x1c4>
 80009b6:	2502      	movs	r5, #2
 80009b8:	e6f2      	b.n	80007a0 <__aeabi_fsub+0xd4>
 80009ba:	4663      	mov	r3, ip
 80009bc:	2501      	movs	r5, #1
 80009be:	1b98      	subs	r0, r3, r6
 80009c0:	e6ae      	b.n	8000720 <__aeabi_fsub+0x54>
 80009c2:	2320      	movs	r3, #32
 80009c4:	4664      	mov	r4, ip
 80009c6:	4660      	mov	r0, ip
 80009c8:	40fc      	lsrs	r4, r7
 80009ca:	1bdf      	subs	r7, r3, r7
 80009cc:	40b8      	lsls	r0, r7
 80009ce:	1e43      	subs	r3, r0, #1
 80009d0:	4198      	sbcs	r0, r3
 80009d2:	4320      	orrs	r0, r4
 80009d4:	e79f      	b.n	8000916 <__aeabi_fsub+0x24a>
 80009d6:	0005      	movs	r5, r0
 80009d8:	e75e      	b.n	8000898 <__aeabi_fsub+0x1cc>
 80009da:	464b      	mov	r3, r9
 80009dc:	e771      	b.n	80008c2 <__aeabi_fsub+0x1f6>
 80009de:	2320      	movs	r3, #32
 80009e0:	4665      	mov	r5, ip
 80009e2:	4660      	mov	r0, ip
 80009e4:	40cd      	lsrs	r5, r1
 80009e6:	1a59      	subs	r1, r3, r1
 80009e8:	4088      	lsls	r0, r1
 80009ea:	1e43      	subs	r3, r0, #1
 80009ec:	4198      	sbcs	r0, r3
 80009ee:	4328      	orrs	r0, r5
 80009f0:	e71c      	b.n	800082c <__aeabi_fsub+0x160>
 80009f2:	4663      	mov	r3, ip
 80009f4:	000c      	movs	r4, r1
 80009f6:	2501      	movs	r5, #1
 80009f8:	1af0      	subs	r0, r6, r3
 80009fa:	e691      	b.n	8000720 <__aeabi_fsub+0x54>
 80009fc:	2e00      	cmp	r6, #0
 80009fe:	d095      	beq.n	800092c <__aeabi_fsub+0x260>
 8000a00:	000c      	movs	r4, r1
 8000a02:	464f      	mov	r7, r9
 8000a04:	2200      	movs	r2, #0
 8000a06:	e6ac      	b.n	8000762 <__aeabi_fsub+0x96>
 8000a08:	464b      	mov	r3, r9
 8000a0a:	000d      	movs	r5, r1
 8000a0c:	e744      	b.n	8000898 <__aeabi_fsub+0x1cc>
 8000a0e:	464f      	mov	r7, r9
 8000a10:	2200      	movs	r2, #0
 8000a12:	e6a6      	b.n	8000762 <__aeabi_fsub+0x96>
 8000a14:	fbffffff 	.word	0xfbffffff
 8000a18:	7dffffff 	.word	0x7dffffff
 8000a1c:	2800      	cmp	r0, #0
 8000a1e:	d000      	beq.n	8000a22 <__aeabi_fsub+0x356>
 8000a20:	e736      	b.n	8000890 <__aeabi_fsub+0x1c4>
 8000a22:	2400      	movs	r4, #0
 8000a24:	2700      	movs	r7, #0
 8000a26:	e69c      	b.n	8000762 <__aeabi_fsub+0x96>

08000a28 <__aeabi_f2iz>:
 8000a28:	0241      	lsls	r1, r0, #9
 8000a2a:	0042      	lsls	r2, r0, #1
 8000a2c:	0fc3      	lsrs	r3, r0, #31
 8000a2e:	0a49      	lsrs	r1, r1, #9
 8000a30:	2000      	movs	r0, #0
 8000a32:	0e12      	lsrs	r2, r2, #24
 8000a34:	2a7e      	cmp	r2, #126	; 0x7e
 8000a36:	dd03      	ble.n	8000a40 <__aeabi_f2iz+0x18>
 8000a38:	2a9d      	cmp	r2, #157	; 0x9d
 8000a3a:	dd02      	ble.n	8000a42 <__aeabi_f2iz+0x1a>
 8000a3c:	4a09      	ldr	r2, [pc, #36]	; (8000a64 <__aeabi_f2iz+0x3c>)
 8000a3e:	1898      	adds	r0, r3, r2
 8000a40:	4770      	bx	lr
 8000a42:	2080      	movs	r0, #128	; 0x80
 8000a44:	0400      	lsls	r0, r0, #16
 8000a46:	4301      	orrs	r1, r0
 8000a48:	2a95      	cmp	r2, #149	; 0x95
 8000a4a:	dc07      	bgt.n	8000a5c <__aeabi_f2iz+0x34>
 8000a4c:	2096      	movs	r0, #150	; 0x96
 8000a4e:	1a82      	subs	r2, r0, r2
 8000a50:	40d1      	lsrs	r1, r2
 8000a52:	4248      	negs	r0, r1
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d1f3      	bne.n	8000a40 <__aeabi_f2iz+0x18>
 8000a58:	0008      	movs	r0, r1
 8000a5a:	e7f1      	b.n	8000a40 <__aeabi_f2iz+0x18>
 8000a5c:	3a96      	subs	r2, #150	; 0x96
 8000a5e:	4091      	lsls	r1, r2
 8000a60:	e7f7      	b.n	8000a52 <__aeabi_f2iz+0x2a>
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	7fffffff 	.word	0x7fffffff

08000a68 <__aeabi_i2f>:
 8000a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a6a:	2800      	cmp	r0, #0
 8000a6c:	d013      	beq.n	8000a96 <__aeabi_i2f+0x2e>
 8000a6e:	17c3      	asrs	r3, r0, #31
 8000a70:	18c6      	adds	r6, r0, r3
 8000a72:	405e      	eors	r6, r3
 8000a74:	0fc4      	lsrs	r4, r0, #31
 8000a76:	0030      	movs	r0, r6
 8000a78:	f000 f8c0 	bl	8000bfc <__clzsi2>
 8000a7c:	239e      	movs	r3, #158	; 0x9e
 8000a7e:	0005      	movs	r5, r0
 8000a80:	1a1b      	subs	r3, r3, r0
 8000a82:	2b96      	cmp	r3, #150	; 0x96
 8000a84:	dc0f      	bgt.n	8000aa6 <__aeabi_i2f+0x3e>
 8000a86:	2808      	cmp	r0, #8
 8000a88:	dd01      	ble.n	8000a8e <__aeabi_i2f+0x26>
 8000a8a:	3d08      	subs	r5, #8
 8000a8c:	40ae      	lsls	r6, r5
 8000a8e:	0276      	lsls	r6, r6, #9
 8000a90:	0a76      	lsrs	r6, r6, #9
 8000a92:	b2d8      	uxtb	r0, r3
 8000a94:	e002      	b.n	8000a9c <__aeabi_i2f+0x34>
 8000a96:	2400      	movs	r4, #0
 8000a98:	2000      	movs	r0, #0
 8000a9a:	2600      	movs	r6, #0
 8000a9c:	05c0      	lsls	r0, r0, #23
 8000a9e:	4330      	orrs	r0, r6
 8000aa0:	07e4      	lsls	r4, r4, #31
 8000aa2:	4320      	orrs	r0, r4
 8000aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000aa6:	2b99      	cmp	r3, #153	; 0x99
 8000aa8:	dd0c      	ble.n	8000ac4 <__aeabi_i2f+0x5c>
 8000aaa:	2205      	movs	r2, #5
 8000aac:	0031      	movs	r1, r6
 8000aae:	1a12      	subs	r2, r2, r0
 8000ab0:	40d1      	lsrs	r1, r2
 8000ab2:	000a      	movs	r2, r1
 8000ab4:	0001      	movs	r1, r0
 8000ab6:	0030      	movs	r0, r6
 8000ab8:	311b      	adds	r1, #27
 8000aba:	4088      	lsls	r0, r1
 8000abc:	1e41      	subs	r1, r0, #1
 8000abe:	4188      	sbcs	r0, r1
 8000ac0:	4302      	orrs	r2, r0
 8000ac2:	0016      	movs	r6, r2
 8000ac4:	2d05      	cmp	r5, #5
 8000ac6:	dc12      	bgt.n	8000aee <__aeabi_i2f+0x86>
 8000ac8:	0031      	movs	r1, r6
 8000aca:	4f0d      	ldr	r7, [pc, #52]	; (8000b00 <__aeabi_i2f+0x98>)
 8000acc:	4039      	ands	r1, r7
 8000ace:	0772      	lsls	r2, r6, #29
 8000ad0:	d009      	beq.n	8000ae6 <__aeabi_i2f+0x7e>
 8000ad2:	200f      	movs	r0, #15
 8000ad4:	4030      	ands	r0, r6
 8000ad6:	2804      	cmp	r0, #4
 8000ad8:	d005      	beq.n	8000ae6 <__aeabi_i2f+0x7e>
 8000ada:	3104      	adds	r1, #4
 8000adc:	014a      	lsls	r2, r1, #5
 8000ade:	d502      	bpl.n	8000ae6 <__aeabi_i2f+0x7e>
 8000ae0:	239f      	movs	r3, #159	; 0x9f
 8000ae2:	4039      	ands	r1, r7
 8000ae4:	1b5b      	subs	r3, r3, r5
 8000ae6:	0189      	lsls	r1, r1, #6
 8000ae8:	0a4e      	lsrs	r6, r1, #9
 8000aea:	b2d8      	uxtb	r0, r3
 8000aec:	e7d6      	b.n	8000a9c <__aeabi_i2f+0x34>
 8000aee:	1f6a      	subs	r2, r5, #5
 8000af0:	4096      	lsls	r6, r2
 8000af2:	0031      	movs	r1, r6
 8000af4:	4f02      	ldr	r7, [pc, #8]	; (8000b00 <__aeabi_i2f+0x98>)
 8000af6:	4039      	ands	r1, r7
 8000af8:	0772      	lsls	r2, r6, #29
 8000afa:	d0f4      	beq.n	8000ae6 <__aeabi_i2f+0x7e>
 8000afc:	e7e9      	b.n	8000ad2 <__aeabi_i2f+0x6a>
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	fbffffff 	.word	0xfbffffff

08000b04 <__aeabi_ui2f>:
 8000b04:	b570      	push	{r4, r5, r6, lr}
 8000b06:	1e05      	subs	r5, r0, #0
 8000b08:	d00e      	beq.n	8000b28 <__aeabi_ui2f+0x24>
 8000b0a:	f000 f877 	bl	8000bfc <__clzsi2>
 8000b0e:	239e      	movs	r3, #158	; 0x9e
 8000b10:	0004      	movs	r4, r0
 8000b12:	1a1b      	subs	r3, r3, r0
 8000b14:	2b96      	cmp	r3, #150	; 0x96
 8000b16:	dc0c      	bgt.n	8000b32 <__aeabi_ui2f+0x2e>
 8000b18:	2808      	cmp	r0, #8
 8000b1a:	dd01      	ble.n	8000b20 <__aeabi_ui2f+0x1c>
 8000b1c:	3c08      	subs	r4, #8
 8000b1e:	40a5      	lsls	r5, r4
 8000b20:	026d      	lsls	r5, r5, #9
 8000b22:	0a6d      	lsrs	r5, r5, #9
 8000b24:	b2d8      	uxtb	r0, r3
 8000b26:	e001      	b.n	8000b2c <__aeabi_ui2f+0x28>
 8000b28:	2000      	movs	r0, #0
 8000b2a:	2500      	movs	r5, #0
 8000b2c:	05c0      	lsls	r0, r0, #23
 8000b2e:	4328      	orrs	r0, r5
 8000b30:	bd70      	pop	{r4, r5, r6, pc}
 8000b32:	2b99      	cmp	r3, #153	; 0x99
 8000b34:	dd09      	ble.n	8000b4a <__aeabi_ui2f+0x46>
 8000b36:	0002      	movs	r2, r0
 8000b38:	0029      	movs	r1, r5
 8000b3a:	321b      	adds	r2, #27
 8000b3c:	4091      	lsls	r1, r2
 8000b3e:	1e4a      	subs	r2, r1, #1
 8000b40:	4191      	sbcs	r1, r2
 8000b42:	2205      	movs	r2, #5
 8000b44:	1a12      	subs	r2, r2, r0
 8000b46:	40d5      	lsrs	r5, r2
 8000b48:	430d      	orrs	r5, r1
 8000b4a:	2c05      	cmp	r4, #5
 8000b4c:	dc12      	bgt.n	8000b74 <__aeabi_ui2f+0x70>
 8000b4e:	0029      	movs	r1, r5
 8000b50:	4e0c      	ldr	r6, [pc, #48]	; (8000b84 <__aeabi_ui2f+0x80>)
 8000b52:	4031      	ands	r1, r6
 8000b54:	076a      	lsls	r2, r5, #29
 8000b56:	d009      	beq.n	8000b6c <__aeabi_ui2f+0x68>
 8000b58:	200f      	movs	r0, #15
 8000b5a:	4028      	ands	r0, r5
 8000b5c:	2804      	cmp	r0, #4
 8000b5e:	d005      	beq.n	8000b6c <__aeabi_ui2f+0x68>
 8000b60:	3104      	adds	r1, #4
 8000b62:	014a      	lsls	r2, r1, #5
 8000b64:	d502      	bpl.n	8000b6c <__aeabi_ui2f+0x68>
 8000b66:	239f      	movs	r3, #159	; 0x9f
 8000b68:	4031      	ands	r1, r6
 8000b6a:	1b1b      	subs	r3, r3, r4
 8000b6c:	0189      	lsls	r1, r1, #6
 8000b6e:	0a4d      	lsrs	r5, r1, #9
 8000b70:	b2d8      	uxtb	r0, r3
 8000b72:	e7db      	b.n	8000b2c <__aeabi_ui2f+0x28>
 8000b74:	1f62      	subs	r2, r4, #5
 8000b76:	4095      	lsls	r5, r2
 8000b78:	0029      	movs	r1, r5
 8000b7a:	4e02      	ldr	r6, [pc, #8]	; (8000b84 <__aeabi_ui2f+0x80>)
 8000b7c:	4031      	ands	r1, r6
 8000b7e:	076a      	lsls	r2, r5, #29
 8000b80:	d0f4      	beq.n	8000b6c <__aeabi_ui2f+0x68>
 8000b82:	e7e9      	b.n	8000b58 <__aeabi_ui2f+0x54>
 8000b84:	fbffffff 	.word	0xfbffffff

08000b88 <__aeabi_cfrcmple>:
 8000b88:	4684      	mov	ip, r0
 8000b8a:	0008      	movs	r0, r1
 8000b8c:	4661      	mov	r1, ip
 8000b8e:	e7ff      	b.n	8000b90 <__aeabi_cfcmpeq>

08000b90 <__aeabi_cfcmpeq>:
 8000b90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000b92:	f000 f8bd 	bl	8000d10 <__lesf2>
 8000b96:	2800      	cmp	r0, #0
 8000b98:	d401      	bmi.n	8000b9e <__aeabi_cfcmpeq+0xe>
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	42c8      	cmn	r0, r1
 8000b9e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000ba0 <__aeabi_fcmpeq>:
 8000ba0:	b510      	push	{r4, lr}
 8000ba2:	f000 f849 	bl	8000c38 <__eqsf2>
 8000ba6:	4240      	negs	r0, r0
 8000ba8:	3001      	adds	r0, #1
 8000baa:	bd10      	pop	{r4, pc}

08000bac <__aeabi_fcmplt>:
 8000bac:	b510      	push	{r4, lr}
 8000bae:	f000 f8af 	bl	8000d10 <__lesf2>
 8000bb2:	2800      	cmp	r0, #0
 8000bb4:	db01      	blt.n	8000bba <__aeabi_fcmplt+0xe>
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	bd10      	pop	{r4, pc}
 8000bba:	2001      	movs	r0, #1
 8000bbc:	bd10      	pop	{r4, pc}
 8000bbe:	46c0      	nop			; (mov r8, r8)

08000bc0 <__aeabi_fcmple>:
 8000bc0:	b510      	push	{r4, lr}
 8000bc2:	f000 f8a5 	bl	8000d10 <__lesf2>
 8000bc6:	2800      	cmp	r0, #0
 8000bc8:	dd01      	ble.n	8000bce <__aeabi_fcmple+0xe>
 8000bca:	2000      	movs	r0, #0
 8000bcc:	bd10      	pop	{r4, pc}
 8000bce:	2001      	movs	r0, #1
 8000bd0:	bd10      	pop	{r4, pc}
 8000bd2:	46c0      	nop			; (mov r8, r8)

08000bd4 <__aeabi_fcmpgt>:
 8000bd4:	b510      	push	{r4, lr}
 8000bd6:	f000 f855 	bl	8000c84 <__gesf2>
 8000bda:	2800      	cmp	r0, #0
 8000bdc:	dc01      	bgt.n	8000be2 <__aeabi_fcmpgt+0xe>
 8000bde:	2000      	movs	r0, #0
 8000be0:	bd10      	pop	{r4, pc}
 8000be2:	2001      	movs	r0, #1
 8000be4:	bd10      	pop	{r4, pc}
 8000be6:	46c0      	nop			; (mov r8, r8)

08000be8 <__aeabi_fcmpge>:
 8000be8:	b510      	push	{r4, lr}
 8000bea:	f000 f84b 	bl	8000c84 <__gesf2>
 8000bee:	2800      	cmp	r0, #0
 8000bf0:	da01      	bge.n	8000bf6 <__aeabi_fcmpge+0xe>
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	bd10      	pop	{r4, pc}
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	bd10      	pop	{r4, pc}
 8000bfa:	46c0      	nop			; (mov r8, r8)

08000bfc <__clzsi2>:
 8000bfc:	211c      	movs	r1, #28
 8000bfe:	2301      	movs	r3, #1
 8000c00:	041b      	lsls	r3, r3, #16
 8000c02:	4298      	cmp	r0, r3
 8000c04:	d301      	bcc.n	8000c0a <__clzsi2+0xe>
 8000c06:	0c00      	lsrs	r0, r0, #16
 8000c08:	3910      	subs	r1, #16
 8000c0a:	0a1b      	lsrs	r3, r3, #8
 8000c0c:	4298      	cmp	r0, r3
 8000c0e:	d301      	bcc.n	8000c14 <__clzsi2+0x18>
 8000c10:	0a00      	lsrs	r0, r0, #8
 8000c12:	3908      	subs	r1, #8
 8000c14:	091b      	lsrs	r3, r3, #4
 8000c16:	4298      	cmp	r0, r3
 8000c18:	d301      	bcc.n	8000c1e <__clzsi2+0x22>
 8000c1a:	0900      	lsrs	r0, r0, #4
 8000c1c:	3904      	subs	r1, #4
 8000c1e:	a202      	add	r2, pc, #8	; (adr r2, 8000c28 <__clzsi2+0x2c>)
 8000c20:	5c10      	ldrb	r0, [r2, r0]
 8000c22:	1840      	adds	r0, r0, r1
 8000c24:	4770      	bx	lr
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	02020304 	.word	0x02020304
 8000c2c:	01010101 	.word	0x01010101
	...

08000c38 <__eqsf2>:
 8000c38:	b570      	push	{r4, r5, r6, lr}
 8000c3a:	0042      	lsls	r2, r0, #1
 8000c3c:	0245      	lsls	r5, r0, #9
 8000c3e:	024e      	lsls	r6, r1, #9
 8000c40:	004c      	lsls	r4, r1, #1
 8000c42:	0fc3      	lsrs	r3, r0, #31
 8000c44:	0a6d      	lsrs	r5, r5, #9
 8000c46:	2001      	movs	r0, #1
 8000c48:	0e12      	lsrs	r2, r2, #24
 8000c4a:	0a76      	lsrs	r6, r6, #9
 8000c4c:	0e24      	lsrs	r4, r4, #24
 8000c4e:	0fc9      	lsrs	r1, r1, #31
 8000c50:	2aff      	cmp	r2, #255	; 0xff
 8000c52:	d006      	beq.n	8000c62 <__eqsf2+0x2a>
 8000c54:	2cff      	cmp	r4, #255	; 0xff
 8000c56:	d003      	beq.n	8000c60 <__eqsf2+0x28>
 8000c58:	42a2      	cmp	r2, r4
 8000c5a:	d101      	bne.n	8000c60 <__eqsf2+0x28>
 8000c5c:	42b5      	cmp	r5, r6
 8000c5e:	d006      	beq.n	8000c6e <__eqsf2+0x36>
 8000c60:	bd70      	pop	{r4, r5, r6, pc}
 8000c62:	2d00      	cmp	r5, #0
 8000c64:	d1fc      	bne.n	8000c60 <__eqsf2+0x28>
 8000c66:	2cff      	cmp	r4, #255	; 0xff
 8000c68:	d1fa      	bne.n	8000c60 <__eqsf2+0x28>
 8000c6a:	2e00      	cmp	r6, #0
 8000c6c:	d1f8      	bne.n	8000c60 <__eqsf2+0x28>
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d006      	beq.n	8000c80 <__eqsf2+0x48>
 8000c72:	2001      	movs	r0, #1
 8000c74:	2a00      	cmp	r2, #0
 8000c76:	d1f3      	bne.n	8000c60 <__eqsf2+0x28>
 8000c78:	0028      	movs	r0, r5
 8000c7a:	1e43      	subs	r3, r0, #1
 8000c7c:	4198      	sbcs	r0, r3
 8000c7e:	e7ef      	b.n	8000c60 <__eqsf2+0x28>
 8000c80:	2000      	movs	r0, #0
 8000c82:	e7ed      	b.n	8000c60 <__eqsf2+0x28>

08000c84 <__gesf2>:
 8000c84:	b570      	push	{r4, r5, r6, lr}
 8000c86:	0042      	lsls	r2, r0, #1
 8000c88:	0245      	lsls	r5, r0, #9
 8000c8a:	024e      	lsls	r6, r1, #9
 8000c8c:	004c      	lsls	r4, r1, #1
 8000c8e:	0fc3      	lsrs	r3, r0, #31
 8000c90:	0a6d      	lsrs	r5, r5, #9
 8000c92:	0e12      	lsrs	r2, r2, #24
 8000c94:	0a76      	lsrs	r6, r6, #9
 8000c96:	0e24      	lsrs	r4, r4, #24
 8000c98:	0fc8      	lsrs	r0, r1, #31
 8000c9a:	2aff      	cmp	r2, #255	; 0xff
 8000c9c:	d01b      	beq.n	8000cd6 <__gesf2+0x52>
 8000c9e:	2cff      	cmp	r4, #255	; 0xff
 8000ca0:	d00e      	beq.n	8000cc0 <__gesf2+0x3c>
 8000ca2:	2a00      	cmp	r2, #0
 8000ca4:	d11b      	bne.n	8000cde <__gesf2+0x5a>
 8000ca6:	2c00      	cmp	r4, #0
 8000ca8:	d101      	bne.n	8000cae <__gesf2+0x2a>
 8000caa:	2e00      	cmp	r6, #0
 8000cac:	d01c      	beq.n	8000ce8 <__gesf2+0x64>
 8000cae:	2d00      	cmp	r5, #0
 8000cb0:	d00c      	beq.n	8000ccc <__gesf2+0x48>
 8000cb2:	4283      	cmp	r3, r0
 8000cb4:	d01c      	beq.n	8000cf0 <__gesf2+0x6c>
 8000cb6:	2102      	movs	r1, #2
 8000cb8:	1e58      	subs	r0, r3, #1
 8000cba:	4008      	ands	r0, r1
 8000cbc:	3801      	subs	r0, #1
 8000cbe:	bd70      	pop	{r4, r5, r6, pc}
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d122      	bne.n	8000d0a <__gesf2+0x86>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	d1f4      	bne.n	8000cb2 <__gesf2+0x2e>
 8000cc8:	2d00      	cmp	r5, #0
 8000cca:	d1f2      	bne.n	8000cb2 <__gesf2+0x2e>
 8000ccc:	2800      	cmp	r0, #0
 8000cce:	d1f6      	bne.n	8000cbe <__gesf2+0x3a>
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	4240      	negs	r0, r0
 8000cd4:	e7f3      	b.n	8000cbe <__gesf2+0x3a>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	d117      	bne.n	8000d0a <__gesf2+0x86>
 8000cda:	2cff      	cmp	r4, #255	; 0xff
 8000cdc:	d0f0      	beq.n	8000cc0 <__gesf2+0x3c>
 8000cde:	2c00      	cmp	r4, #0
 8000ce0:	d1e7      	bne.n	8000cb2 <__gesf2+0x2e>
 8000ce2:	2e00      	cmp	r6, #0
 8000ce4:	d1e5      	bne.n	8000cb2 <__gesf2+0x2e>
 8000ce6:	e7e6      	b.n	8000cb6 <__gesf2+0x32>
 8000ce8:	2000      	movs	r0, #0
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e7      	beq.n	8000cbe <__gesf2+0x3a>
 8000cee:	e7e2      	b.n	8000cb6 <__gesf2+0x32>
 8000cf0:	42a2      	cmp	r2, r4
 8000cf2:	dc05      	bgt.n	8000d00 <__gesf2+0x7c>
 8000cf4:	dbea      	blt.n	8000ccc <__gesf2+0x48>
 8000cf6:	42b5      	cmp	r5, r6
 8000cf8:	d802      	bhi.n	8000d00 <__gesf2+0x7c>
 8000cfa:	d3e7      	bcc.n	8000ccc <__gesf2+0x48>
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	e7de      	b.n	8000cbe <__gesf2+0x3a>
 8000d00:	4243      	negs	r3, r0
 8000d02:	4158      	adcs	r0, r3
 8000d04:	0040      	lsls	r0, r0, #1
 8000d06:	3801      	subs	r0, #1
 8000d08:	e7d9      	b.n	8000cbe <__gesf2+0x3a>
 8000d0a:	2002      	movs	r0, #2
 8000d0c:	4240      	negs	r0, r0
 8000d0e:	e7d6      	b.n	8000cbe <__gesf2+0x3a>

08000d10 <__lesf2>:
 8000d10:	b570      	push	{r4, r5, r6, lr}
 8000d12:	0042      	lsls	r2, r0, #1
 8000d14:	0245      	lsls	r5, r0, #9
 8000d16:	024e      	lsls	r6, r1, #9
 8000d18:	004c      	lsls	r4, r1, #1
 8000d1a:	0fc3      	lsrs	r3, r0, #31
 8000d1c:	0a6d      	lsrs	r5, r5, #9
 8000d1e:	0e12      	lsrs	r2, r2, #24
 8000d20:	0a76      	lsrs	r6, r6, #9
 8000d22:	0e24      	lsrs	r4, r4, #24
 8000d24:	0fc8      	lsrs	r0, r1, #31
 8000d26:	2aff      	cmp	r2, #255	; 0xff
 8000d28:	d00b      	beq.n	8000d42 <__lesf2+0x32>
 8000d2a:	2cff      	cmp	r4, #255	; 0xff
 8000d2c:	d00d      	beq.n	8000d4a <__lesf2+0x3a>
 8000d2e:	2a00      	cmp	r2, #0
 8000d30:	d11f      	bne.n	8000d72 <__lesf2+0x62>
 8000d32:	2c00      	cmp	r4, #0
 8000d34:	d116      	bne.n	8000d64 <__lesf2+0x54>
 8000d36:	2e00      	cmp	r6, #0
 8000d38:	d114      	bne.n	8000d64 <__lesf2+0x54>
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	2d00      	cmp	r5, #0
 8000d3e:	d010      	beq.n	8000d62 <__lesf2+0x52>
 8000d40:	e009      	b.n	8000d56 <__lesf2+0x46>
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	d10c      	bne.n	8000d60 <__lesf2+0x50>
 8000d46:	2cff      	cmp	r4, #255	; 0xff
 8000d48:	d113      	bne.n	8000d72 <__lesf2+0x62>
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d108      	bne.n	8000d60 <__lesf2+0x50>
 8000d4e:	2a00      	cmp	r2, #0
 8000d50:	d008      	beq.n	8000d64 <__lesf2+0x54>
 8000d52:	4283      	cmp	r3, r0
 8000d54:	d012      	beq.n	8000d7c <__lesf2+0x6c>
 8000d56:	2102      	movs	r1, #2
 8000d58:	1e58      	subs	r0, r3, #1
 8000d5a:	4008      	ands	r0, r1
 8000d5c:	3801      	subs	r0, #1
 8000d5e:	e000      	b.n	8000d62 <__lesf2+0x52>
 8000d60:	2002      	movs	r0, #2
 8000d62:	bd70      	pop	{r4, r5, r6, pc}
 8000d64:	2d00      	cmp	r5, #0
 8000d66:	d1f4      	bne.n	8000d52 <__lesf2+0x42>
 8000d68:	2800      	cmp	r0, #0
 8000d6a:	d1fa      	bne.n	8000d62 <__lesf2+0x52>
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	4240      	negs	r0, r0
 8000d70:	e7f7      	b.n	8000d62 <__lesf2+0x52>
 8000d72:	2c00      	cmp	r4, #0
 8000d74:	d1ed      	bne.n	8000d52 <__lesf2+0x42>
 8000d76:	2e00      	cmp	r6, #0
 8000d78:	d1eb      	bne.n	8000d52 <__lesf2+0x42>
 8000d7a:	e7ec      	b.n	8000d56 <__lesf2+0x46>
 8000d7c:	42a2      	cmp	r2, r4
 8000d7e:	dc05      	bgt.n	8000d8c <__lesf2+0x7c>
 8000d80:	dbf2      	blt.n	8000d68 <__lesf2+0x58>
 8000d82:	42b5      	cmp	r5, r6
 8000d84:	d802      	bhi.n	8000d8c <__lesf2+0x7c>
 8000d86:	d3ef      	bcc.n	8000d68 <__lesf2+0x58>
 8000d88:	2000      	movs	r0, #0
 8000d8a:	e7ea      	b.n	8000d62 <__lesf2+0x52>
 8000d8c:	4243      	negs	r3, r0
 8000d8e:	4158      	adcs	r0, r3
 8000d90:	0040      	lsls	r0, r0, #1
 8000d92:	3801      	subs	r0, #1
 8000d94:	e7e5      	b.n	8000d62 <__lesf2+0x52>
 8000d96:	46c0      	nop			; (mov r8, r8)

08000d98 <setPinsAsInputs>:
/**
 * @brief			Function which sets the four GPIO pins as inputs
 *
 * @returns			None
 */
void setPinsAsInputs() {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	0018      	movs	r0, r3
 8000da2:	2314      	movs	r3, #20
 8000da4:	001a      	movs	r2, r3
 8000da6:	2100      	movs	r1, #0
 8000da8:	f002 fb1e 	bl	80033e8 <memset>

	/*Configure GPIO pin : LED_1_BLUE_Pin */
	GPIO_InitStruct.Pin = LED_1_BLUE_Pin;
 8000dac:	1d3b      	adds	r3, r7, #4
 8000dae:	2280      	movs	r2, #128	; 0x80
 8000db0:	01d2      	lsls	r2, r2, #7
 8000db2:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db4:	1d3b      	adds	r3, r7, #4
 8000db6:	2200      	movs	r2, #0
 8000db8:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	1d3b      	adds	r3, r7, #4
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LED_1_BLUE_GPIO_Port, &GPIO_InitStruct);
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	4a0d      	ldr	r2, [pc, #52]	; (8000e00 <setPinsAsInputs+0x68>)
 8000dca:	0019      	movs	r1, r3
 8000dcc:	0010      	movs	r0, r2
 8000dce:	f001 fd0f 	bl	80027f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED_2_YELLOW_Pin LED_3_GREEN_Pin LED_4_RED_Pin */
	GPIO_InitStruct.Pin = LED_2_YELLOW_Pin | LED_3_GREEN_Pin | LED_4_RED_Pin;
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	4a0b      	ldr	r2, [pc, #44]	; (8000e04 <setPinsAsInputs+0x6c>)
 8000dd6:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd8:	1d3b      	adds	r3, r7, #4
 8000dda:	2200      	movs	r2, #0
 8000ddc:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dde:	1d3b      	adds	r3, r7, #4
 8000de0:	2201      	movs	r2, #1
 8000de2:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de4:	1d3b      	adds	r3, r7, #4
 8000de6:	2200      	movs	r2, #0
 8000de8:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dea:	1d3a      	adds	r2, r7, #4
 8000dec:	23a0      	movs	r3, #160	; 0xa0
 8000dee:	05db      	lsls	r3, r3, #23
 8000df0:	0011      	movs	r1, r2
 8000df2:	0018      	movs	r0, r3
 8000df4:	f001 fcfc 	bl	80027f0 <HAL_GPIO_Init>

}
 8000df8:	46c0      	nop			; (mov r8, r8)
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	b006      	add	sp, #24
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	50000800 	.word	0x50000800
 8000e04:	00001101 	.word	0x00001101

08000e08 <setPinsAsOutputs>:
/**
 * @brief			Function which sets the four GPIO pins as outputs
 *
 * @returns			None
 */
void setPinsAsOutputs() {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000e0e:	1d3b      	adds	r3, r7, #4
 8000e10:	0018      	movs	r0, r3
 8000e12:	2314      	movs	r3, #20
 8000e14:	001a      	movs	r2, r3
 8000e16:	2100      	movs	r1, #0
 8000e18:	f002 fae6 	bl	80033e8 <memset>

	/*Configure GPIO pin : LED_1_BLUE_Pin */
	GPIO_InitStruct.Pin = LED_1_BLUE_Pin;
 8000e1c:	1d3b      	adds	r3, r7, #4
 8000e1e:	2280      	movs	r2, #128	; 0x80
 8000e20:	01d2      	lsls	r2, r2, #7
 8000e22:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	2201      	movs	r2, #1
 8000e28:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	2202      	movs	r2, #2
 8000e2e:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e30:	1d3b      	adds	r3, r7, #4
 8000e32:	2200      	movs	r2, #0
 8000e34:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LED_1_BLUE_GPIO_Port, &GPIO_InitStruct);
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	4a0d      	ldr	r2, [pc, #52]	; (8000e70 <setPinsAsOutputs+0x68>)
 8000e3a:	0019      	movs	r1, r3
 8000e3c:	0010      	movs	r0, r2
 8000e3e:	f001 fcd7 	bl	80027f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED_2_YELLOW_Pin LED_3_GREEN_Pin LED_4_RED_Pin */
	GPIO_InitStruct.Pin = LED_2_YELLOW_Pin | LED_3_GREEN_Pin | LED_4_RED_Pin;
 8000e42:	1d3b      	adds	r3, r7, #4
 8000e44:	4a0b      	ldr	r2, [pc, #44]	; (8000e74 <setPinsAsOutputs+0x6c>)
 8000e46:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e4e:	1d3b      	adds	r3, r7, #4
 8000e50:	2202      	movs	r2, #2
 8000e52:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	2200      	movs	r2, #0
 8000e58:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5a:	1d3a      	adds	r2, r7, #4
 8000e5c:	23a0      	movs	r3, #160	; 0xa0
 8000e5e:	05db      	lsls	r3, r3, #23
 8000e60:	0011      	movs	r1, r2
 8000e62:	0018      	movs	r0, r3
 8000e64:	f001 fcc4 	bl	80027f0 <HAL_GPIO_Init>

}
 8000e68:	46c0      	nop			; (mov r8, r8)
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	b006      	add	sp, #24
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	50000800 	.word	0x50000800
 8000e74:	00001101 	.word	0x00001101

08000e78 <showStartAnimation>:
 *
 * @params			uint16_t * pinList: Array of pins which are used for GPIO
 *
 * @returns			None
 */
void showStartAnimation(GPIO_TypeDef *portList[], uint16_t *pinList) {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]
	int i;
	int j;

	setPinsAsOutputs();
 8000e82:	f7ff ffc1 	bl	8000e08 <setPinsAsOutputs>

	for (j = 0; j < 2; j++) {
 8000e86:	2300      	movs	r3, #0
 8000e88:	60bb      	str	r3, [r7, #8]
 8000e8a:	e036      	b.n	8000efa <showStartAnimation+0x82>
		for (i = 0; i < 4; i++) {
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	e013      	b.n	8000eba <showStartAnimation+0x42>
			HAL_GPIO_WritePin(portList[i], pinList[i], GPIO_PIN_RESET);
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	18d3      	adds	r3, r2, r3
 8000e9a:	6818      	ldr	r0, [r3, #0]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	683a      	ldr	r2, [r7, #0]
 8000ea2:	18d3      	adds	r3, r2, r3
 8000ea4:	881b      	ldrh	r3, [r3, #0]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	0019      	movs	r1, r3
 8000eaa:	f001 fe28 	bl	8002afe <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8000eae:	2064      	movs	r0, #100	; 0x64
 8000eb0:	f000 fe22 	bl	8001af8 <HAL_Delay>
		for (i = 0; i < 4; i++) {
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	2b03      	cmp	r3, #3
 8000ebe:	dde8      	ble.n	8000e92 <showStartAnimation+0x1a>
		}
		for (i = 0; i < 4; i++) {
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	e013      	b.n	8000eee <showStartAnimation+0x76>
			HAL_GPIO_WritePin(portList[i], pinList[i], GPIO_PIN_SET);
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	18d3      	adds	r3, r2, r3
 8000ece:	6818      	ldr	r0, [r3, #0]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	683a      	ldr	r2, [r7, #0]
 8000ed6:	18d3      	adds	r3, r2, r3
 8000ed8:	881b      	ldrh	r3, [r3, #0]
 8000eda:	2201      	movs	r2, #1
 8000edc:	0019      	movs	r1, r3
 8000ede:	f001 fe0e 	bl	8002afe <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8000ee2:	2064      	movs	r0, #100	; 0x64
 8000ee4:	f000 fe08 	bl	8001af8 <HAL_Delay>
		for (i = 0; i < 4; i++) {
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	3301      	adds	r3, #1
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	2b03      	cmp	r3, #3
 8000ef2:	dde8      	ble.n	8000ec6 <showStartAnimation+0x4e>
	for (j = 0; j < 2; j++) {
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	60bb      	str	r3, [r7, #8]
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	ddc5      	ble.n	8000e8c <showStartAnimation+0x14>
		}
	}
	HAL_Delay(1000);
 8000f00:	23fa      	movs	r3, #250	; 0xfa
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	0018      	movs	r0, r3
 8000f06:	f000 fdf7 	bl	8001af8 <HAL_Delay>
}
 8000f0a:	46c0      	nop			; (mov r8, r8)
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	b004      	add	sp, #16
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <showSequence>:
 * @params			uint16_t * pinList: Array of pins which are used for GPIO
 *
 * @returns			None
 */
void showSequence(ADC_HandleTypeDef *hadc, uint8_t *secretKey,
		GPIO_TypeDef *portList[], uint16_t *pinList) {
 8000f12:	b5b0      	push	{r4, r5, r7, lr}
 8000f14:	b086      	sub	sp, #24
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	60f8      	str	r0, [r7, #12]
 8000f1a:	60b9      	str	r1, [r7, #8]
 8000f1c:	607a      	str	r2, [r7, #4]
 8000f1e:	603b      	str	r3, [r7, #0]

	uint8_t newRandom = calculateNewRandom(hadc);
 8000f20:	2513      	movs	r5, #19
 8000f22:	197c      	adds	r4, r7, r5
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	0018      	movs	r0, r3
 8000f28:	f000 f838 	bl	8000f9c <calculateNewRandom>
 8000f2c:	0003      	movs	r3, r0
 8000f2e:	7023      	strb	r3, [r4, #0]
	*secretKey = newRandom;
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	197a      	adds	r2, r7, r5
 8000f34:	7812      	ldrb	r2, [r2, #0]
 8000f36:	701a      	strb	r2, [r3, #0]
	setPinsAsOutputs();
 8000f38:	f7ff ff66 	bl	8000e08 <setPinsAsOutputs>
	HAL_GPIO_WritePin(portList[newRandom], pinList[newRandom], GPIO_PIN_RESET);
 8000f3c:	0029      	movs	r1, r5
 8000f3e:	197b      	adds	r3, r7, r5
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	18d3      	adds	r3, r2, r3
 8000f48:	6818      	ldr	r0, [r3, #0]
 8000f4a:	187b      	adds	r3, r7, r1
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	683a      	ldr	r2, [r7, #0]
 8000f52:	18d3      	adds	r3, r2, r3
 8000f54:	881b      	ldrh	r3, [r3, #0]
 8000f56:	2200      	movs	r2, #0
 8000f58:	0019      	movs	r1, r3
 8000f5a:	f001 fdd0 	bl	8002afe <HAL_GPIO_WritePin>

	HAL_Delay(50);
 8000f5e:	2032      	movs	r0, #50	; 0x32
 8000f60:	f000 fdca 	bl	8001af8 <HAL_Delay>

	// Reset pins
	for (int i = 0; i < 4; i++) {
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]
 8000f68:	e010      	b.n	8000f8c <showSequence+0x7a>
		HAL_GPIO_WritePin(portList[i], pinList[i], GPIO_PIN_SET);
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	18d3      	adds	r3, r2, r3
 8000f72:	6818      	ldr	r0, [r3, #0]
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	683a      	ldr	r2, [r7, #0]
 8000f7a:	18d3      	adds	r3, r2, r3
 8000f7c:	881b      	ldrh	r3, [r3, #0]
 8000f7e:	2201      	movs	r2, #1
 8000f80:	0019      	movs	r1, r3
 8000f82:	f001 fdbc 	bl	8002afe <HAL_GPIO_WritePin>
	for (int i = 0; i < 4; i++) {
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	617b      	str	r3, [r7, #20]
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	2b03      	cmp	r3, #3
 8000f90:	ddeb      	ble.n	8000f6a <showSequence+0x58>
	}
}
 8000f92:	46c0      	nop			; (mov r8, r8)
 8000f94:	46c0      	nop			; (mov r8, r8)
 8000f96:	46bd      	mov	sp, r7
 8000f98:	b006      	add	sp, #24
 8000f9a:	bdb0      	pop	{r4, r5, r7, pc}

08000f9c <calculateNewRandom>:
 *
 * @params			ADC_HandleTypeDef *hadc: Pointer to ADC object to read noise from ADC to generate a random number
 *
 * @returns			A uint8_t of values 0, 1, 2 or 3, generated randomly
 */
uint8_t calculateNewRandom(ADC_HandleTypeDef *hadc) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]

	uint16_t seed;
	uint8_t temp;
	int i;
	//Get the data
	for (i = 0; i < 25; i++) {
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	613b      	str	r3, [r7, #16]
 8000fa8:	e00e      	b.n	8000fc8 <calculateNewRandom+0x2c>
		seed ^= HAL_ADC_GetValue(hadc);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	0018      	movs	r0, r3
 8000fae:	f001 f90b 	bl	80021c8 <HAL_ADC_GetValue>
 8000fb2:	0003      	movs	r3, r0
 8000fb4:	b299      	uxth	r1, r3
 8000fb6:	2216      	movs	r2, #22
 8000fb8:	18bb      	adds	r3, r7, r2
 8000fba:	18ba      	adds	r2, r7, r2
 8000fbc:	8812      	ldrh	r2, [r2, #0]
 8000fbe:	404a      	eors	r2, r1
 8000fc0:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < 25; i++) {
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	613b      	str	r3, [r7, #16]
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	2b18      	cmp	r3, #24
 8000fcc:	dded      	ble.n	8000faa <calculateNewRandom+0xe>
	}
	//Shuffle the seed
	seed = 2053 * seed + 13849;
 8000fce:	2116      	movs	r1, #22
 8000fd0:	187b      	adds	r3, r7, r1
 8000fd2:	881b      	ldrh	r3, [r3, #0]
 8000fd4:	1c1a      	adds	r2, r3, #0
 8000fd6:	0252      	lsls	r2, r2, #9
 8000fd8:	18d2      	adds	r2, r2, r3
 8000fda:	0092      	lsls	r2, r2, #2
 8000fdc:	18d3      	adds	r3, r2, r3
 8000fde:	b29a      	uxth	r2, r3
 8000fe0:	187b      	adds	r3, r7, r1
 8000fe2:	4815      	ldr	r0, [pc, #84]	; (8001038 <calculateNewRandom+0x9c>)
 8000fe4:	4684      	mov	ip, r0
 8000fe6:	4462      	add	r2, ip
 8000fe8:	801a      	strh	r2, [r3, #0]
	//XOR two bytes
	temp = seed ^ (seed >> 8);
 8000fea:	000a      	movs	r2, r1
 8000fec:	187b      	adds	r3, r7, r1
 8000fee:	881b      	ldrh	r3, [r3, #0]
 8000ff0:	0a1b      	lsrs	r3, r3, #8
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	b2d9      	uxtb	r1, r3
 8000ff6:	18bb      	adds	r3, r7, r2
 8000ff8:	881b      	ldrh	r3, [r3, #0]
 8000ffa:	b2da      	uxtb	r2, r3
 8000ffc:	200f      	movs	r0, #15
 8000ffe:	183b      	adds	r3, r7, r0
 8001000:	404a      	eors	r2, r1
 8001002:	701a      	strb	r2, [r3, #0]
	//XOR two nibbles
	temp ^= (temp >> 4);
 8001004:	183b      	adds	r3, r7, r0
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	091b      	lsrs	r3, r3, #4
 800100a:	b2d9      	uxtb	r1, r3
 800100c:	183b      	adds	r3, r7, r0
 800100e:	183a      	adds	r2, r7, r0
 8001010:	7812      	ldrb	r2, [r2, #0]
 8001012:	404a      	eors	r2, r1
 8001014:	701a      	strb	r2, [r3, #0]
	//XOR two pairs of bits and return remainder after division by 4
	return (temp ^ (temp >> 2)) & 0b00000011;
 8001016:	0001      	movs	r1, r0
 8001018:	187b      	adds	r3, r7, r1
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	089b      	lsrs	r3, r3, #2
 800101e:	b2da      	uxtb	r2, r3
 8001020:	187b      	adds	r3, r7, r1
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	4053      	eors	r3, r2
 8001026:	b2db      	uxtb	r3, r3
 8001028:	2203      	movs	r2, #3
 800102a:	4013      	ands	r3, r2
 800102c:	b2db      	uxtb	r3, r3
}
 800102e:	0018      	movs	r0, r3
 8001030:	46bd      	mov	sp, r7
 8001032:	b006      	add	sp, #24
 8001034:	bd80      	pop	{r7, pc}
 8001036:	46c0      	nop			; (mov r8, r8)
 8001038:	00003619 	.word	0x00003619

0800103c <calculateNewRandomInRange>:
 *
 * @note			This function works on the principle of dividing the 0 to max range into 0xFFFF parts, and then randomly selects one of those.
 *
 * @returns			A uint16_t generated randomly
 */
uint16_t calculateNewRandomInRange(ADC_HandleTypeDef *hadc, uint16_t range) {
 800103c:	b5b0      	push	{r4, r5, r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	000a      	movs	r2, r1
 8001046:	1cbb      	adds	r3, r7, #2
 8001048:	801a      	strh	r2, [r3, #0]
	uint16_t seed;
	uint16_t temp;
	int i;
	//Get the data
	for (i = 0; i < 25; i++) {
 800104a:	2300      	movs	r3, #0
 800104c:	613b      	str	r3, [r7, #16]
 800104e:	e00e      	b.n	800106e <calculateNewRandomInRange+0x32>
		seed ^= HAL_ADC_GetValue(hadc);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	0018      	movs	r0, r3
 8001054:	f001 f8b8 	bl	80021c8 <HAL_ADC_GetValue>
 8001058:	0003      	movs	r3, r0
 800105a:	b299      	uxth	r1, r3
 800105c:	2216      	movs	r2, #22
 800105e:	18bb      	adds	r3, r7, r2
 8001060:	18ba      	adds	r2, r7, r2
 8001062:	8812      	ldrh	r2, [r2, #0]
 8001064:	404a      	eors	r2, r1
 8001066:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < 25; i++) {
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	3301      	adds	r3, #1
 800106c:	613b      	str	r3, [r7, #16]
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	2b18      	cmp	r3, #24
 8001072:	dded      	ble.n	8001050 <calculateNewRandomInRange+0x14>
	}
	//Shuffle the seed
	seed = 2053 * seed + 13849;
 8001074:	2116      	movs	r1, #22
 8001076:	187b      	adds	r3, r7, r1
 8001078:	881b      	ldrh	r3, [r3, #0]
 800107a:	1c1a      	adds	r2, r3, #0
 800107c:	0252      	lsls	r2, r2, #9
 800107e:	18d2      	adds	r2, r2, r3
 8001080:	0092      	lsls	r2, r2, #2
 8001082:	18d3      	adds	r3, r2, r3
 8001084:	b29a      	uxth	r2, r3
 8001086:	187b      	adds	r3, r7, r1
 8001088:	4820      	ldr	r0, [pc, #128]	; (800110c <calculateNewRandomInRange+0xd0>)
 800108a:	4684      	mov	ip, r0
 800108c:	4462      	add	r2, ip
 800108e:	801a      	strh	r2, [r3, #0]
	//XOR two bytes
	temp = seed ^ (seed >> 16);
 8001090:	187b      	adds	r3, r7, r1
 8001092:	881b      	ldrh	r3, [r3, #0]
 8001094:	141b      	asrs	r3, r3, #16
 8001096:	b21a      	sxth	r2, r3
 8001098:	187b      	adds	r3, r7, r1
 800109a:	2100      	movs	r1, #0
 800109c:	5e5b      	ldrsh	r3, [r3, r1]
 800109e:	4053      	eors	r3, r2
 80010a0:	b21a      	sxth	r2, r3
 80010a2:	250e      	movs	r5, #14
 80010a4:	197b      	adds	r3, r7, r5
 80010a6:	801a      	strh	r2, [r3, #0]
	//XOR two nibbles
	temp ^= (temp >> 8);
 80010a8:	197b      	adds	r3, r7, r5
 80010aa:	881b      	ldrh	r3, [r3, #0]
 80010ac:	0a1b      	lsrs	r3, r3, #8
 80010ae:	b299      	uxth	r1, r3
 80010b0:	197b      	adds	r3, r7, r5
 80010b2:	197a      	adds	r2, r7, r5
 80010b4:	8812      	ldrh	r2, [r2, #0]
 80010b6:	404a      	eors	r2, r1
 80010b8:	801a      	strh	r2, [r3, #0]
	//XOR four pairs of bits
	temp = (temp ^ (temp >> 4));
 80010ba:	197b      	adds	r3, r7, r5
 80010bc:	881b      	ldrh	r3, [r3, #0]
 80010be:	091b      	lsrs	r3, r3, #4
 80010c0:	b299      	uxth	r1, r3
 80010c2:	197b      	adds	r3, r7, r5
 80010c4:	197a      	adds	r2, r7, r5
 80010c6:	8812      	ldrh	r2, [r2, #0]
 80010c8:	404a      	eors	r2, r1
 80010ca:	801a      	strh	r2, [r3, #0]

	// Return random number in range
	return (uint16_t) (range * ((float) temp / (float) 0xFFFF));
 80010cc:	1cbb      	adds	r3, r7, #2
 80010ce:	881b      	ldrh	r3, [r3, #0]
 80010d0:	0018      	movs	r0, r3
 80010d2:	f7ff fcc9 	bl	8000a68 <__aeabi_i2f>
 80010d6:	1c04      	adds	r4, r0, #0
 80010d8:	197b      	adds	r3, r7, r5
 80010da:	881b      	ldrh	r3, [r3, #0]
 80010dc:	0018      	movs	r0, r3
 80010de:	f7ff fd11 	bl	8000b04 <__aeabi_ui2f>
 80010e2:	1c03      	adds	r3, r0, #0
 80010e4:	490a      	ldr	r1, [pc, #40]	; (8001110 <calculateNewRandomInRange+0xd4>)
 80010e6:	1c18      	adds	r0, r3, #0
 80010e8:	f7ff f8b2 	bl	8000250 <__aeabi_fdiv>
 80010ec:	1c03      	adds	r3, r0, #0
 80010ee:	1c19      	adds	r1, r3, #0
 80010f0:	1c20      	adds	r0, r4, #0
 80010f2:	f7ff f9c5 	bl	8000480 <__aeabi_fmul>
 80010f6:	1c03      	adds	r3, r0, #0
 80010f8:	1c18      	adds	r0, r3, #0
 80010fa:	f7ff f891 	bl	8000220 <__aeabi_f2uiz>
 80010fe:	0003      	movs	r3, r0
 8001100:	b29b      	uxth	r3, r3
}
 8001102:	0018      	movs	r0, r3
 8001104:	46bd      	mov	sp, r7
 8001106:	b006      	add	sp, #24
 8001108:	bdb0      	pop	{r4, r5, r7, pc}
 800110a:	46c0      	nop			; (mov r8, r8)
 800110c:	00003619 	.word	0x00003619
 8001110:	477fff00 	.word	0x477fff00

08001114 <getKeys>:
 * @params			uint16_t * pinList: Array of pins which are used for GPIO
 *
 * @returns			uint8_t The result of the current round (success or fail)
 */
uint8_t getKeys(uint16_t conutdown, uint16_t reactionTime, uint8_t secretKey,
		GPIO_TypeDef *portList[], uint16_t *pinList) {
 8001114:	b5b0      	push	{r4, r5, r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
 800111a:	0004      	movs	r4, r0
 800111c:	0008      	movs	r0, r1
 800111e:	0011      	movs	r1, r2
 8001120:	607b      	str	r3, [r7, #4]
 8001122:	250e      	movs	r5, #14
 8001124:	197b      	adds	r3, r7, r5
 8001126:	1c22      	adds	r2, r4, #0
 8001128:	801a      	strh	r2, [r3, #0]
 800112a:	240c      	movs	r4, #12
 800112c:	193b      	adds	r3, r7, r4
 800112e:	1c02      	adds	r2, r0, #0
 8001130:	801a      	strh	r2, [r3, #0]
 8001132:	230b      	movs	r3, #11
 8001134:	18fb      	adds	r3, r7, r3
 8001136:	1c0a      	adds	r2, r1, #0
 8001138:	701a      	strb	r2, [r3, #0]
	uint8_t _b;
	int i;
	conutdown = reactionTime;
 800113a:	197b      	adds	r3, r7, r5
 800113c:	193a      	adds	r2, r7, r4
 800113e:	8812      	ldrh	r2, [r2, #0]
 8001140:	801a      	strh	r2, [r3, #0]
	setPinsAsInputs();
 8001142:	f7ff fe29 	bl	8000d98 <setPinsAsInputs>
	do {
		_b = getButtons(portList, pinList);
 8001146:	2513      	movs	r5, #19
 8001148:	197c      	adds	r4, r7, r5
 800114a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	0011      	movs	r1, r2
 8001150:	0018      	movs	r0, r3
 8001152:	f000 f844 	bl	80011de <getButtons>
 8001156:	0003      	movs	r3, r0
 8001158:	7023      	strb	r3, [r4, #0]
		conutdown--;
 800115a:	240e      	movs	r4, #14
 800115c:	193b      	adds	r3, r7, r4
 800115e:	881a      	ldrh	r2, [r3, #0]
 8001160:	193b      	adds	r3, r7, r4
 8001162:	3a01      	subs	r2, #1
 8001164:	801a      	strh	r2, [r3, #0]
		HAL_Delay(1);
 8001166:	2001      	movs	r0, #1
 8001168:	f000 fcc6 	bl	8001af8 <HAL_Delay>
	} while (_b == 0 && conutdown > 0);
 800116c:	197b      	adds	r3, r7, r5
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d103      	bne.n	800117c <getKeys+0x68>
 8001174:	193b      	adds	r3, r7, r4
 8001176:	881b      	ldrh	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d1e4      	bne.n	8001146 <getKeys+0x32>

	if (conutdown == 0)
 800117c:	230e      	movs	r3, #14
 800117e:	18fb      	adds	r3, r7, r3
 8001180:	881b      	ldrh	r3, [r3, #0]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d101      	bne.n	800118a <getKeys+0x76>
		return 0;
 8001186:	2300      	movs	r3, #0
 8001188:	e025      	b.n	80011d6 <getKeys+0xc2>

	for (i = 0; i < 4; i++) {
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]
 800118e:	e00b      	b.n	80011a8 <getKeys+0x94>
		if (_b & (1 << i))
 8001190:	2313      	movs	r3, #19
 8001192:	18fb      	adds	r3, r7, r3
 8001194:	781a      	ldrb	r2, [r3, #0]
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	411a      	asrs	r2, r3
 800119a:	0013      	movs	r3, r2
 800119c:	2201      	movs	r2, #1
 800119e:	4013      	ands	r3, r2
 80011a0:	d106      	bne.n	80011b0 <getKeys+0x9c>
	for (i = 0; i < 4; i++) {
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	3301      	adds	r3, #1
 80011a6:	617b      	str	r3, [r7, #20]
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	2b03      	cmp	r3, #3
 80011ac:	ddf0      	ble.n	8001190 <getKeys+0x7c>
 80011ae:	e000      	b.n	80011b2 <getKeys+0x9e>
			break;
 80011b0:	46c0      	nop			; (mov r8, r8)
	}
	if (secretKey != i)
 80011b2:	230b      	movs	r3, #11
 80011b4:	18fb      	adds	r3, r7, r3
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	697a      	ldr	r2, [r7, #20]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d001      	beq.n	80011c2 <getKeys+0xae>
		return 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	e009      	b.n	80011d6 <getKeys+0xc2>
	while (getButtons(portList, pinList))
 80011c2:	46c0      	nop			; (mov r8, r8)
 80011c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	0011      	movs	r1, r2
 80011ca:	0018      	movs	r0, r3
 80011cc:	f000 f807 	bl	80011de <getButtons>
 80011d0:	1e03      	subs	r3, r0, #0
 80011d2:	d1f7      	bne.n	80011c4 <getKeys+0xb0>
		;
	return 1;
 80011d4:	2301      	movs	r3, #1
}
 80011d6:	0018      	movs	r0, r3
 80011d8:	46bd      	mov	sp, r7
 80011da:	b006      	add	sp, #24
 80011dc:	bdb0      	pop	{r4, r5, r7, pc}

080011de <getButtons>:
 *
 * @params			GPIO_TypeDef * portList[]: Array of ports which are used for GPIO
 *
 * @params			uint16_t * pinList: Array of pins which are used for GPIO
 */
uint8_t getButtons(GPIO_TypeDef *portList[], uint16_t *pinList) {
 80011de:	b580      	push	{r7, lr}
 80011e0:	b086      	sub	sp, #24
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
 80011e6:	6039      	str	r1, [r7, #0]
	uint8_t _buttons = 0;
 80011e8:	2317      	movs	r3, #23
 80011ea:	18fb      	adds	r3, r7, r3
 80011ec:	2200      	movs	r2, #0
 80011ee:	701a      	strb	r2, [r3, #0]
	setPinsAsInputs();
 80011f0:	f7ff fdd2 	bl	8000d98 <setPinsAsInputs>

	for (int i = 0; i < 4; i++) {
 80011f4:	2300      	movs	r3, #0
 80011f6:	613b      	str	r3, [r7, #16]
 80011f8:	e022      	b.n	8001240 <getButtons+0x62>
		int pinState = HAL_GPIO_ReadPin(portList[i], pinList[i]);
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	18d3      	adds	r3, r2, r3
 8001202:	6818      	ldr	r0, [r3, #0]
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	683a      	ldr	r2, [r7, #0]
 800120a:	18d3      	adds	r3, r2, r3
 800120c:	881b      	ldrh	r3, [r3, #0]
 800120e:	0019      	movs	r1, r3
 8001210:	f001 fc58 	bl	8002ac4 <HAL_GPIO_ReadPin>
 8001214:	0003      	movs	r3, r0
 8001216:	60fb      	str	r3, [r7, #12]
		_buttons |= !pinState << i;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	425a      	negs	r2, r3
 800121c:	4153      	adcs	r3, r2
 800121e:	b2db      	uxtb	r3, r3
 8001220:	001a      	movs	r2, r3
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	409a      	lsls	r2, r3
 8001226:	0013      	movs	r3, r2
 8001228:	b25a      	sxtb	r2, r3
 800122a:	2117      	movs	r1, #23
 800122c:	187b      	adds	r3, r7, r1
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	b25b      	sxtb	r3, r3
 8001232:	4313      	orrs	r3, r2
 8001234:	b25a      	sxtb	r2, r3
 8001236:	187b      	adds	r3, r7, r1
 8001238:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++) {
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	3301      	adds	r3, #1
 800123e:	613b      	str	r3, [r7, #16]
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	2b03      	cmp	r3, #3
 8001244:	ddd9      	ble.n	80011fa <getButtons+0x1c>
	}
	_buttons &= 0x0f;
 8001246:	2017      	movs	r0, #23
 8001248:	183b      	adds	r3, r7, r0
 800124a:	183a      	adds	r2, r7, r0
 800124c:	7812      	ldrb	r2, [r2, #0]
 800124e:	210f      	movs	r1, #15
 8001250:	400a      	ands	r2, r1
 8001252:	701a      	strb	r2, [r3, #0]

	return (_buttons);
 8001254:	183b      	adds	r3, r7, r0
 8001256:	781b      	ldrb	r3, [r3, #0]
}
 8001258:	0018      	movs	r0, r3
 800125a:	46bd      	mov	sp, r7
 800125c:	b006      	add	sp, #24
 800125e:	bd80      	pop	{r7, pc}

08001260 <showFailAnimation>:
 *
 * @params			GPIO_TypeDef * portList[]: Array of ports which are used for GPIO
 *
 * @params			uint16_t * pinList: Array of pins which are used for GPIO
 */
void showFailAnimation(GPIO_TypeDef *portList[], uint16_t *pinList) {
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
	int i;
	int j;
	setPinsAsOutputs();
 800126a:	f7ff fdcd 	bl	8000e08 <setPinsAsOutputs>
	for (j = 0; j < 2; j++) {
 800126e:	2300      	movs	r3, #0
 8001270:	60bb      	str	r3, [r7, #8]
 8001272:	e036      	b.n	80012e2 <showFailAnimation+0x82>
		for (i = 0; i < 4; i++) {
 8001274:	2300      	movs	r3, #0
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	e010      	b.n	800129c <showFailAnimation+0x3c>
			HAL_GPIO_WritePin(portList[i], pinList[i], GPIO_PIN_RESET);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	18d3      	adds	r3, r2, r3
 8001282:	6818      	ldr	r0, [r3, #0]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	683a      	ldr	r2, [r7, #0]
 800128a:	18d3      	adds	r3, r2, r3
 800128c:	881b      	ldrh	r3, [r3, #0]
 800128e:	2200      	movs	r2, #0
 8001290:	0019      	movs	r1, r3
 8001292:	f001 fc34 	bl	8002afe <HAL_GPIO_WritePin>
		for (i = 0; i < 4; i++) {
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	3301      	adds	r3, #1
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	2b03      	cmp	r3, #3
 80012a0:	ddeb      	ble.n	800127a <showFailAnimation+0x1a>
		}
		HAL_Delay(250);
 80012a2:	20fa      	movs	r0, #250	; 0xfa
 80012a4:	f000 fc28 	bl	8001af8 <HAL_Delay>
		for (i = 0; i < 4; i++) {
 80012a8:	2300      	movs	r3, #0
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	e010      	b.n	80012d0 <showFailAnimation+0x70>
			HAL_GPIO_WritePin(portList[i], pinList[i], GPIO_PIN_SET);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	18d3      	adds	r3, r2, r3
 80012b6:	6818      	ldr	r0, [r3, #0]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	683a      	ldr	r2, [r7, #0]
 80012be:	18d3      	adds	r3, r2, r3
 80012c0:	881b      	ldrh	r3, [r3, #0]
 80012c2:	2201      	movs	r2, #1
 80012c4:	0019      	movs	r1, r3
 80012c6:	f001 fc1a 	bl	8002afe <HAL_GPIO_WritePin>
		for (i = 0; i < 4; i++) {
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	3301      	adds	r3, #1
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2b03      	cmp	r3, #3
 80012d4:	ddeb      	ble.n	80012ae <showFailAnimation+0x4e>
		}
		HAL_Delay(250);
 80012d6:	20fa      	movs	r0, #250	; 0xfa
 80012d8:	f000 fc0e 	bl	8001af8 <HAL_Delay>
	for (j = 0; j < 2; j++) {
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	3301      	adds	r3, #1
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	ddc5      	ble.n	8001274 <showFailAnimation+0x14>
	}
}
 80012e8:	46c0      	nop			; (mov r8, r8)
 80012ea:	46c0      	nop			; (mov r8, r8)
 80012ec:	46bd      	mov	sp, r7
 80012ee:	b004      	add	sp, #16
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <showResult>:
 *
 * @params			GPIO_TypeDef * portList[]: Array of ports which are used for GPIO
 *
 * @params			uint16_t * pinList: Array of pins which are used for GPIO
 */
void showResult(uint8_t _r, GPIO_TypeDef * portList[], uint16_t  * pinList) {
 80012f2:	b5b0      	push	{r4, r5, r7, lr}
 80012f4:	b086      	sub	sp, #24
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
 80012fc:	250f      	movs	r5, #15
 80012fe:	197b      	adds	r3, r7, r5
 8001300:	1c02      	adds	r2, r0, #0
 8001302:	701a      	strb	r2, [r3, #0]
	uint8_t _blinks;
	uint8_t i;
	setPinsAsOutputs();
 8001304:	f7ff fd80 	bl	8000e08 <setPinsAsOutputs>
	_blinks = _r / 100;
 8001308:	2316      	movs	r3, #22
 800130a:	18fc      	adds	r4, r7, r3
 800130c:	197b      	adds	r3, r7, r5
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2164      	movs	r1, #100	; 0x64
 8001312:	0018      	movs	r0, r3
 8001314:	f7fe fef8 	bl	8000108 <__udivsi3>
 8001318:	0003      	movs	r3, r0
 800131a:	7023      	strb	r3, [r4, #0]
	for (i = 0; i < _blinks; i++) {
 800131c:	2317      	movs	r3, #23
 800131e:	18fb      	adds	r3, r7, r3
 8001320:	2200      	movs	r2, #0
 8001322:	701a      	strb	r2, [r3, #0]
 8001324:	e01f      	b.n	8001366 <showResult+0x74>
		HAL_GPIO_WritePin(portList[2], pinList[2], GPIO_PIN_SET);
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	3308      	adds	r3, #8
 800132a:	6818      	ldr	r0, [r3, #0]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3304      	adds	r3, #4
 8001330:	881b      	ldrh	r3, [r3, #0]
 8001332:	2201      	movs	r2, #1
 8001334:	0019      	movs	r1, r3
 8001336:	f001 fbe2 	bl	8002afe <HAL_GPIO_WritePin>
		HAL_Delay(SCORE_BLINK_ON);
 800133a:	20c8      	movs	r0, #200	; 0xc8
 800133c:	f000 fbdc 	bl	8001af8 <HAL_Delay>
		HAL_GPIO_WritePin(portList[2], pinList[2], GPIO_PIN_RESET);
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	3308      	adds	r3, #8
 8001344:	6818      	ldr	r0, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	3304      	adds	r3, #4
 800134a:	881b      	ldrh	r3, [r3, #0]
 800134c:	2200      	movs	r2, #0
 800134e:	0019      	movs	r1, r3
 8001350:	f001 fbd5 	bl	8002afe <HAL_GPIO_WritePin>
		HAL_Delay(SCORE_BLINK_OFF);
 8001354:	20c8      	movs	r0, #200	; 0xc8
 8001356:	f000 fbcf 	bl	8001af8 <HAL_Delay>
	for (i = 0; i < _blinks; i++) {
 800135a:	2117      	movs	r1, #23
 800135c:	187b      	adds	r3, r7, r1
 800135e:	781a      	ldrb	r2, [r3, #0]
 8001360:	187b      	adds	r3, r7, r1
 8001362:	3201      	adds	r2, #1
 8001364:	701a      	strb	r2, [r3, #0]
 8001366:	2517      	movs	r5, #23
 8001368:	197a      	adds	r2, r7, r5
 800136a:	2416      	movs	r4, #22
 800136c:	193b      	adds	r3, r7, r4
 800136e:	7812      	ldrb	r2, [r2, #0]
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	429a      	cmp	r2, r3
 8001374:	d3d7      	bcc.n	8001326 <showResult+0x34>
	}

	_blinks = _r / 10 % 10;
 8001376:	230f      	movs	r3, #15
 8001378:	18fb      	adds	r3, r7, r3
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	210a      	movs	r1, #10
 800137e:	0018      	movs	r0, r3
 8001380:	f7fe fec2 	bl	8000108 <__udivsi3>
 8001384:	0003      	movs	r3, r0
 8001386:	b2db      	uxtb	r3, r3
 8001388:	193c      	adds	r4, r7, r4
 800138a:	210a      	movs	r1, #10
 800138c:	0018      	movs	r0, r3
 800138e:	f7fe ff41 	bl	8000214 <__aeabi_uidivmod>
 8001392:	000b      	movs	r3, r1
 8001394:	7023      	strb	r3, [r4, #0]
	for (i = 0; i < _blinks; i++) {
 8001396:	197b      	adds	r3, r7, r5
 8001398:	2200      	movs	r2, #0
 800139a:	701a      	strb	r2, [r3, #0]
 800139c:	e01f      	b.n	80013de <showResult+0xec>
		HAL_GPIO_WritePin(portList[1], pinList[1], GPIO_PIN_SET);
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	3304      	adds	r3, #4
 80013a2:	6818      	ldr	r0, [r3, #0]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3302      	adds	r3, #2
 80013a8:	881b      	ldrh	r3, [r3, #0]
 80013aa:	2201      	movs	r2, #1
 80013ac:	0019      	movs	r1, r3
 80013ae:	f001 fba6 	bl	8002afe <HAL_GPIO_WritePin>
		HAL_Delay(SCORE_BLINK_ON);
 80013b2:	20c8      	movs	r0, #200	; 0xc8
 80013b4:	f000 fba0 	bl	8001af8 <HAL_Delay>
		HAL_GPIO_WritePin(portList[1], pinList[1], GPIO_PIN_RESET);
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	3304      	adds	r3, #4
 80013bc:	6818      	ldr	r0, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	3302      	adds	r3, #2
 80013c2:	881b      	ldrh	r3, [r3, #0]
 80013c4:	2200      	movs	r2, #0
 80013c6:	0019      	movs	r1, r3
 80013c8:	f001 fb99 	bl	8002afe <HAL_GPIO_WritePin>
		HAL_Delay(SCORE_BLINK_OFF);
 80013cc:	20c8      	movs	r0, #200	; 0xc8
 80013ce:	f000 fb93 	bl	8001af8 <HAL_Delay>
	for (i = 0; i < _blinks; i++) {
 80013d2:	2117      	movs	r1, #23
 80013d4:	187b      	adds	r3, r7, r1
 80013d6:	781a      	ldrb	r2, [r3, #0]
 80013d8:	187b      	adds	r3, r7, r1
 80013da:	3201      	adds	r2, #1
 80013dc:	701a      	strb	r2, [r3, #0]
 80013de:	2517      	movs	r5, #23
 80013e0:	197a      	adds	r2, r7, r5
 80013e2:	2116      	movs	r1, #22
 80013e4:	187b      	adds	r3, r7, r1
 80013e6:	7812      	ldrb	r2, [r2, #0]
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d3d7      	bcc.n	800139e <showResult+0xac>
	}

	_blinks = _r % 10;
 80013ee:	187c      	adds	r4, r7, r1
 80013f0:	230f      	movs	r3, #15
 80013f2:	18fb      	adds	r3, r7, r3
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	210a      	movs	r1, #10
 80013f8:	0018      	movs	r0, r3
 80013fa:	f7fe ff0b 	bl	8000214 <__aeabi_uidivmod>
 80013fe:	000b      	movs	r3, r1
 8001400:	7023      	strb	r3, [r4, #0]
	for (i = 0; i < _blinks; i++) {
 8001402:	197b      	adds	r3, r7, r5
 8001404:	2200      	movs	r2, #0
 8001406:	701a      	strb	r2, [r3, #0]
 8001408:	e01b      	b.n	8001442 <showResult+0x150>
		HAL_GPIO_WritePin(portList[0], pinList[0], GPIO_PIN_SET);
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	6818      	ldr	r0, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	881b      	ldrh	r3, [r3, #0]
 8001412:	2201      	movs	r2, #1
 8001414:	0019      	movs	r1, r3
 8001416:	f001 fb72 	bl	8002afe <HAL_GPIO_WritePin>
		HAL_Delay(SCORE_BLINK_ON);
 800141a:	20c8      	movs	r0, #200	; 0xc8
 800141c:	f000 fb6c 	bl	8001af8 <HAL_Delay>
		HAL_GPIO_WritePin(portList[0], pinList[0], GPIO_PIN_RESET);
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	6818      	ldr	r0, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	881b      	ldrh	r3, [r3, #0]
 8001428:	2200      	movs	r2, #0
 800142a:	0019      	movs	r1, r3
 800142c:	f001 fb67 	bl	8002afe <HAL_GPIO_WritePin>
		HAL_Delay(SCORE_BLINK_OFF);
 8001430:	20c8      	movs	r0, #200	; 0xc8
 8001432:	f000 fb61 	bl	8001af8 <HAL_Delay>
	for (i = 0; i < _blinks; i++) {
 8001436:	2117      	movs	r1, #23
 8001438:	187b      	adds	r3, r7, r1
 800143a:	781a      	ldrb	r2, [r3, #0]
 800143c:	187b      	adds	r3, r7, r1
 800143e:	3201      	adds	r2, #1
 8001440:	701a      	strb	r2, [r3, #0]
 8001442:	2317      	movs	r3, #23
 8001444:	18fa      	adds	r2, r7, r3
 8001446:	2316      	movs	r3, #22
 8001448:	18fb      	adds	r3, r7, r3
 800144a:	7812      	ldrb	r2, [r2, #0]
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	429a      	cmp	r2, r3
 8001450:	d3db      	bcc.n	800140a <showResult+0x118>
	}
}
 8001452:	46c0      	nop			; (mov r8, r8)
 8001454:	46c0      	nop			; (mov r8, r8)
 8001456:	46bd      	mov	sp, r7
 8001458:	b006      	add	sp, #24
 800145a:	bdb0      	pop	{r4, r5, r7, pc}

0800145c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800145c:	b590      	push	{r4, r7, lr}
 800145e:	b085      	sub	sp, #20
 8001460:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001462:	f000 facd 	bl	8001a00 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001466:	f000 f8b3 	bl	80015d0 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	// Wait 100 ms in case the finished device needs to be reprogrammed
	HAL_Delay(100);
 800146a:	2064      	movs	r0, #100	; 0x64
 800146c:	f000 fb44 	bl	8001af8 <HAL_Delay>
	// So the device can be reprogrammed (development mode)
	//HAL_Delay(8000);
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001470:	f000 f97e 	bl	8001770 <MX_GPIO_Init>
	MX_ADC1_Init();
 8001474:	f000 f8f0 	bl	8001658 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */

	// Begin ADC on empty pin for generating a pseudo random number
	HAL_ADC_Start(&hadc1);
 8001478:	4b4d      	ldr	r3, [pc, #308]	; (80015b0 <main+0x154>)
 800147a:	0018      	movs	r0, r3
 800147c:	f000 fe56 	bl	800212c <HAL_ADC_Start>

	for (int i = 0; i < 4; i++) {
 8001480:	2300      	movs	r3, #0
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	e00e      	b.n	80014a4 <main+0x48>
		HAL_GPIO_WritePin(portList[i], pinList[i], GPIO_PIN_SET);
 8001486:	4b4b      	ldr	r3, [pc, #300]	; (80015b4 <main+0x158>)
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	0092      	lsls	r2, r2, #2
 800148c:	58d0      	ldr	r0, [r2, r3]
 800148e:	4b4a      	ldr	r3, [pc, #296]	; (80015b8 <main+0x15c>)
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	0052      	lsls	r2, r2, #1
 8001494:	5ad3      	ldrh	r3, [r2, r3]
 8001496:	2201      	movs	r2, #1
 8001498:	0019      	movs	r1, r3
 800149a:	f001 fb30 	bl	8002afe <HAL_GPIO_WritePin>
	for (int i = 0; i < 4; i++) {
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	3301      	adds	r3, #1
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2b03      	cmp	r3, #3
 80014a8:	dded      	ble.n	8001486 <main+0x2a>
	}
	showStartAnimation(portList, pinList);
 80014aa:	4a43      	ldr	r2, [pc, #268]	; (80015b8 <main+0x15c>)
 80014ac:	4b41      	ldr	r3, [pc, #260]	; (80015b4 <main+0x158>)
 80014ae:	0011      	movs	r1, r2
 80014b0:	0018      	movs	r0, r3
 80014b2:	f7ff fce1 	bl	8000e78 <showStartAnimation>
	while (1) {

		// Main game loop

		// Show the button to press
		showSequence(&hadc1, &secretKey, portList, pinList);
 80014b6:	4b40      	ldr	r3, [pc, #256]	; (80015b8 <main+0x15c>)
 80014b8:	4a3e      	ldr	r2, [pc, #248]	; (80015b4 <main+0x158>)
 80014ba:	4940      	ldr	r1, [pc, #256]	; (80015bc <main+0x160>)
 80014bc:	483c      	ldr	r0, [pc, #240]	; (80015b0 <main+0x154>)
 80014be:	f7ff fd28 	bl	8000f12 <showSequence>

		// Read the keys and reaction time
		if (getKeys(conutdown, reactionTime, secretKey, portList, pinList)) {
 80014c2:	4b3f      	ldr	r3, [pc, #252]	; (80015c0 <main+0x164>)
 80014c4:	8818      	ldrh	r0, [r3, #0]
 80014c6:	4b3f      	ldr	r3, [pc, #252]	; (80015c4 <main+0x168>)
 80014c8:	8819      	ldrh	r1, [r3, #0]
 80014ca:	4b3c      	ldr	r3, [pc, #240]	; (80015bc <main+0x160>)
 80014cc:	781a      	ldrb	r2, [r3, #0]
 80014ce:	4c39      	ldr	r4, [pc, #228]	; (80015b4 <main+0x158>)
 80014d0:	4b39      	ldr	r3, [pc, #228]	; (80015b8 <main+0x15c>)
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	0023      	movs	r3, r4
 80014d6:	f7ff fe1d 	bl	8001114 <getKeys>
 80014da:	1e03      	subs	r3, r0, #0
 80014dc:	d03e      	beq.n	800155c <main+0x100>
			if (reactionTime > 500) {
 80014de:	4b39      	ldr	r3, [pc, #228]	; (80015c4 <main+0x168>)
 80014e0:	881a      	ldrh	r2, [r3, #0]
 80014e2:	23fa      	movs	r3, #250	; 0xfa
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d906      	bls.n	80014f8 <main+0x9c>
				reactionTime -= REACTION_TIME_STEP1;
 80014ea:	4b36      	ldr	r3, [pc, #216]	; (80015c4 <main+0x168>)
 80014ec:	881b      	ldrh	r3, [r3, #0]
 80014ee:	3b32      	subs	r3, #50	; 0x32
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	4b34      	ldr	r3, [pc, #208]	; (80015c4 <main+0x168>)
 80014f4:	801a      	strh	r2, [r3, #0]
 80014f6:	e01e      	b.n	8001536 <main+0xda>
			} else if ((reactionTime <= 500) && (reactionTime > 150)) {
 80014f8:	4b32      	ldr	r3, [pc, #200]	; (80015c4 <main+0x168>)
 80014fa:	881a      	ldrh	r2, [r3, #0]
 80014fc:	23fa      	movs	r3, #250	; 0xfa
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	429a      	cmp	r2, r3
 8001502:	d80a      	bhi.n	800151a <main+0xbe>
 8001504:	4b2f      	ldr	r3, [pc, #188]	; (80015c4 <main+0x168>)
 8001506:	881b      	ldrh	r3, [r3, #0]
 8001508:	2b96      	cmp	r3, #150	; 0x96
 800150a:	d906      	bls.n	800151a <main+0xbe>
				reactionTime -= REACTION_TIME_STEP2;
 800150c:	4b2d      	ldr	r3, [pc, #180]	; (80015c4 <main+0x168>)
 800150e:	881b      	ldrh	r3, [r3, #0]
 8001510:	3b0a      	subs	r3, #10
 8001512:	b29a      	uxth	r2, r3
 8001514:	4b2b      	ldr	r3, [pc, #172]	; (80015c4 <main+0x168>)
 8001516:	801a      	strh	r2, [r3, #0]
 8001518:	e00d      	b.n	8001536 <main+0xda>
			} else if ((reactionTime <= 150) && (reactionTime > 5)) {
 800151a:	4b2a      	ldr	r3, [pc, #168]	; (80015c4 <main+0x168>)
 800151c:	881b      	ldrh	r3, [r3, #0]
 800151e:	2b96      	cmp	r3, #150	; 0x96
 8001520:	d809      	bhi.n	8001536 <main+0xda>
 8001522:	4b28      	ldr	r3, [pc, #160]	; (80015c4 <main+0x168>)
 8001524:	881b      	ldrh	r3, [r3, #0]
 8001526:	2b05      	cmp	r3, #5
 8001528:	d905      	bls.n	8001536 <main+0xda>
				reactionTime -= REACTION_TIME_STEP3;
 800152a:	4b26      	ldr	r3, [pc, #152]	; (80015c4 <main+0x168>)
 800152c:	881b      	ldrh	r3, [r3, #0]
 800152e:	3b05      	subs	r3, #5
 8001530:	b29a      	uxth	r2, r3
 8001532:	4b24      	ldr	r3, [pc, #144]	; (80015c4 <main+0x168>)
 8001534:	801a      	strh	r2, [r3, #0]
			}

			// The correct button was pressed in time, increment the score
			score++;
 8001536:	4b24      	ldr	r3, [pc, #144]	; (80015c8 <main+0x16c>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	3301      	adds	r3, #1
 800153c:	b2da      	uxtb	r2, r3
 800153e:	4b22      	ldr	r3, [pc, #136]	; (80015c8 <main+0x16c>)
 8001540:	701a      	strb	r2, [r3, #0]

			// Wait for a random peior in time between 500 ms and 2700 ms
			HAL_Delay(500 + calculateNewRandomInRange(&hadc1, 2300));
 8001542:	4a22      	ldr	r2, [pc, #136]	; (80015cc <main+0x170>)
 8001544:	4b1a      	ldr	r3, [pc, #104]	; (80015b0 <main+0x154>)
 8001546:	0011      	movs	r1, r2
 8001548:	0018      	movs	r0, r3
 800154a:	f7ff fd77 	bl	800103c <calculateNewRandomInRange>
 800154e:	0003      	movs	r3, r0
 8001550:	33f5      	adds	r3, #245	; 0xf5
 8001552:	33ff      	adds	r3, #255	; 0xff
 8001554:	0018      	movs	r0, r3
 8001556:	f000 facf 	bl	8001af8 <HAL_Delay>
 800155a:	e7ac      	b.n	80014b6 <main+0x5a>
		} else {

			// The correct button wasn't pressed in time!
			// Show fail animation and score
			HAL_Delay(500);
 800155c:	23fa      	movs	r3, #250	; 0xfa
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	0018      	movs	r0, r3
 8001562:	f000 fac9 	bl	8001af8 <HAL_Delay>
			showFailAnimation(portList, pinList);
 8001566:	4a14      	ldr	r2, [pc, #80]	; (80015b8 <main+0x15c>)
 8001568:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <main+0x158>)
 800156a:	0011      	movs	r1, r2
 800156c:	0018      	movs	r0, r3
 800156e:	f7ff fe77 	bl	8001260 <showFailAnimation>
			HAL_Delay(500);
 8001572:	23fa      	movs	r3, #250	; 0xfa
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	0018      	movs	r0, r3
 8001578:	f000 fabe 	bl	8001af8 <HAL_Delay>
			showResult(score, portList, pinList);
 800157c:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <main+0x16c>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	4a0d      	ldr	r2, [pc, #52]	; (80015b8 <main+0x15c>)
 8001582:	490c      	ldr	r1, [pc, #48]	; (80015b4 <main+0x158>)
 8001584:	0018      	movs	r0, r3
 8001586:	f7ff feb4 	bl	80012f2 <showResult>
			HAL_Delay(500);
 800158a:	23fa      	movs	r3, #250	; 0xfa
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	0018      	movs	r0, r3
 8001590:	f000 fab2 	bl	8001af8 <HAL_Delay>

			// Reset variables and restart the game
			reactionTime = 1000;
 8001594:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <main+0x168>)
 8001596:	22fa      	movs	r2, #250	; 0xfa
 8001598:	0092      	lsls	r2, r2, #2
 800159a:	801a      	strh	r2, [r3, #0]
			score = 0;
 800159c:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <main+0x16c>)
 800159e:	2200      	movs	r2, #0
 80015a0:	701a      	strb	r2, [r3, #0]
			showStartAnimation(portList, pinList);
 80015a2:	4a05      	ldr	r2, [pc, #20]	; (80015b8 <main+0x15c>)
 80015a4:	4b03      	ldr	r3, [pc, #12]	; (80015b4 <main+0x158>)
 80015a6:	0011      	movs	r1, r2
 80015a8:	0018      	movs	r0, r3
 80015aa:	f7ff fc65 	bl	8000e78 <showStartAnimation>
		showSequence(&hadc1, &secretKey, portList, pinList);
 80015ae:	e782      	b.n	80014b6 <main+0x5a>
 80015b0:	20000044 	.word	0x20000044
 80015b4:	20000000 	.word	0x20000000
 80015b8:	20000010 	.word	0x20000010
 80015bc:	200000ac 	.word	0x200000ac
 80015c0:	200000aa 	.word	0x200000aa
 80015c4:	20000018 	.word	0x20000018
 80015c8:	200000a8 	.word	0x200000a8
 80015cc:	000008fc 	.word	0x000008fc

080015d0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80015d0:	b590      	push	{r4, r7, lr}
 80015d2:	b08d      	sub	sp, #52	; 0x34
 80015d4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80015d6:	2414      	movs	r4, #20
 80015d8:	193b      	adds	r3, r7, r4
 80015da:	0018      	movs	r0, r3
 80015dc:	231c      	movs	r3, #28
 80015de:	001a      	movs	r2, r3
 80015e0:	2100      	movs	r1, #0
 80015e2:	f001 ff01 	bl	80033e8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80015e6:	003b      	movs	r3, r7
 80015e8:	0018      	movs	r0, r3
 80015ea:	2314      	movs	r3, #20
 80015ec:	001a      	movs	r2, r3
 80015ee:	2100      	movs	r1, #0
 80015f0:	f001 fefa 	bl	80033e8 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015f4:	193b      	adds	r3, r7, r4
 80015f6:	2202      	movs	r2, #2
 80015f8:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015fa:	193b      	adds	r3, r7, r4
 80015fc:	2280      	movs	r2, #128	; 0x80
 80015fe:	0052      	lsls	r2, r2, #1
 8001600:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 8001602:	193b      	adds	r3, r7, r4
 8001604:	2280      	movs	r2, #128	; 0x80
 8001606:	0152      	lsls	r2, r2, #5
 8001608:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800160a:	193b      	adds	r3, r7, r4
 800160c:	2240      	movs	r2, #64	; 0x40
 800160e:	615a      	str	r2, [r3, #20]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001610:	193b      	adds	r3, r7, r4
 8001612:	0018      	movs	r0, r3
 8001614:	f001 fa90 	bl	8002b38 <HAL_RCC_OscConfig>
 8001618:	1e03      	subs	r3, r0, #0
 800161a:	d001      	beq.n	8001620 <SystemClock_Config+0x50>
		Error_Handler();
 800161c:	f000 f90e 	bl	800183c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001620:	003b      	movs	r3, r7
 8001622:	2207      	movs	r2, #7
 8001624:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001626:	003b      	movs	r3, r7
 8001628:	2200      	movs	r2, #0
 800162a:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800162c:	003b      	movs	r3, r7
 800162e:	2200      	movs	r2, #0
 8001630:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001632:	003b      	movs	r3, r7
 8001634:	2200      	movs	r2, #0
 8001636:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001638:	003b      	movs	r3, r7
 800163a:	2200      	movs	r2, #0
 800163c:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800163e:	003b      	movs	r3, r7
 8001640:	2100      	movs	r1, #0
 8001642:	0018      	movs	r0, r3
 8001644:	f001 fc72 	bl	8002f2c <HAL_RCC_ClockConfig>
 8001648:	1e03      	subs	r3, r0, #0
 800164a:	d001      	beq.n	8001650 <SystemClock_Config+0x80>
		Error_Handler();
 800164c:	f000 f8f6 	bl	800183c <Error_Handler>
	}
}
 8001650:	46c0      	nop			; (mov r8, r8)
 8001652:	46bd      	mov	sp, r7
 8001654:	b00d      	add	sp, #52	; 0x34
 8001656:	bd90      	pop	{r4, r7, pc}

08001658 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001658:	b580      	push	{r7, lr}
 800165a:	b08a      	sub	sp, #40	; 0x28
 800165c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800165e:	231c      	movs	r3, #28
 8001660:	18fb      	adds	r3, r7, r3
 8001662:	0018      	movs	r0, r3
 8001664:	230c      	movs	r3, #12
 8001666:	001a      	movs	r2, r3
 8001668:	2100      	movs	r1, #0
 800166a:	f001 febd 	bl	80033e8 <memset>

	/* USER CODE BEGIN ADC1_Init 1 */
	GPIO_InitTypeDef gpioInit;
	__GPIOA_CLK_ENABLE()
 800166e:	4b3b      	ldr	r3, [pc, #236]	; (800175c <MX_ADC1_Init+0x104>)
 8001670:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001672:	4b3a      	ldr	r3, [pc, #232]	; (800175c <MX_ADC1_Init+0x104>)
 8001674:	2101      	movs	r1, #1
 8001676:	430a      	orrs	r2, r1
 8001678:	635a      	str	r2, [r3, #52]	; 0x34
 800167a:	4b38      	ldr	r3, [pc, #224]	; (800175c <MX_ADC1_Init+0x104>)
 800167c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800167e:	2201      	movs	r2, #1
 8001680:	4013      	ands	r3, r2
 8001682:	607b      	str	r3, [r7, #4]
 8001684:	687b      	ldr	r3, [r7, #4]
	;
	gpioInit.Pin = GPIO_PIN_13;
 8001686:	2108      	movs	r1, #8
 8001688:	187b      	adds	r3, r7, r1
 800168a:	2280      	movs	r2, #128	; 0x80
 800168c:	0192      	lsls	r2, r2, #6
 800168e:	601a      	str	r2, [r3, #0]
	gpioInit.Mode = GPIO_MODE_ANALOG;
 8001690:	187b      	adds	r3, r7, r1
 8001692:	2203      	movs	r2, #3
 8001694:	605a      	str	r2, [r3, #4]
	gpioInit.Pull = GPIO_NOPULL;
 8001696:	187b      	adds	r3, r7, r1
 8001698:	2200      	movs	r2, #0
 800169a:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOC, &gpioInit);
 800169c:	187b      	adds	r3, r7, r1
 800169e:	4a30      	ldr	r2, [pc, #192]	; (8001760 <MX_ADC1_Init+0x108>)
 80016a0:	0019      	movs	r1, r3
 80016a2:	0010      	movs	r0, r2
 80016a4:	f001 f8a4 	bl	80027f0 <HAL_GPIO_Init>
	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 80016a8:	4b2e      	ldr	r3, [pc, #184]	; (8001764 <MX_ADC1_Init+0x10c>)
 80016aa:	4a2f      	ldr	r2, [pc, #188]	; (8001768 <MX_ADC1_Init+0x110>)
 80016ac:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80016ae:	4b2d      	ldr	r3, [pc, #180]	; (8001764 <MX_ADC1_Init+0x10c>)
 80016b0:	2280      	movs	r2, #128	; 0x80
 80016b2:	05d2      	lsls	r2, r2, #23
 80016b4:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016b6:	4b2b      	ldr	r3, [pc, #172]	; (8001764 <MX_ADC1_Init+0x10c>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016bc:	4b29      	ldr	r3, [pc, #164]	; (8001764 <MX_ADC1_Init+0x10c>)
 80016be:	2200      	movs	r2, #0
 80016c0:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80016c2:	4b28      	ldr	r3, [pc, #160]	; (8001764 <MX_ADC1_Init+0x10c>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016c8:	4b26      	ldr	r3, [pc, #152]	; (8001764 <MX_ADC1_Init+0x10c>)
 80016ca:	2204      	movs	r2, #4
 80016cc:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 80016ce:	4b25      	ldr	r3, [pc, #148]	; (8001764 <MX_ADC1_Init+0x10c>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	761a      	strb	r2, [r3, #24]
	hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80016d4:	4b23      	ldr	r3, [pc, #140]	; (8001764 <MX_ADC1_Init+0x10c>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	765a      	strb	r2, [r3, #25]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80016da:	4b22      	ldr	r3, [pc, #136]	; (8001764 <MX_ADC1_Init+0x10c>)
 80016dc:	2201      	movs	r2, #1
 80016de:	769a      	strb	r2, [r3, #26]
	hadc1.Init.NbrOfConversion = 1;
 80016e0:	4b20      	ldr	r3, [pc, #128]	; (8001764 <MX_ADC1_Init+0x10c>)
 80016e2:	2201      	movs	r2, #1
 80016e4:	61da      	str	r2, [r3, #28]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016e6:	4b1f      	ldr	r3, [pc, #124]	; (8001764 <MX_ADC1_Init+0x10c>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	625a      	str	r2, [r3, #36]	; 0x24
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016ec:	4b1d      	ldr	r3, [pc, #116]	; (8001764 <MX_ADC1_Init+0x10c>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80016f2:	4b1c      	ldr	r3, [pc, #112]	; (8001764 <MX_ADC1_Init+0x10c>)
 80016f4:	222c      	movs	r2, #44	; 0x2c
 80016f6:	2100      	movs	r1, #0
 80016f8:	5499      	strb	r1, [r3, r2]
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80016fa:	4b1a      	ldr	r3, [pc, #104]	; (8001764 <MX_ADC1_Init+0x10c>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8001700:	4b18      	ldr	r3, [pc, #96]	; (8001764 <MX_ADC1_Init+0x10c>)
 8001702:	2200      	movs	r2, #0
 8001704:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8001706:	4b17      	ldr	r3, [pc, #92]	; (8001764 <MX_ADC1_Init+0x10c>)
 8001708:	2200      	movs	r2, #0
 800170a:	639a      	str	r2, [r3, #56]	; 0x38
	hadc1.Init.OversamplingMode = DISABLE;
 800170c:	4b15      	ldr	r3, [pc, #84]	; (8001764 <MX_ADC1_Init+0x10c>)
 800170e:	223c      	movs	r2, #60	; 0x3c
 8001710:	2100      	movs	r1, #0
 8001712:	5499      	strb	r1, [r3, r2]
	hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001714:	4b13      	ldr	r3, [pc, #76]	; (8001764 <MX_ADC1_Init+0x10c>)
 8001716:	2200      	movs	r2, #0
 8001718:	64da      	str	r2, [r3, #76]	; 0x4c
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800171a:	4b12      	ldr	r3, [pc, #72]	; (8001764 <MX_ADC1_Init+0x10c>)
 800171c:	0018      	movs	r0, r3
 800171e:	f000 fb3d 	bl	8001d9c <HAL_ADC_Init>
 8001722:	1e03      	subs	r3, r0, #0
 8001724:	d001      	beq.n	800172a <MX_ADC1_Init+0xd2>
		Error_Handler();
 8001726:	f000 f889 	bl	800183c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_13;
 800172a:	211c      	movs	r1, #28
 800172c:	187b      	adds	r3, r7, r1
 800172e:	4a0f      	ldr	r2, [pc, #60]	; (800176c <MX_ADC1_Init+0x114>)
 8001730:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001732:	187b      	adds	r3, r7, r1
 8001734:	2200      	movs	r2, #0
 8001736:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001738:	187b      	adds	r3, r7, r1
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800173e:	187a      	adds	r2, r7, r1
 8001740:	4b08      	ldr	r3, [pc, #32]	; (8001764 <MX_ADC1_Init+0x10c>)
 8001742:	0011      	movs	r1, r2
 8001744:	0018      	movs	r0, r3
 8001746:	f000 fd4b 	bl	80021e0 <HAL_ADC_ConfigChannel>
 800174a:	1e03      	subs	r3, r0, #0
 800174c:	d001      	beq.n	8001752 <MX_ADC1_Init+0xfa>
		Error_Handler();
 800174e:	f000 f875 	bl	800183c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001752:	46c0      	nop			; (mov r8, r8)
 8001754:	46bd      	mov	sp, r7
 8001756:	b00a      	add	sp, #40	; 0x28
 8001758:	bd80      	pop	{r7, pc}
 800175a:	46c0      	nop			; (mov r8, r8)
 800175c:	40021000 	.word	0x40021000
 8001760:	50000800 	.word	0x50000800
 8001764:	20000044 	.word	0x20000044
 8001768:	40012400 	.word	0x40012400
 800176c:	34002000 	.word	0x34002000

08001770 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001770:	b590      	push	{r4, r7, lr}
 8001772:	b089      	sub	sp, #36	; 0x24
 8001774:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001776:	240c      	movs	r4, #12
 8001778:	193b      	adds	r3, r7, r4
 800177a:	0018      	movs	r0, r3
 800177c:	2314      	movs	r3, #20
 800177e:	001a      	movs	r2, r3
 8001780:	2100      	movs	r1, #0
 8001782:	f001 fe31 	bl	80033e8 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001786:	4b2a      	ldr	r3, [pc, #168]	; (8001830 <MX_GPIO_Init+0xc0>)
 8001788:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800178a:	4b29      	ldr	r3, [pc, #164]	; (8001830 <MX_GPIO_Init+0xc0>)
 800178c:	2104      	movs	r1, #4
 800178e:	430a      	orrs	r2, r1
 8001790:	635a      	str	r2, [r3, #52]	; 0x34
 8001792:	4b27      	ldr	r3, [pc, #156]	; (8001830 <MX_GPIO_Init+0xc0>)
 8001794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001796:	2204      	movs	r2, #4
 8001798:	4013      	ands	r3, r2
 800179a:	60bb      	str	r3, [r7, #8]
 800179c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800179e:	4b24      	ldr	r3, [pc, #144]	; (8001830 <MX_GPIO_Init+0xc0>)
 80017a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017a2:	4b23      	ldr	r3, [pc, #140]	; (8001830 <MX_GPIO_Init+0xc0>)
 80017a4:	2101      	movs	r1, #1
 80017a6:	430a      	orrs	r2, r1
 80017a8:	635a      	str	r2, [r3, #52]	; 0x34
 80017aa:	4b21      	ldr	r3, [pc, #132]	; (8001830 <MX_GPIO_Init+0xc0>)
 80017ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ae:	2201      	movs	r2, #1
 80017b0:	4013      	ands	r3, r2
 80017b2:	607b      	str	r3, [r7, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_1_BLUE_GPIO_Port, LED_1_BLUE_Pin, GPIO_PIN_RESET);
 80017b6:	2380      	movs	r3, #128	; 0x80
 80017b8:	01db      	lsls	r3, r3, #7
 80017ba:	481e      	ldr	r0, [pc, #120]	; (8001834 <MX_GPIO_Init+0xc4>)
 80017bc:	2200      	movs	r2, #0
 80017be:	0019      	movs	r1, r3
 80017c0:	f001 f99d 	bl	8002afe <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LED_2_YELLOW_Pin | LED_3_GREEN_Pin | LED_4_RED_Pin,
 80017c4:	491c      	ldr	r1, [pc, #112]	; (8001838 <MX_GPIO_Init+0xc8>)
 80017c6:	23a0      	movs	r3, #160	; 0xa0
 80017c8:	05db      	lsls	r3, r3, #23
 80017ca:	2200      	movs	r2, #0
 80017cc:	0018      	movs	r0, r3
 80017ce:	f001 f996 	bl	8002afe <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : LED_1_BLUE_Pin */
	GPIO_InitStruct.Pin = LED_1_BLUE_Pin;
 80017d2:	193b      	adds	r3, r7, r4
 80017d4:	2280      	movs	r2, #128	; 0x80
 80017d6:	01d2      	lsls	r2, r2, #7
 80017d8:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017da:	193b      	adds	r3, r7, r4
 80017dc:	2201      	movs	r2, #1
 80017de:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017e0:	193b      	adds	r3, r7, r4
 80017e2:	2201      	movs	r2, #1
 80017e4:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e6:	193b      	adds	r3, r7, r4
 80017e8:	2200      	movs	r2, #0
 80017ea:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LED_1_BLUE_GPIO_Port, &GPIO_InitStruct);
 80017ec:	193b      	adds	r3, r7, r4
 80017ee:	4a11      	ldr	r2, [pc, #68]	; (8001834 <MX_GPIO_Init+0xc4>)
 80017f0:	0019      	movs	r1, r3
 80017f2:	0010      	movs	r0, r2
 80017f4:	f000 fffc 	bl	80027f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED_2_YELLOW_Pin LED_3_GREEN_Pin LED_4_RED_Pin */
	GPIO_InitStruct.Pin = LED_2_YELLOW_Pin | LED_3_GREEN_Pin | LED_4_RED_Pin;
 80017f8:	0021      	movs	r1, r4
 80017fa:	187b      	adds	r3, r7, r1
 80017fc:	4a0e      	ldr	r2, [pc, #56]	; (8001838 <MX_GPIO_Init+0xc8>)
 80017fe:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001800:	187b      	adds	r3, r7, r1
 8001802:	2201      	movs	r2, #1
 8001804:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001806:	187b      	adds	r3, r7, r1
 8001808:	2201      	movs	r2, #1
 800180a:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180c:	187b      	adds	r3, r7, r1
 800180e:	2200      	movs	r2, #0
 8001810:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001812:	187a      	adds	r2, r7, r1
 8001814:	23a0      	movs	r3, #160	; 0xa0
 8001816:	05db      	lsls	r3, r3, #23
 8001818:	0011      	movs	r1, r2
 800181a:	0018      	movs	r0, r3
 800181c:	f000 ffe8 	bl	80027f0 <HAL_GPIO_Init>

	/**/
	HAL_SYSCFG_SetPinBinding(
 8001820:	2005      	movs	r0, #5
 8001822:	f000 f98b 	bl	8001b3c <HAL_SYSCFG_SetPinBinding>
			HAL_BIND_SO8_PIN1_PC14 | HAL_BIND_SO8_PIN4_PA0
					| HAL_BIND_SO8_PIN5_PA8);

}
 8001826:	46c0      	nop			; (mov r8, r8)
 8001828:	46bd      	mov	sp, r7
 800182a:	b009      	add	sp, #36	; 0x24
 800182c:	bd90      	pop	{r4, r7, pc}
 800182e:	46c0      	nop			; (mov r8, r8)
 8001830:	40021000 	.word	0x40021000
 8001834:	50000800 	.word	0x50000800
 8001838:	00001101 	.word	0x00001101

0800183c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001840:	b672      	cpsid	i
}
 8001842:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001844:	e7fe      	b.n	8001844 <Error_Handler+0x8>
	...

08001848 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800184e:	4b0f      	ldr	r3, [pc, #60]	; (800188c <HAL_MspInit+0x44>)
 8001850:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001852:	4b0e      	ldr	r3, [pc, #56]	; (800188c <HAL_MspInit+0x44>)
 8001854:	2101      	movs	r1, #1
 8001856:	430a      	orrs	r2, r1
 8001858:	641a      	str	r2, [r3, #64]	; 0x40
 800185a:	4b0c      	ldr	r3, [pc, #48]	; (800188c <HAL_MspInit+0x44>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	2201      	movs	r2, #1
 8001860:	4013      	ands	r3, r2
 8001862:	607b      	str	r3, [r7, #4]
 8001864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001866:	4b09      	ldr	r3, [pc, #36]	; (800188c <HAL_MspInit+0x44>)
 8001868:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800186a:	4b08      	ldr	r3, [pc, #32]	; (800188c <HAL_MspInit+0x44>)
 800186c:	2180      	movs	r1, #128	; 0x80
 800186e:	0549      	lsls	r1, r1, #21
 8001870:	430a      	orrs	r2, r1
 8001872:	63da      	str	r2, [r3, #60]	; 0x3c
 8001874:	4b05      	ldr	r3, [pc, #20]	; (800188c <HAL_MspInit+0x44>)
 8001876:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001878:	2380      	movs	r3, #128	; 0x80
 800187a:	055b      	lsls	r3, r3, #21
 800187c:	4013      	ands	r3, r2
 800187e:	603b      	str	r3, [r7, #0]
 8001880:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001882:	46c0      	nop			; (mov r8, r8)
 8001884:	46bd      	mov	sp, r7
 8001886:	b002      	add	sp, #8
 8001888:	bd80      	pop	{r7, pc}
 800188a:	46c0      	nop			; (mov r8, r8)
 800188c:	40021000 	.word	0x40021000

08001890 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001890:	b590      	push	{r4, r7, lr}
 8001892:	b091      	sub	sp, #68	; 0x44
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001898:	232c      	movs	r3, #44	; 0x2c
 800189a:	18fb      	adds	r3, r7, r3
 800189c:	0018      	movs	r0, r3
 800189e:	2314      	movs	r3, #20
 80018a0:	001a      	movs	r2, r3
 80018a2:	2100      	movs	r1, #0
 80018a4:	f001 fda0 	bl	80033e8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018a8:	2410      	movs	r4, #16
 80018aa:	193b      	adds	r3, r7, r4
 80018ac:	0018      	movs	r0, r3
 80018ae:	231c      	movs	r3, #28
 80018b0:	001a      	movs	r2, r3
 80018b2:	2100      	movs	r1, #0
 80018b4:	f001 fd98 	bl	80033e8 <memset>
  if(hadc->Instance==ADC1)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a20      	ldr	r2, [pc, #128]	; (8001940 <HAL_ADC_MspInit+0xb0>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d13a      	bne.n	8001938 <HAL_ADC_MspInit+0xa8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80018c2:	193b      	adds	r3, r7, r4
 80018c4:	2280      	movs	r2, #128	; 0x80
 80018c6:	01d2      	lsls	r2, r2, #7
 80018c8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80018ca:	193b      	adds	r3, r7, r4
 80018cc:	2200      	movs	r2, #0
 80018ce:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018d0:	193b      	adds	r3, r7, r4
 80018d2:	0018      	movs	r0, r3
 80018d4:	f001 fc76 	bl	80031c4 <HAL_RCCEx_PeriphCLKConfig>
 80018d8:	1e03      	subs	r3, r0, #0
 80018da:	d001      	beq.n	80018e0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80018dc:	f7ff ffae 	bl	800183c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80018e0:	4b18      	ldr	r3, [pc, #96]	; (8001944 <HAL_ADC_MspInit+0xb4>)
 80018e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018e4:	4b17      	ldr	r3, [pc, #92]	; (8001944 <HAL_ADC_MspInit+0xb4>)
 80018e6:	2180      	movs	r1, #128	; 0x80
 80018e8:	0349      	lsls	r1, r1, #13
 80018ea:	430a      	orrs	r2, r1
 80018ec:	641a      	str	r2, [r3, #64]	; 0x40
 80018ee:	4b15      	ldr	r3, [pc, #84]	; (8001944 <HAL_ADC_MspInit+0xb4>)
 80018f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018f2:	2380      	movs	r3, #128	; 0x80
 80018f4:	035b      	lsls	r3, r3, #13
 80018f6:	4013      	ands	r3, r2
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fc:	4b11      	ldr	r3, [pc, #68]	; (8001944 <HAL_ADC_MspInit+0xb4>)
 80018fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001900:	4b10      	ldr	r3, [pc, #64]	; (8001944 <HAL_ADC_MspInit+0xb4>)
 8001902:	2101      	movs	r1, #1
 8001904:	430a      	orrs	r2, r1
 8001906:	635a      	str	r2, [r3, #52]	; 0x34
 8001908:	4b0e      	ldr	r3, [pc, #56]	; (8001944 <HAL_ADC_MspInit+0xb4>)
 800190a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800190c:	2201      	movs	r2, #1
 800190e:	4013      	ands	r3, r2
 8001910:	60bb      	str	r3, [r7, #8]
 8001912:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA13     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = RNG_Pin;
 8001914:	212c      	movs	r1, #44	; 0x2c
 8001916:	187b      	adds	r3, r7, r1
 8001918:	2280      	movs	r2, #128	; 0x80
 800191a:	0192      	lsls	r2, r2, #6
 800191c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800191e:	187b      	adds	r3, r7, r1
 8001920:	2203      	movs	r2, #3
 8001922:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	187b      	adds	r3, r7, r1
 8001926:	2200      	movs	r2, #0
 8001928:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(RNG_GPIO_Port, &GPIO_InitStruct);
 800192a:	187a      	adds	r2, r7, r1
 800192c:	23a0      	movs	r3, #160	; 0xa0
 800192e:	05db      	lsls	r3, r3, #23
 8001930:	0011      	movs	r1, r2
 8001932:	0018      	movs	r0, r3
 8001934:	f000 ff5c 	bl	80027f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001938:	46c0      	nop			; (mov r8, r8)
 800193a:	46bd      	mov	sp, r7
 800193c:	b011      	add	sp, #68	; 0x44
 800193e:	bd90      	pop	{r4, r7, pc}
 8001940:	40012400 	.word	0x40012400
 8001944:	40021000 	.word	0x40021000

08001948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800194c:	e7fe      	b.n	800194c <NMI_Handler+0x4>

0800194e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001952:	e7fe      	b.n	8001952 <HardFault_Handler+0x4>

08001954 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001958:	46c0      	nop			; (mov r8, r8)
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001962:	46c0      	nop			; (mov r8, r8)
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800196c:	f000 f8aa 	bl	8001ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001970:	46c0      	nop			; (mov r8, r8)
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
	...

08001978 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800197c:	4b03      	ldr	r3, [pc, #12]	; (800198c <SystemInit+0x14>)
 800197e:	2280      	movs	r2, #128	; 0x80
 8001980:	0512      	lsls	r2, r2, #20
 8001982:	609a      	str	r2, [r3, #8]
#endif
}
 8001984:	46c0      	nop			; (mov r8, r8)
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	46c0      	nop			; (mov r8, r8)
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001990:	480d      	ldr	r0, [pc, #52]	; (80019c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001992:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001994:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001996:	e003      	b.n	80019a0 <LoopCopyDataInit>

08001998 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800199a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800199c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800199e:	3104      	adds	r1, #4

080019a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80019a0:	480b      	ldr	r0, [pc, #44]	; (80019d0 <LoopForever+0xa>)
  ldr r3, =_edata
 80019a2:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <LoopForever+0xe>)
  adds r2, r0, r1
 80019a4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80019a6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80019a8:	d3f6      	bcc.n	8001998 <CopyDataInit>
  ldr r2, =_sbss
 80019aa:	4a0b      	ldr	r2, [pc, #44]	; (80019d8 <LoopForever+0x12>)
  b LoopFillZerobss
 80019ac:	e002      	b.n	80019b4 <LoopFillZerobss>

080019ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80019ae:	2300      	movs	r3, #0
  str  r3, [r2]
 80019b0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019b2:	3204      	adds	r2, #4

080019b4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80019b4:	4b09      	ldr	r3, [pc, #36]	; (80019dc <LoopForever+0x16>)
  cmp r2, r3
 80019b6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80019b8:	d3f9      	bcc.n	80019ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80019ba:	f7ff ffdd 	bl	8001978 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80019be:	f001 fcef 	bl	80033a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019c2:	f7ff fd4b 	bl	800145c <main>

080019c6 <LoopForever>:

LoopForever:
    b LoopForever
 80019c6:	e7fe      	b.n	80019c6 <LoopForever>
  ldr   r0, =_estack
 80019c8:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 80019cc:	08003518 	.word	0x08003518
  ldr r0, =_sdata
 80019d0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80019d4:	20000028 	.word	0x20000028
  ldr r2, =_sbss
 80019d8:	20000028 	.word	0x20000028
  ldr r3, = _ebss
 80019dc:	200000b4 	.word	0x200000b4

080019e0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019e0:	e7fe      	b.n	80019e0 <ADC1_IRQHandler>
	...

080019e4 <LL_SYSCFG_ConfigPinMux>:
  * @rmtoll SYSCFG_CFGR3 CLL   LL_SYSCFG_ConfigPinMux\n
  * @param  mux_cfg This parameter can be a combination of LL_PINMUX_xx defines
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_ConfigPinMux(uint32_t mux_cfg)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  WRITE_REG(SYSCFG->CFGR3, mux_cfg);
 80019ec:	4b03      	ldr	r3, [pc, #12]	; (80019fc <LL_SYSCFG_ConfigPinMux+0x18>)
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80019f2:	46c0      	nop			; (mov r8, r8)
 80019f4:	46bd      	mov	sp, r7
 80019f6:	b002      	add	sp, #8
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	46c0      	nop			; (mov r8, r8)
 80019fc:	40010000 	.word	0x40010000

08001a00 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a06:	1dfb      	adds	r3, r7, #7
 8001a08:	2200      	movs	r2, #0
 8001a0a:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a0c:	2003      	movs	r0, #3
 8001a0e:	f000 f80f 	bl	8001a30 <HAL_InitTick>
 8001a12:	1e03      	subs	r3, r0, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8001a16:	1dfb      	adds	r3, r7, #7
 8001a18:	2201      	movs	r2, #1
 8001a1a:	701a      	strb	r2, [r3, #0]
 8001a1c:	e001      	b.n	8001a22 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a1e:	f7ff ff13 	bl	8001848 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a22:	1dfb      	adds	r3, r7, #7
 8001a24:	781b      	ldrb	r3, [r3, #0]
}
 8001a26:	0018      	movs	r0, r3
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	b002      	add	sp, #8
 8001a2c:	bd80      	pop	{r7, pc}
	...

08001a30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a30:	b590      	push	{r4, r7, lr}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a38:	230f      	movs	r3, #15
 8001a3a:	18fb      	adds	r3, r7, r3
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8001a40:	4b1d      	ldr	r3, [pc, #116]	; (8001ab8 <HAL_InitTick+0x88>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d02b      	beq.n	8001aa0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001a48:	4b1c      	ldr	r3, [pc, #112]	; (8001abc <HAL_InitTick+0x8c>)
 8001a4a:	681c      	ldr	r4, [r3, #0]
 8001a4c:	4b1a      	ldr	r3, [pc, #104]	; (8001ab8 <HAL_InitTick+0x88>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	0019      	movs	r1, r3
 8001a52:	23fa      	movs	r3, #250	; 0xfa
 8001a54:	0098      	lsls	r0, r3, #2
 8001a56:	f7fe fb57 	bl	8000108 <__udivsi3>
 8001a5a:	0003      	movs	r3, r0
 8001a5c:	0019      	movs	r1, r3
 8001a5e:	0020      	movs	r0, r4
 8001a60:	f7fe fb52 	bl	8000108 <__udivsi3>
 8001a64:	0003      	movs	r3, r0
 8001a66:	0018      	movs	r0, r3
 8001a68:	f000 feb5 	bl	80027d6 <HAL_SYSTICK_Config>
 8001a6c:	1e03      	subs	r3, r0, #0
 8001a6e:	d112      	bne.n	8001a96 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b03      	cmp	r3, #3
 8001a74:	d80a      	bhi.n	8001a8c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a76:	6879      	ldr	r1, [r7, #4]
 8001a78:	2301      	movs	r3, #1
 8001a7a:	425b      	negs	r3, r3
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	0018      	movs	r0, r3
 8001a80:	f000 fe94 	bl	80027ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a84:	4b0e      	ldr	r3, [pc, #56]	; (8001ac0 <HAL_InitTick+0x90>)
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	e00d      	b.n	8001aa8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001a8c:	230f      	movs	r3, #15
 8001a8e:	18fb      	adds	r3, r7, r3
 8001a90:	2201      	movs	r2, #1
 8001a92:	701a      	strb	r2, [r3, #0]
 8001a94:	e008      	b.n	8001aa8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a96:	230f      	movs	r3, #15
 8001a98:	18fb      	adds	r3, r7, r3
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	701a      	strb	r2, [r3, #0]
 8001a9e:	e003      	b.n	8001aa8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001aa0:	230f      	movs	r3, #15
 8001aa2:	18fb      	adds	r3, r7, r3
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001aa8:	230f      	movs	r3, #15
 8001aaa:	18fb      	adds	r3, r7, r3
 8001aac:	781b      	ldrb	r3, [r3, #0]
}
 8001aae:	0018      	movs	r0, r3
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	b005      	add	sp, #20
 8001ab4:	bd90      	pop	{r4, r7, pc}
 8001ab6:	46c0      	nop			; (mov r8, r8)
 8001ab8:	20000024 	.word	0x20000024
 8001abc:	2000001c 	.word	0x2000001c
 8001ac0:	20000020 	.word	0x20000020

08001ac4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ac8:	4b04      	ldr	r3, [pc, #16]	; (8001adc <HAL_IncTick+0x18>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	4b04      	ldr	r3, [pc, #16]	; (8001ae0 <HAL_IncTick+0x1c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	18d2      	adds	r2, r2, r3
 8001ad2:	4b02      	ldr	r3, [pc, #8]	; (8001adc <HAL_IncTick+0x18>)
 8001ad4:	601a      	str	r2, [r3, #0]
}
 8001ad6:	46c0      	nop			; (mov r8, r8)
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	200000b0 	.word	0x200000b0
 8001ae0:	20000024 	.word	0x20000024

08001ae4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ae8:	4b02      	ldr	r3, [pc, #8]	; (8001af4 <HAL_GetTick+0x10>)
 8001aea:	681b      	ldr	r3, [r3, #0]
}
 8001aec:	0018      	movs	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	46c0      	nop			; (mov r8, r8)
 8001af4:	200000b0 	.word	0x200000b0

08001af8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b00:	f7ff fff0 	bl	8001ae4 <HAL_GetTick>
 8001b04:	0003      	movs	r3, r0
 8001b06:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	d004      	beq.n	8001b1c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b12:	4b09      	ldr	r3, [pc, #36]	; (8001b38 <HAL_Delay+0x40>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	18d3      	adds	r3, r2, r3
 8001b1a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b1c:	46c0      	nop			; (mov r8, r8)
 8001b1e:	f7ff ffe1 	bl	8001ae4 <HAL_GetTick>
 8001b22:	0002      	movs	r2, r0
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	68fa      	ldr	r2, [r7, #12]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d8f7      	bhi.n	8001b1e <HAL_Delay+0x26>
  {
  }
}
 8001b2e:	46c0      	nop			; (mov r8, r8)
 8001b30:	46c0      	nop			; (mov r8, r8)
 8001b32:	46bd      	mov	sp, r7
 8001b34:	b004      	add	sp, #16
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	20000024 	.word	0x20000024

08001b3c <HAL_SYSCFG_SetPinBinding>:
  *         for each die package
  *         This parameter can be any combination of HAL_BIND_xx defines
  * @retval None
  */
void HAL_SYSCFG_SetPinBinding(uint32_t pin_binding)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_HAL_SYSCFG_PINBINDING(pin_binding));
  LL_SYSCFG_ConfigPinMux(pin_binding);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	0018      	movs	r0, r3
 8001b48:	f7ff ff4c 	bl	80019e4 <LL_SYSCFG_ConfigPinMux>
}
 8001b4c:	46c0      	nop			; (mov r8, r8)
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	b002      	add	sp, #8
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a05      	ldr	r2, [pc, #20]	; (8001b78 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001b64:	401a      	ands	r2, r3
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	431a      	orrs	r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	601a      	str	r2, [r3, #0]
}
 8001b6e:	46c0      	nop			; (mov r8, r8)
 8001b70:	46bd      	mov	sp, r7
 8001b72:	b002      	add	sp, #8
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	46c0      	nop			; (mov r8, r8)
 8001b78:	ff3fffff 	.word	0xff3fffff

08001b7c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	23c0      	movs	r3, #192	; 0xc0
 8001b8a:	041b      	lsls	r3, r3, #16
 8001b8c:	4013      	ands	r3, r2
}
 8001b8e:	0018      	movs	r0, r3
 8001b90:	46bd      	mov	sp, r7
 8001b92:	b002      	add	sp, #8
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b084      	sub	sp, #16
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	60f8      	str	r0, [r7, #12]
 8001b9e:	60b9      	str	r1, [r7, #8]
 8001ba0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	695b      	ldr	r3, [r3, #20]
 8001ba6:	68ba      	ldr	r2, [r7, #8]
 8001ba8:	2104      	movs	r1, #4
 8001baa:	400a      	ands	r2, r1
 8001bac:	2107      	movs	r1, #7
 8001bae:	4091      	lsls	r1, r2
 8001bb0:	000a      	movs	r2, r1
 8001bb2:	43d2      	mvns	r2, r2
 8001bb4:	401a      	ands	r2, r3
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	2104      	movs	r1, #4
 8001bba:	400b      	ands	r3, r1
 8001bbc:	6879      	ldr	r1, [r7, #4]
 8001bbe:	4099      	lsls	r1, r3
 8001bc0:	000b      	movs	r3, r1
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001bc8:	46c0      	nop			; (mov r8, r8)
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	b004      	add	sp, #16
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	2104      	movs	r1, #4
 8001be2:	400a      	ands	r2, r1
 8001be4:	2107      	movs	r1, #7
 8001be6:	4091      	lsls	r1, r2
 8001be8:	000a      	movs	r2, r1
 8001bea:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	2104      	movs	r1, #4
 8001bf0:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001bf2:	40da      	lsrs	r2, r3
 8001bf4:	0013      	movs	r3, r2
}
 8001bf6:	0018      	movs	r0, r3
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	b002      	add	sp, #8
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b084      	sub	sp, #16
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	60f8      	str	r0, [r7, #12]
 8001c06:	60b9      	str	r1, [r7, #8]
 8001c08:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0e:	68ba      	ldr	r2, [r7, #8]
 8001c10:	211f      	movs	r1, #31
 8001c12:	400a      	ands	r2, r1
 8001c14:	210f      	movs	r1, #15
 8001c16:	4091      	lsls	r1, r2
 8001c18:	000a      	movs	r2, r1
 8001c1a:	43d2      	mvns	r2, r2
 8001c1c:	401a      	ands	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	0e9b      	lsrs	r3, r3, #26
 8001c22:	210f      	movs	r1, #15
 8001c24:	4019      	ands	r1, r3
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	201f      	movs	r0, #31
 8001c2a:	4003      	ands	r3, r0
 8001c2c:	4099      	lsls	r1, r3
 8001c2e:	000b      	movs	r3, r1
 8001c30:	431a      	orrs	r2, r3
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c36:	46c0      	nop			; (mov r8, r8)
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	b004      	add	sp, #16
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b082      	sub	sp, #8
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
 8001c46:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	025b      	lsls	r3, r3, #9
 8001c50:	0a5b      	lsrs	r3, r3, #9
 8001c52:	431a      	orrs	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c58:	46c0      	nop			; (mov r8, r8)
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	b002      	add	sp, #8
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	0252      	lsls	r2, r2, #9
 8001c72:	0a52      	lsrs	r2, r2, #9
 8001c74:	43d2      	mvns	r2, r2
 8001c76:	401a      	ands	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c7c:	46c0      	nop			; (mov r8, r8)
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	b002      	add	sp, #8
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	695b      	ldr	r3, [r3, #20]
 8001c94:	68ba      	ldr	r2, [r7, #8]
 8001c96:	0212      	lsls	r2, r2, #8
 8001c98:	43d2      	mvns	r2, r2
 8001c9a:	401a      	ands	r2, r3
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	021b      	lsls	r3, r3, #8
 8001ca0:	6879      	ldr	r1, [r7, #4]
 8001ca2:	400b      	ands	r3, r1
 8001ca4:	4904      	ldr	r1, [pc, #16]	; (8001cb8 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001ca6:	400b      	ands	r3, r1
 8001ca8:	431a      	orrs	r2, r3
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001cae:	46c0      	nop			; (mov r8, r8)
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	b004      	add	sp, #16
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	46c0      	nop			; (mov r8, r8)
 8001cb8:	7fffff00 	.word	0x7fffff00

08001cbc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	4a05      	ldr	r2, [pc, #20]	; (8001ce0 <LL_ADC_EnableInternalRegulator+0x24>)
 8001cca:	4013      	ands	r3, r2
 8001ccc:	2280      	movs	r2, #128	; 0x80
 8001cce:	0552      	lsls	r2, r2, #21
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001cd6:	46c0      	nop			; (mov r8, r8)
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	b002      	add	sp, #8
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	46c0      	nop			; (mov r8, r8)
 8001ce0:	6fffffe8 	.word	0x6fffffe8

08001ce4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689a      	ldr	r2, [r3, #8]
 8001cf0:	2380      	movs	r3, #128	; 0x80
 8001cf2:	055b      	lsls	r3, r3, #21
 8001cf4:	401a      	ands	r2, r3
 8001cf6:	2380      	movs	r3, #128	; 0x80
 8001cf8:	055b      	lsls	r3, r3, #21
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d101      	bne.n	8001d02 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e000      	b.n	8001d04 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	0018      	movs	r0, r3
 8001d06:	46bd      	mov	sp, r7
 8001d08:	b002      	add	sp, #8
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	4a04      	ldr	r2, [pc, #16]	; (8001d2c <LL_ADC_Enable+0x20>)
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001d24:	46c0      	nop			; (mov r8, r8)
 8001d26:	46bd      	mov	sp, r7
 8001d28:	b002      	add	sp, #8
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	7fffffe8 	.word	0x7fffffe8

08001d30 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	4013      	ands	r3, r2
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d101      	bne.n	8001d48 <LL_ADC_IsEnabled+0x18>
 8001d44:	2301      	movs	r3, #1
 8001d46:	e000      	b.n	8001d4a <LL_ADC_IsEnabled+0x1a>
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	0018      	movs	r0, r3
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	b002      	add	sp, #8
 8001d50:	bd80      	pop	{r7, pc}
	...

08001d54 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	4a04      	ldr	r2, [pc, #16]	; (8001d74 <LL_ADC_REG_StartConversion+0x20>)
 8001d62:	4013      	ands	r3, r2
 8001d64:	2204      	movs	r2, #4
 8001d66:	431a      	orrs	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001d6c:	46c0      	nop			; (mov r8, r8)
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	b002      	add	sp, #8
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	7fffffe8 	.word	0x7fffffe8

08001d78 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	2204      	movs	r2, #4
 8001d86:	4013      	ands	r3, r2
 8001d88:	2b04      	cmp	r3, #4
 8001d8a:	d101      	bne.n	8001d90 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e000      	b.n	8001d92 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	0018      	movs	r0, r3
 8001d94:	46bd      	mov	sp, r7
 8001d96:	b002      	add	sp, #8
 8001d98:	bd80      	pop	{r7, pc}
	...

08001d9c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b088      	sub	sp, #32
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001da4:	231f      	movs	r3, #31
 8001da6:	18fb      	adds	r3, r7, r3
 8001da8:	2200      	movs	r2, #0
 8001daa:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001dac:	2300      	movs	r3, #0
 8001dae:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e1a0      	b.n	8002104 <HAL_ADC_Init+0x368>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d10a      	bne.n	8001de0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	0018      	movs	r0, r3
 8001dce:	f7ff fd5f 	bl	8001890 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2254      	movs	r2, #84	; 0x54
 8001ddc:	2100      	movs	r1, #0
 8001dde:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	0018      	movs	r0, r3
 8001de6:	f7ff ff7d 	bl	8001ce4 <LL_ADC_IsInternalRegulatorEnabled>
 8001dea:	1e03      	subs	r3, r0, #0
 8001dec:	d114      	bne.n	8001e18 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	0018      	movs	r0, r3
 8001df4:	f7ff ff62 	bl	8001cbc <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001df8:	4bc4      	ldr	r3, [pc, #784]	; (800210c <HAL_ADC_Init+0x370>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	49c4      	ldr	r1, [pc, #784]	; (8002110 <HAL_ADC_Init+0x374>)
 8001dfe:	0018      	movs	r0, r3
 8001e00:	f7fe f982 	bl	8000108 <__udivsi3>
 8001e04:	0003      	movs	r3, r0
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001e0a:	e002      	b.n	8001e12 <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d1f9      	bne.n	8001e0c <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	f7ff ff61 	bl	8001ce4 <LL_ADC_IsInternalRegulatorEnabled>
 8001e22:	1e03      	subs	r3, r0, #0
 8001e24:	d10f      	bne.n	8001e46 <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2a:	2210      	movs	r2, #16
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e36:	2201      	movs	r2, #1
 8001e38:	431a      	orrs	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001e3e:	231f      	movs	r3, #31
 8001e40:	18fb      	adds	r3, r7, r3
 8001e42:	2201      	movs	r2, #1
 8001e44:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	0018      	movs	r0, r3
 8001e4c:	f7ff ff94 	bl	8001d78 <LL_ADC_REG_IsConversionOngoing>
 8001e50:	0003      	movs	r3, r0
 8001e52:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e58:	2210      	movs	r2, #16
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	d000      	beq.n	8001e60 <HAL_ADC_Init+0xc4>
 8001e5e:	e144      	b.n	80020ea <HAL_ADC_Init+0x34e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d000      	beq.n	8001e68 <HAL_ADC_Init+0xcc>
 8001e66:	e140      	b.n	80020ea <HAL_ADC_Init+0x34e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e6c:	4aa9      	ldr	r2, [pc, #676]	; (8002114 <HAL_ADC_Init+0x378>)
 8001e6e:	4013      	ands	r3, r2
 8001e70:	2202      	movs	r2, #2
 8001e72:	431a      	orrs	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	f7ff ff57 	bl	8001d30 <LL_ADC_IsEnabled>
 8001e82:	1e03      	subs	r3, r0, #0
 8001e84:	d000      	beq.n	8001e88 <HAL_ADC_Init+0xec>
 8001e86:	e0ad      	b.n	8001fe4 <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	7e1b      	ldrb	r3, [r3, #24]
 8001e90:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001e92:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	7e5b      	ldrb	r3, [r3, #25]
 8001e98:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001e9a:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	7e9b      	ldrb	r3, [r3, #26]
 8001ea0:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001ea2:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d002      	beq.n	8001eb2 <HAL_ADC_Init+0x116>
 8001eac:	2380      	movs	r3, #128	; 0x80
 8001eae:	015b      	lsls	r3, r3, #5
 8001eb0:	e000      	b.n	8001eb4 <HAL_ADC_Init+0x118>
 8001eb2:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001eb4:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001eba:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	da04      	bge.n	8001ece <HAL_ADC_Init+0x132>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	085b      	lsrs	r3, r3, #1
 8001ecc:	e001      	b.n	8001ed2 <HAL_ADC_Init+0x136>
 8001ece:	2380      	movs	r3, #128	; 0x80
 8001ed0:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8001ed2:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	212c      	movs	r1, #44	; 0x2c
 8001ed8:	5c5b      	ldrb	r3, [r3, r1]
 8001eda:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001edc:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2220      	movs	r2, #32
 8001ee8:	5c9b      	ldrb	r3, [r3, r2]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d115      	bne.n	8001f1a <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	7e9b      	ldrb	r3, [r3, #26]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d105      	bne.n	8001f02 <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	2280      	movs	r2, #128	; 0x80
 8001efa:	0252      	lsls	r2, r2, #9
 8001efc:	4313      	orrs	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
 8001f00:	e00b      	b.n	8001f1a <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f06:	2220      	movs	r2, #32
 8001f08:	431a      	orrs	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f12:	2201      	movs	r2, #1
 8001f14:	431a      	orrs	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00a      	beq.n	8001f38 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f26:	23e0      	movs	r3, #224	; 0xe0
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001f30:	4313      	orrs	r3, r2
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	4a76      	ldr	r2, [pc, #472]	; (8002118 <HAL_ADC_Init+0x37c>)
 8001f40:	4013      	ands	r3, r2
 8001f42:	0019      	movs	r1, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	0f9b      	lsrs	r3, r3, #30
 8001f54:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	697a      	ldr	r2, [r7, #20]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	223c      	movs	r2, #60	; 0x3c
 8001f66:	5c9b      	ldrb	r3, [r3, r2]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d111      	bne.n	8001f90 <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	0f9b      	lsrs	r3, r3, #30
 8001f72:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001f78:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001f7e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001f84:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	4a61      	ldr	r2, [pc, #388]	; (800211c <HAL_ADC_Init+0x380>)
 8001f98:	4013      	ands	r3, r2
 8001f9a:	0019      	movs	r1, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	697a      	ldr	r2, [r7, #20]
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685a      	ldr	r2, [r3, #4]
 8001faa:	23c0      	movs	r3, #192	; 0xc0
 8001fac:	061b      	lsls	r3, r3, #24
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d018      	beq.n	8001fe4 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001fb6:	2380      	movs	r3, #128	; 0x80
 8001fb8:	05db      	lsls	r3, r3, #23
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d012      	beq.n	8001fe4 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001fc2:	2380      	movs	r3, #128	; 0x80
 8001fc4:	061b      	lsls	r3, r3, #24
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d00c      	beq.n	8001fe4 <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001fca:	4b55      	ldr	r3, [pc, #340]	; (8002120 <HAL_ADC_Init+0x384>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a55      	ldr	r2, [pc, #340]	; (8002124 <HAL_ADC_Init+0x388>)
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	0019      	movs	r1, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685a      	ldr	r2, [r3, #4]
 8001fd8:	23f0      	movs	r3, #240	; 0xf0
 8001fda:	039b      	lsls	r3, r3, #14
 8001fdc:	401a      	ands	r2, r3
 8001fde:	4b50      	ldr	r3, [pc, #320]	; (8002120 <HAL_ADC_Init+0x384>)
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6818      	ldr	r0, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fec:	001a      	movs	r2, r3
 8001fee:	2100      	movs	r1, #0
 8001ff0:	f7ff fdd1 	bl	8001b96 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6818      	ldr	r0, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ffc:	494a      	ldr	r1, [pc, #296]	; (8002128 <HAL_ADC_Init+0x38c>)
 8001ffe:	001a      	movs	r2, r3
 8002000:	f7ff fdc9 	bl	8001b96 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d109      	bne.n	8002020 <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2110      	movs	r1, #16
 8002018:	4249      	negs	r1, r1
 800201a:	430a      	orrs	r2, r1
 800201c:	629a      	str	r2, [r3, #40]	; 0x28
 800201e:	e03a      	b.n	8002096 <HAL_ADC_Init+0x2fa>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	691a      	ldr	r2, [r3, #16]
 8002024:	2380      	movs	r3, #128	; 0x80
 8002026:	039b      	lsls	r3, r3, #14
 8002028:	429a      	cmp	r2, r3
 800202a:	d134      	bne.n	8002096 <HAL_ADC_Init+0x2fa>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 800202c:	2300      	movs	r3, #0
 800202e:	613b      	str	r3, [r7, #16]
 8002030:	e00c      	b.n	800204c <HAL_ADC_Init+0x2b0>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	40da      	lsrs	r2, r3
 800203c:	0013      	movs	r3, r2
 800203e:	220f      	movs	r2, #15
 8002040:	4013      	ands	r3, r2
 8002042:	2b0f      	cmp	r3, #15
 8002044:	d006      	beq.n	8002054 <HAL_ADC_Init+0x2b8>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	3301      	adds	r3, #1
 800204a:	613b      	str	r3, [r7, #16]
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	2b07      	cmp	r3, #7
 8002050:	d9ef      	bls.n	8002032 <HAL_ADC_Init+0x296>
 8002052:	e000      	b.n	8002056 <HAL_ADC_Init+0x2ba>
            ADC_CHSELR_SQ1)
        {
          break;
 8002054:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d109      	bne.n	8002070 <HAL_ADC_Init+0x2d4>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2110      	movs	r1, #16
 8002068:	4249      	negs	r1, r1
 800206a:	430a      	orrs	r2, r1
 800206c:	629a      	str	r2, [r3, #40]	; 0x28
 800206e:	e012      	b.n	8002096 <HAL_ADC_Init+0x2fa>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	3b01      	subs	r3, #1
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	221c      	movs	r2, #28
 8002080:	4013      	ands	r3, r2
 8002082:	2210      	movs	r2, #16
 8002084:	4252      	negs	r2, r2
 8002086:	409a      	lsls	r2, r3
 8002088:	0011      	movs	r1, r2
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	430a      	orrs	r2, r1
 8002094:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2100      	movs	r1, #0
 800209c:	0018      	movs	r0, r3
 800209e:	f7ff fd97 	bl	8001bd0 <LL_ADC_GetSamplingTimeCommonChannels>
 80020a2:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d10b      	bne.n	80020c4 <HAL_ADC_Init+0x328>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b6:	2203      	movs	r2, #3
 80020b8:	4393      	bics	r3, r2
 80020ba:	2201      	movs	r2, #1
 80020bc:	431a      	orrs	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80020c2:	e01c      	b.n	80020fe <HAL_ADC_Init+0x362>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c8:	2212      	movs	r2, #18
 80020ca:	4393      	bics	r3, r2
 80020cc:	2210      	movs	r2, #16
 80020ce:	431a      	orrs	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d8:	2201      	movs	r2, #1
 80020da:	431a      	orrs	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80020e0:	231f      	movs	r3, #31
 80020e2:	18fb      	adds	r3, r7, r3
 80020e4:	2201      	movs	r2, #1
 80020e6:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80020e8:	e009      	b.n	80020fe <HAL_ADC_Init+0x362>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ee:	2210      	movs	r2, #16
 80020f0:	431a      	orrs	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80020f6:	231f      	movs	r3, #31
 80020f8:	18fb      	adds	r3, r7, r3
 80020fa:	2201      	movs	r2, #1
 80020fc:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80020fe:	231f      	movs	r3, #31
 8002100:	18fb      	adds	r3, r7, r3
 8002102:	781b      	ldrb	r3, [r3, #0]
}
 8002104:	0018      	movs	r0, r3
 8002106:	46bd      	mov	sp, r7
 8002108:	b008      	add	sp, #32
 800210a:	bd80      	pop	{r7, pc}
 800210c:	2000001c 	.word	0x2000001c
 8002110:	00030d40 	.word	0x00030d40
 8002114:	fffffefd 	.word	0xfffffefd
 8002118:	fffe0201 	.word	0xfffe0201
 800211c:	1ffffc02 	.word	0x1ffffc02
 8002120:	40012708 	.word	0x40012708
 8002124:	ffc3ffff 	.word	0xffc3ffff
 8002128:	7fffff04 	.word	0x7fffff04

0800212c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800212c:	b5b0      	push	{r4, r5, r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	0018      	movs	r0, r3
 800213a:	f7ff fe1d 	bl	8001d78 <LL_ADC_REG_IsConversionOngoing>
 800213e:	1e03      	subs	r3, r0, #0
 8002140:	d135      	bne.n	80021ae <HAL_ADC_Start+0x82>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2254      	movs	r2, #84	; 0x54
 8002146:	5c9b      	ldrb	r3, [r3, r2]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d101      	bne.n	8002150 <HAL_ADC_Start+0x24>
 800214c:	2302      	movs	r3, #2
 800214e:	e035      	b.n	80021bc <HAL_ADC_Start+0x90>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2254      	movs	r2, #84	; 0x54
 8002154:	2101      	movs	r1, #1
 8002156:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002158:	250f      	movs	r5, #15
 800215a:	197c      	adds	r4, r7, r5
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	0018      	movs	r0, r3
 8002160:	f000 fa14 	bl	800258c <ADC_Enable>
 8002164:	0003      	movs	r3, r0
 8002166:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002168:	197b      	adds	r3, r7, r5
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d119      	bne.n	80021a4 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002174:	4a13      	ldr	r2, [pc, #76]	; (80021c4 <HAL_ADC_Start+0x98>)
 8002176:	4013      	ands	r3, r2
 8002178:	2280      	movs	r2, #128	; 0x80
 800217a:	0052      	lsls	r2, r2, #1
 800217c:	431a      	orrs	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	221c      	movs	r2, #28
 800218e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2254      	movs	r2, #84	; 0x54
 8002194:	2100      	movs	r1, #0
 8002196:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	0018      	movs	r0, r3
 800219e:	f7ff fdd9 	bl	8001d54 <LL_ADC_REG_StartConversion>
 80021a2:	e008      	b.n	80021b6 <HAL_ADC_Start+0x8a>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2254      	movs	r2, #84	; 0x54
 80021a8:	2100      	movs	r1, #0
 80021aa:	5499      	strb	r1, [r3, r2]
 80021ac:	e003      	b.n	80021b6 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80021ae:	230f      	movs	r3, #15
 80021b0:	18fb      	adds	r3, r7, r3
 80021b2:	2202      	movs	r2, #2
 80021b4:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80021b6:	230f      	movs	r3, #15
 80021b8:	18fb      	adds	r3, r7, r3
 80021ba:	781b      	ldrb	r3, [r3, #0]
}
 80021bc:	0018      	movs	r0, r3
 80021be:	46bd      	mov	sp, r7
 80021c0:	b004      	add	sp, #16
 80021c2:	bdb0      	pop	{r4, r5, r7, pc}
 80021c4:	fffff0fe 	.word	0xfffff0fe

080021c8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80021d6:	0018      	movs	r0, r3
 80021d8:	46bd      	mov	sp, r7
 80021da:	b002      	add	sp, #8
 80021dc:	bd80      	pop	{r7, pc}
	...

080021e0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021ea:	2317      	movs	r3, #23
 80021ec:	18fb      	adds	r3, r7, r3
 80021ee:	2200      	movs	r2, #0
 80021f0:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80021f2:	2300      	movs	r3, #0
 80021f4:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2254      	movs	r2, #84	; 0x54
 80021fa:	5c9b      	ldrb	r3, [r3, r2]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d101      	bne.n	8002204 <HAL_ADC_ConfigChannel+0x24>
 8002200:	2302      	movs	r3, #2
 8002202:	e1be      	b.n	8002582 <HAL_ADC_ConfigChannel+0x3a2>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2254      	movs	r2, #84	; 0x54
 8002208:	2101      	movs	r1, #1
 800220a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	0018      	movs	r0, r3
 8002212:	f7ff fdb1 	bl	8001d78 <LL_ADC_REG_IsConversionOngoing>
 8002216:	1e03      	subs	r3, r0, #0
 8002218:	d000      	beq.n	800221c <HAL_ADC_ConfigChannel+0x3c>
 800221a:	e1a1      	b.n	8002560 <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	2b02      	cmp	r3, #2
 8002222:	d100      	bne.n	8002226 <HAL_ADC_ConfigChannel+0x46>
 8002224:	e152      	b.n	80024cc <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	691a      	ldr	r2, [r3, #16]
 800222a:	2380      	movs	r3, #128	; 0x80
 800222c:	061b      	lsls	r3, r3, #24
 800222e:	429a      	cmp	r2, r3
 8002230:	d004      	beq.n	800223c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002236:	4ac2      	ldr	r2, [pc, #776]	; (8002540 <HAL_ADC_ConfigChannel+0x360>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d108      	bne.n	800224e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	0019      	movs	r1, r3
 8002246:	0010      	movs	r0, r2
 8002248:	f7ff fcf9 	bl	8001c3e <LL_ADC_REG_SetSequencerChAdd>
 800224c:	e0ed      	b.n	800242a <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	211f      	movs	r1, #31
 8002258:	400b      	ands	r3, r1
 800225a:	210f      	movs	r1, #15
 800225c:	4099      	lsls	r1, r3
 800225e:	000b      	movs	r3, r1
 8002260:	43db      	mvns	r3, r3
 8002262:	4013      	ands	r3, r2
 8002264:	0019      	movs	r1, r3
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	025b      	lsls	r3, r3, #9
 800226c:	0a5b      	lsrs	r3, r3, #9
 800226e:	d105      	bne.n	800227c <HAL_ADC_ConfigChannel+0x9c>
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	0e9b      	lsrs	r3, r3, #26
 8002276:	221f      	movs	r2, #31
 8002278:	4013      	ands	r3, r2
 800227a:	e0bc      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x216>
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2201      	movs	r2, #1
 8002282:	4013      	ands	r3, r2
 8002284:	d000      	beq.n	8002288 <HAL_ADC_ConfigChannel+0xa8>
 8002286:	e0b5      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x214>
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2202      	movs	r2, #2
 800228e:	4013      	ands	r3, r2
 8002290:	d000      	beq.n	8002294 <HAL_ADC_ConfigChannel+0xb4>
 8002292:	e0ad      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x210>
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2204      	movs	r2, #4
 800229a:	4013      	ands	r3, r2
 800229c:	d000      	beq.n	80022a0 <HAL_ADC_ConfigChannel+0xc0>
 800229e:	e0a5      	b.n	80023ec <HAL_ADC_ConfigChannel+0x20c>
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2208      	movs	r2, #8
 80022a6:	4013      	ands	r3, r2
 80022a8:	d000      	beq.n	80022ac <HAL_ADC_ConfigChannel+0xcc>
 80022aa:	e09d      	b.n	80023e8 <HAL_ADC_ConfigChannel+0x208>
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2210      	movs	r2, #16
 80022b2:	4013      	ands	r3, r2
 80022b4:	d000      	beq.n	80022b8 <HAL_ADC_ConfigChannel+0xd8>
 80022b6:	e095      	b.n	80023e4 <HAL_ADC_ConfigChannel+0x204>
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2220      	movs	r2, #32
 80022be:	4013      	ands	r3, r2
 80022c0:	d000      	beq.n	80022c4 <HAL_ADC_ConfigChannel+0xe4>
 80022c2:	e08d      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x200>
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2240      	movs	r2, #64	; 0x40
 80022ca:	4013      	ands	r3, r2
 80022cc:	d000      	beq.n	80022d0 <HAL_ADC_ConfigChannel+0xf0>
 80022ce:	e085      	b.n	80023dc <HAL_ADC_ConfigChannel+0x1fc>
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2280      	movs	r2, #128	; 0x80
 80022d6:	4013      	ands	r3, r2
 80022d8:	d000      	beq.n	80022dc <HAL_ADC_ConfigChannel+0xfc>
 80022da:	e07d      	b.n	80023d8 <HAL_ADC_ConfigChannel+0x1f8>
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	2380      	movs	r3, #128	; 0x80
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	4013      	ands	r3, r2
 80022e6:	d000      	beq.n	80022ea <HAL_ADC_ConfigChannel+0x10a>
 80022e8:	e074      	b.n	80023d4 <HAL_ADC_ConfigChannel+0x1f4>
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	2380      	movs	r3, #128	; 0x80
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	4013      	ands	r3, r2
 80022f4:	d000      	beq.n	80022f8 <HAL_ADC_ConfigChannel+0x118>
 80022f6:	e06b      	b.n	80023d0 <HAL_ADC_ConfigChannel+0x1f0>
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	2380      	movs	r3, #128	; 0x80
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	4013      	ands	r3, r2
 8002302:	d000      	beq.n	8002306 <HAL_ADC_ConfigChannel+0x126>
 8002304:	e062      	b.n	80023cc <HAL_ADC_ConfigChannel+0x1ec>
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	2380      	movs	r3, #128	; 0x80
 800230c:	011b      	lsls	r3, r3, #4
 800230e:	4013      	ands	r3, r2
 8002310:	d000      	beq.n	8002314 <HAL_ADC_ConfigChannel+0x134>
 8002312:	e059      	b.n	80023c8 <HAL_ADC_ConfigChannel+0x1e8>
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	2380      	movs	r3, #128	; 0x80
 800231a:	015b      	lsls	r3, r3, #5
 800231c:	4013      	ands	r3, r2
 800231e:	d151      	bne.n	80023c4 <HAL_ADC_ConfigChannel+0x1e4>
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	2380      	movs	r3, #128	; 0x80
 8002326:	019b      	lsls	r3, r3, #6
 8002328:	4013      	ands	r3, r2
 800232a:	d149      	bne.n	80023c0 <HAL_ADC_ConfigChannel+0x1e0>
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	2380      	movs	r3, #128	; 0x80
 8002332:	01db      	lsls	r3, r3, #7
 8002334:	4013      	ands	r3, r2
 8002336:	d141      	bne.n	80023bc <HAL_ADC_ConfigChannel+0x1dc>
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	2380      	movs	r3, #128	; 0x80
 800233e:	021b      	lsls	r3, r3, #8
 8002340:	4013      	ands	r3, r2
 8002342:	d139      	bne.n	80023b8 <HAL_ADC_ConfigChannel+0x1d8>
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	2380      	movs	r3, #128	; 0x80
 800234a:	025b      	lsls	r3, r3, #9
 800234c:	4013      	ands	r3, r2
 800234e:	d131      	bne.n	80023b4 <HAL_ADC_ConfigChannel+0x1d4>
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	2380      	movs	r3, #128	; 0x80
 8002356:	029b      	lsls	r3, r3, #10
 8002358:	4013      	ands	r3, r2
 800235a:	d129      	bne.n	80023b0 <HAL_ADC_ConfigChannel+0x1d0>
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	2380      	movs	r3, #128	; 0x80
 8002362:	02db      	lsls	r3, r3, #11
 8002364:	4013      	ands	r3, r2
 8002366:	d121      	bne.n	80023ac <HAL_ADC_ConfigChannel+0x1cc>
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	2380      	movs	r3, #128	; 0x80
 800236e:	031b      	lsls	r3, r3, #12
 8002370:	4013      	ands	r3, r2
 8002372:	d119      	bne.n	80023a8 <HAL_ADC_ConfigChannel+0x1c8>
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	2380      	movs	r3, #128	; 0x80
 800237a:	035b      	lsls	r3, r3, #13
 800237c:	4013      	ands	r3, r2
 800237e:	d111      	bne.n	80023a4 <HAL_ADC_ConfigChannel+0x1c4>
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	2380      	movs	r3, #128	; 0x80
 8002386:	039b      	lsls	r3, r3, #14
 8002388:	4013      	ands	r3, r2
 800238a:	d109      	bne.n	80023a0 <HAL_ADC_ConfigChannel+0x1c0>
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	2380      	movs	r3, #128	; 0x80
 8002392:	03db      	lsls	r3, r3, #15
 8002394:	4013      	ands	r3, r2
 8002396:	d001      	beq.n	800239c <HAL_ADC_ConfigChannel+0x1bc>
 8002398:	2316      	movs	r3, #22
 800239a:	e02c      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x216>
 800239c:	2300      	movs	r3, #0
 800239e:	e02a      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x216>
 80023a0:	2315      	movs	r3, #21
 80023a2:	e028      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x216>
 80023a4:	2314      	movs	r3, #20
 80023a6:	e026      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x216>
 80023a8:	2313      	movs	r3, #19
 80023aa:	e024      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x216>
 80023ac:	2312      	movs	r3, #18
 80023ae:	e022      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x216>
 80023b0:	2311      	movs	r3, #17
 80023b2:	e020      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x216>
 80023b4:	2310      	movs	r3, #16
 80023b6:	e01e      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x216>
 80023b8:	230f      	movs	r3, #15
 80023ba:	e01c      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x216>
 80023bc:	230e      	movs	r3, #14
 80023be:	e01a      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x216>
 80023c0:	230d      	movs	r3, #13
 80023c2:	e018      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x216>
 80023c4:	230c      	movs	r3, #12
 80023c6:	e016      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x216>
 80023c8:	230b      	movs	r3, #11
 80023ca:	e014      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x216>
 80023cc:	230a      	movs	r3, #10
 80023ce:	e012      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x216>
 80023d0:	2309      	movs	r3, #9
 80023d2:	e010      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x216>
 80023d4:	2308      	movs	r3, #8
 80023d6:	e00e      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x216>
 80023d8:	2307      	movs	r3, #7
 80023da:	e00c      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x216>
 80023dc:	2306      	movs	r3, #6
 80023de:	e00a      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x216>
 80023e0:	2305      	movs	r3, #5
 80023e2:	e008      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x216>
 80023e4:	2304      	movs	r3, #4
 80023e6:	e006      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x216>
 80023e8:	2303      	movs	r3, #3
 80023ea:	e004      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x216>
 80023ec:	2302      	movs	r3, #2
 80023ee:	e002      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x216>
 80023f0:	2301      	movs	r3, #1
 80023f2:	e000      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x216>
 80023f4:	2300      	movs	r3, #0
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	6852      	ldr	r2, [r2, #4]
 80023fa:	201f      	movs	r0, #31
 80023fc:	4002      	ands	r2, r0
 80023fe:	4093      	lsls	r3, r2
 8002400:	000a      	movs	r2, r1
 8002402:	431a      	orrs	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	089b      	lsrs	r3, r3, #2
 800240e:	1c5a      	adds	r2, r3, #1
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	69db      	ldr	r3, [r3, #28]
 8002414:	429a      	cmp	r2, r3
 8002416:	d808      	bhi.n	800242a <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6818      	ldr	r0, [r3, #0]
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	6859      	ldr	r1, [r3, #4]
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	001a      	movs	r2, r3
 8002426:	f7ff fbea 	bl	8001bfe <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6818      	ldr	r0, [r3, #0]
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	6819      	ldr	r1, [r3, #0]
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	001a      	movs	r2, r3
 8002438:	f7ff fc24 	bl	8001c84 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	db00      	blt.n	8002446 <HAL_ADC_ConfigChannel+0x266>
 8002444:	e096      	b.n	8002574 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002446:	4b3f      	ldr	r3, [pc, #252]	; (8002544 <HAL_ADC_ConfigChannel+0x364>)
 8002448:	0018      	movs	r0, r3
 800244a:	f7ff fb97 	bl	8001b7c <LL_ADC_GetCommonPathInternalCh>
 800244e:	0003      	movs	r3, r0
 8002450:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a3c      	ldr	r2, [pc, #240]	; (8002548 <HAL_ADC_ConfigChannel+0x368>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d123      	bne.n	80024a4 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	2380      	movs	r3, #128	; 0x80
 8002460:	041b      	lsls	r3, r3, #16
 8002462:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002464:	d11e      	bne.n	80024a4 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	2280      	movs	r2, #128	; 0x80
 800246a:	0412      	lsls	r2, r2, #16
 800246c:	4313      	orrs	r3, r2
 800246e:	4a35      	ldr	r2, [pc, #212]	; (8002544 <HAL_ADC_ConfigChannel+0x364>)
 8002470:	0019      	movs	r1, r3
 8002472:	0010      	movs	r0, r2
 8002474:	f7ff fb6e 	bl	8001b54 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8002478:	4b34      	ldr	r3, [pc, #208]	; (800254c <HAL_ADC_ConfigChannel+0x36c>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4934      	ldr	r1, [pc, #208]	; (8002550 <HAL_ADC_ConfigChannel+0x370>)
 800247e:	0018      	movs	r0, r3
 8002480:	f7fd fe42 	bl	8000108 <__udivsi3>
 8002484:	0003      	movs	r3, r0
 8002486:	001a      	movs	r2, r3
 8002488:	0013      	movs	r3, r2
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	189b      	adds	r3, r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	3301      	adds	r3, #1
 8002492:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002494:	e002      	b.n	800249c <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	3b01      	subs	r3, #1
 800249a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1f9      	bne.n	8002496 <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80024a2:	e067      	b.n	8002574 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a2a      	ldr	r2, [pc, #168]	; (8002554 <HAL_ADC_ConfigChannel+0x374>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d162      	bne.n	8002574 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	2380      	movs	r3, #128	; 0x80
 80024b2:	03db      	lsls	r3, r3, #15
 80024b4:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80024b6:	d15d      	bne.n	8002574 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	2280      	movs	r2, #128	; 0x80
 80024bc:	03d2      	lsls	r2, r2, #15
 80024be:	4313      	orrs	r3, r2
 80024c0:	4a20      	ldr	r2, [pc, #128]	; (8002544 <HAL_ADC_ConfigChannel+0x364>)
 80024c2:	0019      	movs	r1, r3
 80024c4:	0010      	movs	r0, r2
 80024c6:	f7ff fb45 	bl	8001b54 <LL_ADC_SetCommonPathInternalCh>
 80024ca:	e053      	b.n	8002574 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	691a      	ldr	r2, [r3, #16]
 80024d0:	2380      	movs	r3, #128	; 0x80
 80024d2:	061b      	lsls	r3, r3, #24
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d004      	beq.n	80024e2 <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80024dc:	4a18      	ldr	r2, [pc, #96]	; (8002540 <HAL_ADC_ConfigChannel+0x360>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d107      	bne.n	80024f2 <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	0019      	movs	r1, r3
 80024ec:	0010      	movs	r0, r2
 80024ee:	f7ff fbb7 	bl	8001c60 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	da3c      	bge.n	8002574 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024fa:	4b12      	ldr	r3, [pc, #72]	; (8002544 <HAL_ADC_ConfigChannel+0x364>)
 80024fc:	0018      	movs	r0, r3
 80024fe:	f7ff fb3d 	bl	8001b7c <LL_ADC_GetCommonPathInternalCh>
 8002502:	0003      	movs	r3, r0
 8002504:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a0f      	ldr	r2, [pc, #60]	; (8002548 <HAL_ADC_ConfigChannel+0x368>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d108      	bne.n	8002522 <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	4a11      	ldr	r2, [pc, #68]	; (8002558 <HAL_ADC_ConfigChannel+0x378>)
 8002514:	4013      	ands	r3, r2
 8002516:	4a0b      	ldr	r2, [pc, #44]	; (8002544 <HAL_ADC_ConfigChannel+0x364>)
 8002518:	0019      	movs	r1, r3
 800251a:	0010      	movs	r0, r2
 800251c:	f7ff fb1a 	bl	8001b54 <LL_ADC_SetCommonPathInternalCh>
 8002520:	e028      	b.n	8002574 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a0b      	ldr	r2, [pc, #44]	; (8002554 <HAL_ADC_ConfigChannel+0x374>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d123      	bne.n	8002574 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	4a0b      	ldr	r2, [pc, #44]	; (800255c <HAL_ADC_ConfigChannel+0x37c>)
 8002530:	4013      	ands	r3, r2
 8002532:	4a04      	ldr	r2, [pc, #16]	; (8002544 <HAL_ADC_ConfigChannel+0x364>)
 8002534:	0019      	movs	r1, r3
 8002536:	0010      	movs	r0, r2
 8002538:	f7ff fb0c 	bl	8001b54 <LL_ADC_SetCommonPathInternalCh>
 800253c:	e01a      	b.n	8002574 <HAL_ADC_ConfigChannel+0x394>
 800253e:	46c0      	nop			; (mov r8, r8)
 8002540:	80000004 	.word	0x80000004
 8002544:	40012708 	.word	0x40012708
 8002548:	a4000200 	.word	0xa4000200
 800254c:	2000001c 	.word	0x2000001c
 8002550:	00030d40 	.word	0x00030d40
 8002554:	a8000400 	.word	0xa8000400
 8002558:	ff7fffff 	.word	0xff7fffff
 800255c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002564:	2220      	movs	r2, #32
 8002566:	431a      	orrs	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800256c:	2317      	movs	r3, #23
 800256e:	18fb      	adds	r3, r7, r3
 8002570:	2201      	movs	r2, #1
 8002572:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2254      	movs	r2, #84	; 0x54
 8002578:	2100      	movs	r1, #0
 800257a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 800257c:	2317      	movs	r3, #23
 800257e:	18fb      	adds	r3, r7, r3
 8002580:	781b      	ldrb	r3, [r3, #0]
}
 8002582:	0018      	movs	r0, r3
 8002584:	46bd      	mov	sp, r7
 8002586:	b006      	add	sp, #24
 8002588:	bd80      	pop	{r7, pc}
 800258a:	46c0      	nop			; (mov r8, r8)

0800258c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002594:	2300      	movs	r3, #0
 8002596:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	0018      	movs	r0, r3
 800259e:	f7ff fbc7 	bl	8001d30 <LL_ADC_IsEnabled>
 80025a2:	1e03      	subs	r3, r0, #0
 80025a4:	d162      	bne.n	800266c <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	4a32      	ldr	r2, [pc, #200]	; (8002678 <ADC_Enable+0xec>)
 80025ae:	4013      	ands	r3, r2
 80025b0:	d00d      	beq.n	80025ce <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b6:	2210      	movs	r2, #16
 80025b8:	431a      	orrs	r2, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c2:	2201      	movs	r2, #1
 80025c4:	431a      	orrs	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e04f      	b.n	800266e <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	0018      	movs	r0, r3
 80025d4:	f7ff fb9a 	bl	8001d0c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80025d8:	4b28      	ldr	r3, [pc, #160]	; (800267c <ADC_Enable+0xf0>)
 80025da:	0018      	movs	r0, r3
 80025dc:	f7ff face 	bl	8001b7c <LL_ADC_GetCommonPathInternalCh>
 80025e0:	0002      	movs	r2, r0
 80025e2:	2380      	movs	r3, #128	; 0x80
 80025e4:	041b      	lsls	r3, r3, #16
 80025e6:	4013      	ands	r3, r2
 80025e8:	d00f      	beq.n	800260a <ADC_Enable+0x7e>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 80025ea:	4b25      	ldr	r3, [pc, #148]	; (8002680 <ADC_Enable+0xf4>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4925      	ldr	r1, [pc, #148]	; (8002684 <ADC_Enable+0xf8>)
 80025f0:	0018      	movs	r0, r3
 80025f2:	f7fd fd89 	bl	8000108 <__udivsi3>
 80025f6:	0003      	movs	r3, r0
 80025f8:	3301      	adds	r3, #1
 80025fa:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80025fc:	e002      	b.n	8002604 <ADC_Enable+0x78>
      {
        wait_loop_index--;
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	3b01      	subs	r3, #1
 8002602:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1f9      	bne.n	80025fe <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	7e5b      	ldrb	r3, [r3, #25]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d02c      	beq.n	800266c <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002612:	f7ff fa67 	bl	8001ae4 <HAL_GetTick>
 8002616:	0003      	movs	r3, r0
 8002618:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800261a:	e020      	b.n	800265e <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	0018      	movs	r0, r3
 8002622:	f7ff fb85 	bl	8001d30 <LL_ADC_IsEnabled>
 8002626:	1e03      	subs	r3, r0, #0
 8002628:	d104      	bne.n	8002634 <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	0018      	movs	r0, r3
 8002630:	f7ff fb6c 	bl	8001d0c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002634:	f7ff fa56 	bl	8001ae4 <HAL_GetTick>
 8002638:	0002      	movs	r2, r0
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d90d      	bls.n	800265e <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002646:	2210      	movs	r2, #16
 8002648:	431a      	orrs	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002652:	2201      	movs	r2, #1
 8002654:	431a      	orrs	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e007      	b.n	800266e <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2201      	movs	r2, #1
 8002666:	4013      	ands	r3, r2
 8002668:	2b01      	cmp	r3, #1
 800266a:	d1d7      	bne.n	800261c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	0018      	movs	r0, r3
 8002670:	46bd      	mov	sp, r7
 8002672:	b004      	add	sp, #16
 8002674:	bd80      	pop	{r7, pc}
 8002676:	46c0      	nop			; (mov r8, r8)
 8002678:	80000017 	.word	0x80000017
 800267c:	40012708 	.word	0x40012708
 8002680:	2000001c 	.word	0x2000001c
 8002684:	00030d40 	.word	0x00030d40

08002688 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002688:	b590      	push	{r4, r7, lr}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	0002      	movs	r2, r0
 8002690:	6039      	str	r1, [r7, #0]
 8002692:	1dfb      	adds	r3, r7, #7
 8002694:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002696:	1dfb      	adds	r3, r7, #7
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	2b7f      	cmp	r3, #127	; 0x7f
 800269c:	d828      	bhi.n	80026f0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800269e:	4a2f      	ldr	r2, [pc, #188]	; (800275c <__NVIC_SetPriority+0xd4>)
 80026a0:	1dfb      	adds	r3, r7, #7
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	b25b      	sxtb	r3, r3
 80026a6:	089b      	lsrs	r3, r3, #2
 80026a8:	33c0      	adds	r3, #192	; 0xc0
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	589b      	ldr	r3, [r3, r2]
 80026ae:	1dfa      	adds	r2, r7, #7
 80026b0:	7812      	ldrb	r2, [r2, #0]
 80026b2:	0011      	movs	r1, r2
 80026b4:	2203      	movs	r2, #3
 80026b6:	400a      	ands	r2, r1
 80026b8:	00d2      	lsls	r2, r2, #3
 80026ba:	21ff      	movs	r1, #255	; 0xff
 80026bc:	4091      	lsls	r1, r2
 80026be:	000a      	movs	r2, r1
 80026c0:	43d2      	mvns	r2, r2
 80026c2:	401a      	ands	r2, r3
 80026c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	019b      	lsls	r3, r3, #6
 80026ca:	22ff      	movs	r2, #255	; 0xff
 80026cc:	401a      	ands	r2, r3
 80026ce:	1dfb      	adds	r3, r7, #7
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	0018      	movs	r0, r3
 80026d4:	2303      	movs	r3, #3
 80026d6:	4003      	ands	r3, r0
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026dc:	481f      	ldr	r0, [pc, #124]	; (800275c <__NVIC_SetPriority+0xd4>)
 80026de:	1dfb      	adds	r3, r7, #7
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	b25b      	sxtb	r3, r3
 80026e4:	089b      	lsrs	r3, r3, #2
 80026e6:	430a      	orrs	r2, r1
 80026e8:	33c0      	adds	r3, #192	; 0xc0
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80026ee:	e031      	b.n	8002754 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026f0:	4a1b      	ldr	r2, [pc, #108]	; (8002760 <__NVIC_SetPriority+0xd8>)
 80026f2:	1dfb      	adds	r3, r7, #7
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	0019      	movs	r1, r3
 80026f8:	230f      	movs	r3, #15
 80026fa:	400b      	ands	r3, r1
 80026fc:	3b08      	subs	r3, #8
 80026fe:	089b      	lsrs	r3, r3, #2
 8002700:	3306      	adds	r3, #6
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	18d3      	adds	r3, r2, r3
 8002706:	3304      	adds	r3, #4
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	1dfa      	adds	r2, r7, #7
 800270c:	7812      	ldrb	r2, [r2, #0]
 800270e:	0011      	movs	r1, r2
 8002710:	2203      	movs	r2, #3
 8002712:	400a      	ands	r2, r1
 8002714:	00d2      	lsls	r2, r2, #3
 8002716:	21ff      	movs	r1, #255	; 0xff
 8002718:	4091      	lsls	r1, r2
 800271a:	000a      	movs	r2, r1
 800271c:	43d2      	mvns	r2, r2
 800271e:	401a      	ands	r2, r3
 8002720:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	019b      	lsls	r3, r3, #6
 8002726:	22ff      	movs	r2, #255	; 0xff
 8002728:	401a      	ands	r2, r3
 800272a:	1dfb      	adds	r3, r7, #7
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	0018      	movs	r0, r3
 8002730:	2303      	movs	r3, #3
 8002732:	4003      	ands	r3, r0
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002738:	4809      	ldr	r0, [pc, #36]	; (8002760 <__NVIC_SetPriority+0xd8>)
 800273a:	1dfb      	adds	r3, r7, #7
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	001c      	movs	r4, r3
 8002740:	230f      	movs	r3, #15
 8002742:	4023      	ands	r3, r4
 8002744:	3b08      	subs	r3, #8
 8002746:	089b      	lsrs	r3, r3, #2
 8002748:	430a      	orrs	r2, r1
 800274a:	3306      	adds	r3, #6
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	18c3      	adds	r3, r0, r3
 8002750:	3304      	adds	r3, #4
 8002752:	601a      	str	r2, [r3, #0]
}
 8002754:	46c0      	nop			; (mov r8, r8)
 8002756:	46bd      	mov	sp, r7
 8002758:	b003      	add	sp, #12
 800275a:	bd90      	pop	{r4, r7, pc}
 800275c:	e000e100 	.word	0xe000e100
 8002760:	e000ed00 	.word	0xe000ed00

08002764 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	1e5a      	subs	r2, r3, #1
 8002770:	2380      	movs	r3, #128	; 0x80
 8002772:	045b      	lsls	r3, r3, #17
 8002774:	429a      	cmp	r2, r3
 8002776:	d301      	bcc.n	800277c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002778:	2301      	movs	r3, #1
 800277a:	e010      	b.n	800279e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800277c:	4b0a      	ldr	r3, [pc, #40]	; (80027a8 <SysTick_Config+0x44>)
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	3a01      	subs	r2, #1
 8002782:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002784:	2301      	movs	r3, #1
 8002786:	425b      	negs	r3, r3
 8002788:	2103      	movs	r1, #3
 800278a:	0018      	movs	r0, r3
 800278c:	f7ff ff7c 	bl	8002688 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002790:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <SysTick_Config+0x44>)
 8002792:	2200      	movs	r2, #0
 8002794:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002796:	4b04      	ldr	r3, [pc, #16]	; (80027a8 <SysTick_Config+0x44>)
 8002798:	2207      	movs	r2, #7
 800279a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800279c:	2300      	movs	r3, #0
}
 800279e:	0018      	movs	r0, r3
 80027a0:	46bd      	mov	sp, r7
 80027a2:	b002      	add	sp, #8
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	46c0      	nop			; (mov r8, r8)
 80027a8:	e000e010 	.word	0xe000e010

080027ac <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60b9      	str	r1, [r7, #8]
 80027b4:	607a      	str	r2, [r7, #4]
 80027b6:	210f      	movs	r1, #15
 80027b8:	187b      	adds	r3, r7, r1
 80027ba:	1c02      	adds	r2, r0, #0
 80027bc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80027be:	68ba      	ldr	r2, [r7, #8]
 80027c0:	187b      	adds	r3, r7, r1
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	b25b      	sxtb	r3, r3
 80027c6:	0011      	movs	r1, r2
 80027c8:	0018      	movs	r0, r3
 80027ca:	f7ff ff5d 	bl	8002688 <__NVIC_SetPriority>
}
 80027ce:	46c0      	nop			; (mov r8, r8)
 80027d0:	46bd      	mov	sp, r7
 80027d2:	b004      	add	sp, #16
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b082      	sub	sp, #8
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	0018      	movs	r0, r3
 80027e2:	f7ff ffbf 	bl	8002764 <SysTick_Config>
 80027e6:	0003      	movs	r3, r0
}
 80027e8:	0018      	movs	r0, r3
 80027ea:	46bd      	mov	sp, r7
 80027ec:	b002      	add	sp, #8
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80027fa:	2300      	movs	r3, #0
 80027fc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80027fe:	e14d      	b.n	8002a9c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2101      	movs	r1, #1
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	4091      	lsls	r1, r2
 800280a:	000a      	movs	r2, r1
 800280c:	4013      	ands	r3, r2
 800280e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d100      	bne.n	8002818 <HAL_GPIO_Init+0x28>
 8002816:	e13e      	b.n	8002a96 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	2b02      	cmp	r3, #2
 800281e:	d003      	beq.n	8002828 <HAL_GPIO_Init+0x38>
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	2b12      	cmp	r3, #18
 8002826:	d125      	bne.n	8002874 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	08da      	lsrs	r2, r3, #3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	3208      	adds	r2, #8
 8002830:	0092      	lsls	r2, r2, #2
 8002832:	58d3      	ldr	r3, [r2, r3]
 8002834:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	2207      	movs	r2, #7
 800283a:	4013      	ands	r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	220f      	movs	r2, #15
 8002840:	409a      	lsls	r2, r3
 8002842:	0013      	movs	r3, r2
 8002844:	43da      	mvns	r2, r3
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	4013      	ands	r3, r2
 800284a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	220f      	movs	r2, #15
 8002852:	401a      	ands	r2, r3
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	2107      	movs	r1, #7
 8002858:	400b      	ands	r3, r1
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	409a      	lsls	r2, r3
 800285e:	0013      	movs	r3, r2
 8002860:	697a      	ldr	r2, [r7, #20]
 8002862:	4313      	orrs	r3, r2
 8002864:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	08da      	lsrs	r2, r3, #3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	3208      	adds	r2, #8
 800286e:	0092      	lsls	r2, r2, #2
 8002870:	6979      	ldr	r1, [r7, #20]
 8002872:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	2203      	movs	r2, #3
 8002880:	409a      	lsls	r2, r3
 8002882:	0013      	movs	r3, r2
 8002884:	43da      	mvns	r2, r3
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	4013      	ands	r3, r2
 800288a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	2203      	movs	r2, #3
 8002892:	401a      	ands	r2, r3
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	409a      	lsls	r2, r3
 800289a:	0013      	movs	r3, r2
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	4313      	orrs	r3, r2
 80028a0:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d00b      	beq.n	80028c8 <HAL_GPIO_Init+0xd8>
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d007      	beq.n	80028c8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028bc:	2b11      	cmp	r3, #17
 80028be:	d003      	beq.n	80028c8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	2b12      	cmp	r3, #18
 80028c6:	d130      	bne.n	800292a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	2203      	movs	r2, #3
 80028d4:	409a      	lsls	r2, r3
 80028d6:	0013      	movs	r3, r2
 80028d8:	43da      	mvns	r2, r3
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	4013      	ands	r3, r2
 80028de:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	68da      	ldr	r2, [r3, #12]
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	409a      	lsls	r2, r3
 80028ea:	0013      	movs	r3, r2
 80028ec:	697a      	ldr	r2, [r7, #20]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028fe:	2201      	movs	r2, #1
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	409a      	lsls	r2, r3
 8002904:	0013      	movs	r3, r2
 8002906:	43da      	mvns	r2, r3
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	4013      	ands	r3, r2
 800290c:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	091b      	lsrs	r3, r3, #4
 8002914:	2201      	movs	r2, #1
 8002916:	401a      	ands	r2, r3
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	409a      	lsls	r2, r3
 800291c:	0013      	movs	r3, r2
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	4313      	orrs	r3, r2
 8002922:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	2b03      	cmp	r3, #3
 8002930:	d017      	beq.n	8002962 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	2203      	movs	r2, #3
 800293e:	409a      	lsls	r2, r3
 8002940:	0013      	movs	r3, r2
 8002942:	43da      	mvns	r2, r3
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	4013      	ands	r3, r2
 8002948:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	689a      	ldr	r2, [r3, #8]
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	409a      	lsls	r2, r3
 8002954:	0013      	movs	r3, r2
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	4313      	orrs	r3, r2
 800295a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	2380      	movs	r3, #128	; 0x80
 8002968:	055b      	lsls	r3, r3, #21
 800296a:	4013      	ands	r3, r2
 800296c:	d100      	bne.n	8002970 <HAL_GPIO_Init+0x180>
 800296e:	e092      	b.n	8002a96 <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002970:	4a50      	ldr	r2, [pc, #320]	; (8002ab4 <HAL_GPIO_Init+0x2c4>)
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	089b      	lsrs	r3, r3, #2
 8002976:	3318      	adds	r3, #24
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	589b      	ldr	r3, [r3, r2]
 800297c:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	2203      	movs	r2, #3
 8002982:	4013      	ands	r3, r2
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	220f      	movs	r2, #15
 8002988:	409a      	lsls	r2, r3
 800298a:	0013      	movs	r3, r2
 800298c:	43da      	mvns	r2, r3
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	4013      	ands	r3, r2
 8002992:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	23a0      	movs	r3, #160	; 0xa0
 8002998:	05db      	lsls	r3, r3, #23
 800299a:	429a      	cmp	r2, r3
 800299c:	d013      	beq.n	80029c6 <HAL_GPIO_Init+0x1d6>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a45      	ldr	r2, [pc, #276]	; (8002ab8 <HAL_GPIO_Init+0x2c8>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d00d      	beq.n	80029c2 <HAL_GPIO_Init+0x1d2>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a44      	ldr	r2, [pc, #272]	; (8002abc <HAL_GPIO_Init+0x2cc>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d007      	beq.n	80029be <HAL_GPIO_Init+0x1ce>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a43      	ldr	r2, [pc, #268]	; (8002ac0 <HAL_GPIO_Init+0x2d0>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d101      	bne.n	80029ba <HAL_GPIO_Init+0x1ca>
 80029b6:	2303      	movs	r3, #3
 80029b8:	e006      	b.n	80029c8 <HAL_GPIO_Init+0x1d8>
 80029ba:	2305      	movs	r3, #5
 80029bc:	e004      	b.n	80029c8 <HAL_GPIO_Init+0x1d8>
 80029be:	2302      	movs	r3, #2
 80029c0:	e002      	b.n	80029c8 <HAL_GPIO_Init+0x1d8>
 80029c2:	2301      	movs	r3, #1
 80029c4:	e000      	b.n	80029c8 <HAL_GPIO_Init+0x1d8>
 80029c6:	2300      	movs	r3, #0
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	2103      	movs	r1, #3
 80029cc:	400a      	ands	r2, r1
 80029ce:	00d2      	lsls	r2, r2, #3
 80029d0:	4093      	lsls	r3, r2
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80029d8:	4936      	ldr	r1, [pc, #216]	; (8002ab4 <HAL_GPIO_Init+0x2c4>)
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	089b      	lsrs	r3, r3, #2
 80029de:	3318      	adds	r3, #24
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80029e6:	4a33      	ldr	r2, [pc, #204]	; (8002ab4 <HAL_GPIO_Init+0x2c4>)
 80029e8:	2380      	movs	r3, #128	; 0x80
 80029ea:	58d3      	ldr	r3, [r2, r3]
 80029ec:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	43da      	mvns	r2, r3
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	4013      	ands	r3, r2
 80029f6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685a      	ldr	r2, [r3, #4]
 80029fc:	2380      	movs	r3, #128	; 0x80
 80029fe:	025b      	lsls	r3, r3, #9
 8002a00:	4013      	ands	r3, r2
 8002a02:	d003      	beq.n	8002a0c <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002a0c:	4929      	ldr	r1, [pc, #164]	; (8002ab4 <HAL_GPIO_Init+0x2c4>)
 8002a0e:	2280      	movs	r2, #128	; 0x80
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8002a14:	4a27      	ldr	r2, [pc, #156]	; (8002ab4 <HAL_GPIO_Init+0x2c4>)
 8002a16:	2384      	movs	r3, #132	; 0x84
 8002a18:	58d3      	ldr	r3, [r2, r3]
 8002a1a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	43da      	mvns	r2, r3
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	4013      	ands	r3, r2
 8002a24:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685a      	ldr	r2, [r3, #4]
 8002a2a:	2380      	movs	r3, #128	; 0x80
 8002a2c:	029b      	lsls	r3, r3, #10
 8002a2e:	4013      	ands	r3, r2
 8002a30:	d003      	beq.n	8002a3a <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002a3a:	491e      	ldr	r1, [pc, #120]	; (8002ab4 <HAL_GPIO_Init+0x2c4>)
 8002a3c:	2284      	movs	r2, #132	; 0x84
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002a42:	4b1c      	ldr	r3, [pc, #112]	; (8002ab4 <HAL_GPIO_Init+0x2c4>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	43da      	mvns	r2, r3
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685a      	ldr	r2, [r3, #4]
 8002a56:	2380      	movs	r3, #128	; 0x80
 8002a58:	035b      	lsls	r3, r3, #13
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	d003      	beq.n	8002a66 <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002a66:	4b13      	ldr	r3, [pc, #76]	; (8002ab4 <HAL_GPIO_Init+0x2c4>)
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8002a6c:	4b11      	ldr	r3, [pc, #68]	; (8002ab4 <HAL_GPIO_Init+0x2c4>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	43da      	mvns	r2, r3
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	2380      	movs	r3, #128	; 0x80
 8002a82:	039b      	lsls	r3, r3, #14
 8002a84:	4013      	ands	r3, r2
 8002a86:	d003      	beq.n	8002a90 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8002a90:	4b08      	ldr	r3, [pc, #32]	; (8002ab4 <HAL_GPIO_Init+0x2c4>)
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	3301      	adds	r3, #1
 8002a9a:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	40da      	lsrs	r2, r3
 8002aa4:	1e13      	subs	r3, r2, #0
 8002aa6:	d000      	beq.n	8002aaa <HAL_GPIO_Init+0x2ba>
 8002aa8:	e6aa      	b.n	8002800 <HAL_GPIO_Init+0x10>
  }
}
 8002aaa:	46c0      	nop			; (mov r8, r8)
 8002aac:	46c0      	nop			; (mov r8, r8)
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	b006      	add	sp, #24
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	40021800 	.word	0x40021800
 8002ab8:	50000400 	.word	0x50000400
 8002abc:	50000800 	.word	0x50000800
 8002ac0:	50001400 	.word	0x50001400

08002ac4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	000a      	movs	r2, r1
 8002ace:	1cbb      	adds	r3, r7, #2
 8002ad0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	1cba      	adds	r2, r7, #2
 8002ad8:	8812      	ldrh	r2, [r2, #0]
 8002ada:	4013      	ands	r3, r2
 8002adc:	d004      	beq.n	8002ae8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002ade:	230f      	movs	r3, #15
 8002ae0:	18fb      	adds	r3, r7, r3
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	701a      	strb	r2, [r3, #0]
 8002ae6:	e003      	b.n	8002af0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ae8:	230f      	movs	r3, #15
 8002aea:	18fb      	adds	r3, r7, r3
 8002aec:	2200      	movs	r2, #0
 8002aee:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002af0:	230f      	movs	r3, #15
 8002af2:	18fb      	adds	r3, r7, r3
 8002af4:	781b      	ldrb	r3, [r3, #0]
}
 8002af6:	0018      	movs	r0, r3
 8002af8:	46bd      	mov	sp, r7
 8002afa:	b004      	add	sp, #16
 8002afc:	bd80      	pop	{r7, pc}

08002afe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b082      	sub	sp, #8
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
 8002b06:	0008      	movs	r0, r1
 8002b08:	0011      	movs	r1, r2
 8002b0a:	1cbb      	adds	r3, r7, #2
 8002b0c:	1c02      	adds	r2, r0, #0
 8002b0e:	801a      	strh	r2, [r3, #0]
 8002b10:	1c7b      	adds	r3, r7, #1
 8002b12:	1c0a      	adds	r2, r1, #0
 8002b14:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b16:	1c7b      	adds	r3, r7, #1
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d004      	beq.n	8002b28 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b1e:	1cbb      	adds	r3, r7, #2
 8002b20:	881a      	ldrh	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b26:	e003      	b.n	8002b30 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b28:	1cbb      	adds	r3, r7, #2
 8002b2a:	881a      	ldrh	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b30:	46c0      	nop			; (mov r8, r8)
 8002b32:	46bd      	mov	sp, r7
 8002b34:	b002      	add	sp, #8
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e1e5      	b.n	8002f16 <HAL_RCC_OscConfig+0x3de>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	4013      	ands	r3, r2
 8002b52:	d100      	bne.n	8002b56 <HAL_RCC_OscConfig+0x1e>
 8002b54:	e06f      	b.n	8002c36 <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b56:	4bc4      	ldr	r3, [pc, #784]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	2238      	movs	r2, #56	; 0x38
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	2b08      	cmp	r3, #8
 8002b64:	d10b      	bne.n	8002b7e <HAL_RCC_OscConfig+0x46>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b66:	4bc0      	ldr	r3, [pc, #768]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	2380      	movs	r3, #128	; 0x80
 8002b6c:	029b      	lsls	r3, r3, #10
 8002b6e:	4013      	ands	r3, r2
 8002b70:	d061      	beq.n	8002c36 <HAL_RCC_OscConfig+0xfe>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d15d      	bne.n	8002c36 <HAL_RCC_OscConfig+0xfe>
      {
        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e1cb      	b.n	8002f16 <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685a      	ldr	r2, [r3, #4]
 8002b82:	2380      	movs	r3, #128	; 0x80
 8002b84:	025b      	lsls	r3, r3, #9
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d107      	bne.n	8002b9a <HAL_RCC_OscConfig+0x62>
 8002b8a:	4bb7      	ldr	r3, [pc, #732]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	4bb6      	ldr	r3, [pc, #728]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002b90:	2180      	movs	r1, #128	; 0x80
 8002b92:	0249      	lsls	r1, r1, #9
 8002b94:	430a      	orrs	r2, r1
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	e020      	b.n	8002bdc <HAL_RCC_OscConfig+0xa4>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685a      	ldr	r2, [r3, #4]
 8002b9e:	23a0      	movs	r3, #160	; 0xa0
 8002ba0:	02db      	lsls	r3, r3, #11
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d10e      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x8c>
 8002ba6:	4bb0      	ldr	r3, [pc, #704]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	4baf      	ldr	r3, [pc, #700]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002bac:	2180      	movs	r1, #128	; 0x80
 8002bae:	02c9      	lsls	r1, r1, #11
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	4bac      	ldr	r3, [pc, #688]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	4bab      	ldr	r3, [pc, #684]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002bba:	2180      	movs	r1, #128	; 0x80
 8002bbc:	0249      	lsls	r1, r1, #9
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	e00b      	b.n	8002bdc <HAL_RCC_OscConfig+0xa4>
 8002bc4:	4ba8      	ldr	r3, [pc, #672]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	4ba7      	ldr	r3, [pc, #668]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002bca:	49a8      	ldr	r1, [pc, #672]	; (8002e6c <HAL_RCC_OscConfig+0x334>)
 8002bcc:	400a      	ands	r2, r1
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	4ba5      	ldr	r3, [pc, #660]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	4ba4      	ldr	r3, [pc, #656]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002bd6:	49a6      	ldr	r1, [pc, #664]	; (8002e70 <HAL_RCC_OscConfig+0x338>)
 8002bd8:	400a      	ands	r2, r1
 8002bda:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d014      	beq.n	8002c0e <HAL_RCC_OscConfig+0xd6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be4:	f7fe ff7e 	bl	8001ae4 <HAL_GetTick>
 8002be8:	0003      	movs	r3, r0
 8002bea:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bec:	e008      	b.n	8002c00 <HAL_RCC_OscConfig+0xc8>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bee:	f7fe ff79 	bl	8001ae4 <HAL_GetTick>
 8002bf2:	0002      	movs	r2, r0
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b64      	cmp	r3, #100	; 0x64
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0xc8>
          {
            return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e18a      	b.n	8002f16 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c00:	4b99      	ldr	r3, [pc, #612]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	2380      	movs	r3, #128	; 0x80
 8002c06:	029b      	lsls	r3, r3, #10
 8002c08:	4013      	ands	r3, r2
 8002c0a:	d0f0      	beq.n	8002bee <HAL_RCC_OscConfig+0xb6>
 8002c0c:	e013      	b.n	8002c36 <HAL_RCC_OscConfig+0xfe>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0e:	f7fe ff69 	bl	8001ae4 <HAL_GetTick>
 8002c12:	0003      	movs	r3, r0
 8002c14:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c16:	e008      	b.n	8002c2a <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c18:	f7fe ff64 	bl	8001ae4 <HAL_GetTick>
 8002c1c:	0002      	movs	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b64      	cmp	r3, #100	; 0x64
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e175      	b.n	8002f16 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c2a:	4b8f      	ldr	r3, [pc, #572]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	2380      	movs	r3, #128	; 0x80
 8002c30:	029b      	lsls	r3, r3, #10
 8002c32:	4013      	ands	r3, r2
 8002c34:	d1f0      	bne.n	8002c18 <HAL_RCC_OscConfig+0xe0>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	d100      	bne.n	8002c42 <HAL_RCC_OscConfig+0x10a>
 8002c40:	e08c      	b.n	8002d5c <HAL_RCC_OscConfig+0x224>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c42:	4b89      	ldr	r3, [pc, #548]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	2238      	movs	r2, #56	; 0x38
 8002c48:	4013      	ands	r3, r2
 8002c4a:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d135      	bne.n	8002cbe <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c52:	4b85      	ldr	r3, [pc, #532]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	2380      	movs	r3, #128	; 0x80
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	d005      	beq.n	8002c6a <HAL_RCC_OscConfig+0x132>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e155      	b.n	8002f16 <HAL_RCC_OscConfig+0x3de>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c6a:	4b7f      	ldr	r3, [pc, #508]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	4a81      	ldr	r2, [pc, #516]	; (8002e74 <HAL_RCC_OscConfig+0x33c>)
 8002c70:	4013      	ands	r3, r2
 8002c72:	0019      	movs	r1, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	021a      	lsls	r2, r3, #8
 8002c7a:	4b7b      	ldr	r3, [pc, #492]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d112      	bne.n	8002cac <HAL_RCC_OscConfig+0x174>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002c86:	4b78      	ldr	r3, [pc, #480]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a7b      	ldr	r2, [pc, #492]	; (8002e78 <HAL_RCC_OscConfig+0x340>)
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	0019      	movs	r1, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	691a      	ldr	r2, [r3, #16]
 8002c94:	4b74      	ldr	r3, [pc, #464]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002c96:	430a      	orrs	r2, r1
 8002c98:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002c9a:	4b73      	ldr	r3, [pc, #460]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	0adb      	lsrs	r3, r3, #11
 8002ca0:	2207      	movs	r2, #7
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	4a75      	ldr	r2, [pc, #468]	; (8002e7c <HAL_RCC_OscConfig+0x344>)
 8002ca6:	40da      	lsrs	r2, r3
 8002ca8:	4b75      	ldr	r3, [pc, #468]	; (8002e80 <HAL_RCC_OscConfig+0x348>)
 8002caa:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002cac:	4b75      	ldr	r3, [pc, #468]	; (8002e84 <HAL_RCC_OscConfig+0x34c>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	f7fe febd 	bl	8001a30 <HAL_InitTick>
 8002cb6:	1e03      	subs	r3, r0, #0
 8002cb8:	d050      	beq.n	8002d5c <HAL_RCC_OscConfig+0x224>
        {
          return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e12b      	b.n	8002f16 <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d030      	beq.n	8002d28 <HAL_RCC_OscConfig+0x1f0>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002cc6:	4b68      	ldr	r3, [pc, #416]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a6b      	ldr	r2, [pc, #428]	; (8002e78 <HAL_RCC_OscConfig+0x340>)
 8002ccc:	4013      	ands	r3, r2
 8002cce:	0019      	movs	r1, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	691a      	ldr	r2, [r3, #16]
 8002cd4:	4b64      	ldr	r3, [pc, #400]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8002cda:	4b63      	ldr	r3, [pc, #396]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	4b62      	ldr	r3, [pc, #392]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002ce0:	2180      	movs	r1, #128	; 0x80
 8002ce2:	0049      	lsls	r1, r1, #1
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce8:	f7fe fefc 	bl	8001ae4 <HAL_GetTick>
 8002cec:	0003      	movs	r3, r0
 8002cee:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cf0:	e008      	b.n	8002d04 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cf2:	f7fe fef7 	bl	8001ae4 <HAL_GetTick>
 8002cf6:	0002      	movs	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e108      	b.n	8002f16 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d04:	4b58      	ldr	r3, [pc, #352]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	2380      	movs	r3, #128	; 0x80
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	d0f0      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x1ba>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d10:	4b55      	ldr	r3, [pc, #340]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	4a57      	ldr	r2, [pc, #348]	; (8002e74 <HAL_RCC_OscConfig+0x33c>)
 8002d16:	4013      	ands	r3, r2
 8002d18:	0019      	movs	r1, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	021a      	lsls	r2, r3, #8
 8002d20:	4b51      	ldr	r3, [pc, #324]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002d22:	430a      	orrs	r2, r1
 8002d24:	605a      	str	r2, [r3, #4]
 8002d26:	e019      	b.n	8002d5c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8002d28:	4b4f      	ldr	r3, [pc, #316]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	4b4e      	ldr	r3, [pc, #312]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002d2e:	4956      	ldr	r1, [pc, #344]	; (8002e88 <HAL_RCC_OscConfig+0x350>)
 8002d30:	400a      	ands	r2, r1
 8002d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d34:	f7fe fed6 	bl	8001ae4 <HAL_GetTick>
 8002d38:	0003      	movs	r3, r0
 8002d3a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d3c:	e008      	b.n	8002d50 <HAL_RCC_OscConfig+0x218>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d3e:	f7fe fed1 	bl	8001ae4 <HAL_GetTick>
 8002d42:	0002      	movs	r2, r0
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_OscConfig+0x218>
          {
            return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e0e2      	b.n	8002f16 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d50:	4b45      	ldr	r3, [pc, #276]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	2380      	movs	r3, #128	; 0x80
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	4013      	ands	r3, r2
 8002d5a:	d1f0      	bne.n	8002d3e <HAL_RCC_OscConfig+0x206>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2208      	movs	r2, #8
 8002d62:	4013      	ands	r3, r2
 8002d64:	d047      	beq.n	8002df6 <HAL_RCC_OscConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002d66:	4b40      	ldr	r3, [pc, #256]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	2238      	movs	r2, #56	; 0x38
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	2b18      	cmp	r3, #24
 8002d70:	d10a      	bne.n	8002d88 <HAL_RCC_OscConfig+0x250>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR2) & RCC_CSR2_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002d72:	4b3d      	ldr	r3, [pc, #244]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002d74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d76:	2202      	movs	r2, #2
 8002d78:	4013      	ands	r3, r2
 8002d7a:	d03c      	beq.n	8002df6 <HAL_RCC_OscConfig+0x2be>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d138      	bne.n	8002df6 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e0c6      	b.n	8002f16 <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d019      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x28c>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002d90:	4b35      	ldr	r3, [pc, #212]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002d92:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d94:	4b34      	ldr	r3, [pc, #208]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002d96:	2101      	movs	r1, #1
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d9c:	f7fe fea2 	bl	8001ae4 <HAL_GetTick>
 8002da0:	0003      	movs	r3, r0
 8002da2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002da4:	e008      	b.n	8002db8 <HAL_RCC_OscConfig+0x280>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002da6:	f7fe fe9d 	bl	8001ae4 <HAL_GetTick>
 8002daa:	0002      	movs	r2, r0
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e0ae      	b.n	8002f16 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002db8:	4b2b      	ldr	r3, [pc, #172]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dbc:	2202      	movs	r2, #2
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	d0f1      	beq.n	8002da6 <HAL_RCC_OscConfig+0x26e>
 8002dc2:	e018      	b.n	8002df6 <HAL_RCC_OscConfig+0x2be>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002dc4:	4b28      	ldr	r3, [pc, #160]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002dc6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002dc8:	4b27      	ldr	r3, [pc, #156]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002dca:	2101      	movs	r1, #1
 8002dcc:	438a      	bics	r2, r1
 8002dce:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd0:	f7fe fe88 	bl	8001ae4 <HAL_GetTick>
 8002dd4:	0003      	movs	r3, r0
 8002dd6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002dd8:	e008      	b.n	8002dec <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dda:	f7fe fe83 	bl	8001ae4 <HAL_GetTick>
 8002dde:	0002      	movs	r2, r0
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d901      	bls.n	8002dec <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e094      	b.n	8002f16 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002dec:	4b1e      	ldr	r3, [pc, #120]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002dee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002df0:	2202      	movs	r2, #2
 8002df2:	4013      	ands	r3, r2
 8002df4:	d1f1      	bne.n	8002dda <HAL_RCC_OscConfig+0x2a2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2204      	movs	r2, #4
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	d100      	bne.n	8002e02 <HAL_RCC_OscConfig+0x2ca>
 8002e00:	e088      	b.n	8002f14 <HAL_RCC_OscConfig+0x3dc>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e02:	230f      	movs	r3, #15
 8002e04:	18fb      	adds	r3, r7, r3
 8002e06:	2200      	movs	r2, #0
 8002e08:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002e0a:	4b17      	ldr	r3, [pc, #92]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	2238      	movs	r2, #56	; 0x38
 8002e10:	4013      	ands	r3, r2
 8002e12:	2b20      	cmp	r3, #32
 8002e14:	d10c      	bne.n	8002e30 <HAL_RCC_OscConfig+0x2f8>
    {
      if ((((RCC->CSR1) & RCC_CSR1_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002e16:	4b14      	ldr	r3, [pc, #80]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	d100      	bne.n	8002e22 <HAL_RCC_OscConfig+0x2ea>
 8002e20:	e078      	b.n	8002f14 <HAL_RCC_OscConfig+0x3dc>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d000      	beq.n	8002e2c <HAL_RCC_OscConfig+0x2f4>
 8002e2a:	e073      	b.n	8002f14 <HAL_RCC_OscConfig+0x3dc>
      {
        return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e072      	b.n	8002f16 <HAL_RCC_OscConfig+0x3de>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d106      	bne.n	8002e46 <HAL_RCC_OscConfig+0x30e>
 8002e38:	4b0b      	ldr	r3, [pc, #44]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002e3a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e3c:	4b0a      	ldr	r3, [pc, #40]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002e3e:	2101      	movs	r1, #1
 8002e40:	430a      	orrs	r2, r1
 8002e42:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e44:	e02e      	b.n	8002ea4 <HAL_RCC_OscConfig+0x36c>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	2b05      	cmp	r3, #5
 8002e4c:	d11e      	bne.n	8002e8c <HAL_RCC_OscConfig+0x354>
 8002e4e:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002e50:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e52:	4b05      	ldr	r3, [pc, #20]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002e54:	2104      	movs	r1, #4
 8002e56:	430a      	orrs	r2, r1
 8002e58:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e5a:	4b03      	ldr	r3, [pc, #12]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002e5c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e5e:	4b02      	ldr	r3, [pc, #8]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002e60:	2101      	movs	r1, #1
 8002e62:	430a      	orrs	r2, r1
 8002e64:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e66:	e01d      	b.n	8002ea4 <HAL_RCC_OscConfig+0x36c>
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	fffeffff 	.word	0xfffeffff
 8002e70:	fffbffff 	.word	0xfffbffff
 8002e74:	ffff80ff 	.word	0xffff80ff
 8002e78:	ffffc7ff 	.word	0xffffc7ff
 8002e7c:	02dc6c00 	.word	0x02dc6c00
 8002e80:	2000001c 	.word	0x2000001c
 8002e84:	20000020 	.word	0x20000020
 8002e88:	fffffeff 	.word	0xfffffeff
 8002e8c:	4b24      	ldr	r3, [pc, #144]	; (8002f20 <HAL_RCC_OscConfig+0x3e8>)
 8002e8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e90:	4b23      	ldr	r3, [pc, #140]	; (8002f20 <HAL_RCC_OscConfig+0x3e8>)
 8002e92:	2101      	movs	r1, #1
 8002e94:	438a      	bics	r2, r1
 8002e96:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e98:	4b21      	ldr	r3, [pc, #132]	; (8002f20 <HAL_RCC_OscConfig+0x3e8>)
 8002e9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e9c:	4b20      	ldr	r3, [pc, #128]	; (8002f20 <HAL_RCC_OscConfig+0x3e8>)
 8002e9e:	2104      	movs	r1, #4
 8002ea0:	438a      	bics	r2, r1
 8002ea2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d014      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x39e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eac:	f7fe fe1a 	bl	8001ae4 <HAL_GetTick>
 8002eb0:	0003      	movs	r3, r0
 8002eb2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002eb4:	e009      	b.n	8002eca <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eb6:	f7fe fe15 	bl	8001ae4 <HAL_GetTick>
 8002eba:	0002      	movs	r2, r0
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	4a18      	ldr	r2, [pc, #96]	; (8002f24 <HAL_RCC_OscConfig+0x3ec>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e025      	b.n	8002f16 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002eca:	4b15      	ldr	r3, [pc, #84]	; (8002f20 <HAL_RCC_OscConfig+0x3e8>)
 8002ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ece:	2202      	movs	r2, #2
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	d0f0      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x37e>
 8002ed4:	e013      	b.n	8002efe <HAL_RCC_OscConfig+0x3c6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed6:	f7fe fe05 	bl	8001ae4 <HAL_GetTick>
 8002eda:	0003      	movs	r3, r0
 8002edc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002ede:	e009      	b.n	8002ef4 <HAL_RCC_OscConfig+0x3bc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ee0:	f7fe fe00 	bl	8001ae4 <HAL_GetTick>
 8002ee4:	0002      	movs	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	4a0e      	ldr	r2, [pc, #56]	; (8002f24 <HAL_RCC_OscConfig+0x3ec>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d901      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e010      	b.n	8002f16 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002ef4:	4b0a      	ldr	r3, [pc, #40]	; (8002f20 <HAL_RCC_OscConfig+0x3e8>)
 8002ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef8:	2202      	movs	r2, #2
 8002efa:	4013      	ands	r3, r2
 8002efc:	d1f0      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x3a8>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002efe:	230f      	movs	r3, #15
 8002f00:	18fb      	adds	r3, r7, r3
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d105      	bne.n	8002f14 <HAL_RCC_OscConfig+0x3dc>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002f08:	4b05      	ldr	r3, [pc, #20]	; (8002f20 <HAL_RCC_OscConfig+0x3e8>)
 8002f0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f0c:	4b04      	ldr	r3, [pc, #16]	; (8002f20 <HAL_RCC_OscConfig+0x3e8>)
 8002f0e:	4906      	ldr	r1, [pc, #24]	; (8002f28 <HAL_RCC_OscConfig+0x3f0>)
 8002f10:	400a      	ands	r2, r1
 8002f12:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	0018      	movs	r0, r3
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	b006      	add	sp, #24
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	46c0      	nop			; (mov r8, r8)
 8002f20:	40021000 	.word	0x40021000
 8002f24:	00001388 	.word	0x00001388
 8002f28:	efffffff 	.word	0xefffffff

08002f2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d101      	bne.n	8002f40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e0e9      	b.n	8003114 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f40:	4b76      	ldr	r3, [pc, #472]	; (800311c <HAL_RCC_ClockConfig+0x1f0>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2207      	movs	r2, #7
 8002f46:	4013      	ands	r3, r2
 8002f48:	683a      	ldr	r2, [r7, #0]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d91e      	bls.n	8002f8c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f4e:	4b73      	ldr	r3, [pc, #460]	; (800311c <HAL_RCC_ClockConfig+0x1f0>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2207      	movs	r2, #7
 8002f54:	4393      	bics	r3, r2
 8002f56:	0019      	movs	r1, r3
 8002f58:	4b70      	ldr	r3, [pc, #448]	; (800311c <HAL_RCC_ClockConfig+0x1f0>)
 8002f5a:	683a      	ldr	r2, [r7, #0]
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002f60:	f7fe fdc0 	bl	8001ae4 <HAL_GetTick>
 8002f64:	0003      	movs	r3, r0
 8002f66:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002f68:	e009      	b.n	8002f7e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f6a:	f7fe fdbb 	bl	8001ae4 <HAL_GetTick>
 8002f6e:	0002      	movs	r2, r0
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	4a6a      	ldr	r2, [pc, #424]	; (8003120 <HAL_RCC_ClockConfig+0x1f4>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e0ca      	b.n	8003114 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002f7e:	4b67      	ldr	r3, [pc, #412]	; (800311c <HAL_RCC_ClockConfig+0x1f0>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2207      	movs	r2, #7
 8002f84:	4013      	ands	r3, r2
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d1ee      	bne.n	8002f6a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2202      	movs	r2, #2
 8002f92:	4013      	ands	r3, r2
 8002f94:	d017      	beq.n	8002fc6 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2204      	movs	r2, #4
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	d008      	beq.n	8002fb2 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002fa0:	4b60      	ldr	r3, [pc, #384]	; (8003124 <HAL_RCC_ClockConfig+0x1f8>)
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	4a60      	ldr	r2, [pc, #384]	; (8003128 <HAL_RCC_ClockConfig+0x1fc>)
 8002fa6:	401a      	ands	r2, r3
 8002fa8:	4b5e      	ldr	r3, [pc, #376]	; (8003124 <HAL_RCC_ClockConfig+0x1f8>)
 8002faa:	21b0      	movs	r1, #176	; 0xb0
 8002fac:	0109      	lsls	r1, r1, #4
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fb2:	4b5c      	ldr	r3, [pc, #368]	; (8003124 <HAL_RCC_ClockConfig+0x1f8>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	4a5d      	ldr	r2, [pc, #372]	; (800312c <HAL_RCC_ClockConfig+0x200>)
 8002fb8:	4013      	ands	r3, r2
 8002fba:	0019      	movs	r1, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68da      	ldr	r2, [r3, #12]
 8002fc0:	4b58      	ldr	r3, [pc, #352]	; (8003124 <HAL_RCC_ClockConfig+0x1f8>)
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	4013      	ands	r3, r2
 8002fce:	d055      	beq.n	800307c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8002fd0:	4b54      	ldr	r3, [pc, #336]	; (8003124 <HAL_RCC_ClockConfig+0x1f8>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	221c      	movs	r2, #28
 8002fd6:	4393      	bics	r3, r2
 8002fd8:	0019      	movs	r1, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	689a      	ldr	r2, [r3, #8]
 8002fde:	4b51      	ldr	r3, [pc, #324]	; (8003124 <HAL_RCC_ClockConfig+0x1f8>)
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d107      	bne.n	8002ffc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fec:	4b4d      	ldr	r3, [pc, #308]	; (8003124 <HAL_RCC_ClockConfig+0x1f8>)
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	2380      	movs	r3, #128	; 0x80
 8002ff2:	029b      	lsls	r3, r3, #10
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	d11f      	bne.n	8003038 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e08b      	b.n	8003114 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d107      	bne.n	8003014 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003004:	4b47      	ldr	r3, [pc, #284]	; (8003124 <HAL_RCC_ClockConfig+0x1f8>)
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	2380      	movs	r3, #128	; 0x80
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	4013      	ands	r3, r2
 800300e:	d113      	bne.n	8003038 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e07f      	b.n	8003114 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	2b03      	cmp	r3, #3
 800301a:	d106      	bne.n	800302a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800301c:	4b41      	ldr	r3, [pc, #260]	; (8003124 <HAL_RCC_ClockConfig+0x1f8>)
 800301e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003020:	2202      	movs	r2, #2
 8003022:	4013      	ands	r3, r2
 8003024:	d108      	bne.n	8003038 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e074      	b.n	8003114 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800302a:	4b3e      	ldr	r3, [pc, #248]	; (8003124 <HAL_RCC_ClockConfig+0x1f8>)
 800302c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800302e:	2202      	movs	r2, #2
 8003030:	4013      	ands	r3, r2
 8003032:	d101      	bne.n	8003038 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e06d      	b.n	8003114 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003038:	4b3a      	ldr	r3, [pc, #232]	; (8003124 <HAL_RCC_ClockConfig+0x1f8>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	2207      	movs	r2, #7
 800303e:	4393      	bics	r3, r2
 8003040:	0019      	movs	r1, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	4b37      	ldr	r3, [pc, #220]	; (8003124 <HAL_RCC_ClockConfig+0x1f8>)
 8003048:	430a      	orrs	r2, r1
 800304a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800304c:	f7fe fd4a 	bl	8001ae4 <HAL_GetTick>
 8003050:	0003      	movs	r3, r0
 8003052:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003054:	e009      	b.n	800306a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003056:	f7fe fd45 	bl	8001ae4 <HAL_GetTick>
 800305a:	0002      	movs	r2, r0
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	4a2f      	ldr	r2, [pc, #188]	; (8003120 <HAL_RCC_ClockConfig+0x1f4>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d901      	bls.n	800306a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e054      	b.n	8003114 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800306a:	4b2e      	ldr	r3, [pc, #184]	; (8003124 <HAL_RCC_ClockConfig+0x1f8>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	2238      	movs	r2, #56	; 0x38
 8003070:	401a      	ands	r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	429a      	cmp	r2, r3
 800307a:	d1ec      	bne.n	8003056 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800307c:	4b27      	ldr	r3, [pc, #156]	; (800311c <HAL_RCC_ClockConfig+0x1f0>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2207      	movs	r2, #7
 8003082:	4013      	ands	r3, r2
 8003084:	683a      	ldr	r2, [r7, #0]
 8003086:	429a      	cmp	r2, r3
 8003088:	d21e      	bcs.n	80030c8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800308a:	4b24      	ldr	r3, [pc, #144]	; (800311c <HAL_RCC_ClockConfig+0x1f0>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2207      	movs	r2, #7
 8003090:	4393      	bics	r3, r2
 8003092:	0019      	movs	r1, r3
 8003094:	4b21      	ldr	r3, [pc, #132]	; (800311c <HAL_RCC_ClockConfig+0x1f0>)
 8003096:	683a      	ldr	r2, [r7, #0]
 8003098:	430a      	orrs	r2, r1
 800309a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800309c:	f7fe fd22 	bl	8001ae4 <HAL_GetTick>
 80030a0:	0003      	movs	r3, r0
 80030a2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80030a4:	e009      	b.n	80030ba <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030a6:	f7fe fd1d 	bl	8001ae4 <HAL_GetTick>
 80030aa:	0002      	movs	r2, r0
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	4a1b      	ldr	r2, [pc, #108]	; (8003120 <HAL_RCC_ClockConfig+0x1f4>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e02c      	b.n	8003114 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80030ba:	4b18      	ldr	r3, [pc, #96]	; (800311c <HAL_RCC_ClockConfig+0x1f0>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2207      	movs	r2, #7
 80030c0:	4013      	ands	r3, r2
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d1ee      	bne.n	80030a6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2204      	movs	r2, #4
 80030ce:	4013      	ands	r3, r2
 80030d0:	d009      	beq.n	80030e6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80030d2:	4b14      	ldr	r3, [pc, #80]	; (8003124 <HAL_RCC_ClockConfig+0x1f8>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	4a16      	ldr	r2, [pc, #88]	; (8003130 <HAL_RCC_ClockConfig+0x204>)
 80030d8:	4013      	ands	r3, r2
 80030da:	0019      	movs	r1, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	691a      	ldr	r2, [r3, #16]
 80030e0:	4b10      	ldr	r3, [pc, #64]	; (8003124 <HAL_RCC_ClockConfig+0x1f8>)
 80030e2:	430a      	orrs	r2, r1
 80030e4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80030e6:	f000 f82b 	bl	8003140 <HAL_RCC_GetSysClockFreq>
 80030ea:	0001      	movs	r1, r0
 80030ec:	4b0d      	ldr	r3, [pc, #52]	; (8003124 <HAL_RCC_ClockConfig+0x1f8>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	0a1b      	lsrs	r3, r3, #8
 80030f2:	220f      	movs	r2, #15
 80030f4:	401a      	ands	r2, r3
 80030f6:	4b0f      	ldr	r3, [pc, #60]	; (8003134 <HAL_RCC_ClockConfig+0x208>)
 80030f8:	0092      	lsls	r2, r2, #2
 80030fa:	58d3      	ldr	r3, [r2, r3]
 80030fc:	221f      	movs	r2, #31
 80030fe:	4013      	ands	r3, r2
 8003100:	000a      	movs	r2, r1
 8003102:	40da      	lsrs	r2, r3
 8003104:	4b0c      	ldr	r3, [pc, #48]	; (8003138 <HAL_RCC_ClockConfig+0x20c>)
 8003106:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003108:	4b0c      	ldr	r3, [pc, #48]	; (800313c <HAL_RCC_ClockConfig+0x210>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	0018      	movs	r0, r3
 800310e:	f7fe fc8f 	bl	8001a30 <HAL_InitTick>
 8003112:	0003      	movs	r3, r0
}
 8003114:	0018      	movs	r0, r3
 8003116:	46bd      	mov	sp, r7
 8003118:	b004      	add	sp, #16
 800311a:	bd80      	pop	{r7, pc}
 800311c:	40022000 	.word	0x40022000
 8003120:	00001388 	.word	0x00001388
 8003124:	40021000 	.word	0x40021000
 8003128:	ffff84ff 	.word	0xffff84ff
 800312c:	fffff0ff 	.word	0xfffff0ff
 8003130:	ffff8fff 	.word	0xffff8fff
 8003134:	080034d0 	.word	0x080034d0
 8003138:	2000001c 	.word	0x2000001c
 800313c:	20000020 	.word	0x20000020

08003140 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003146:	4b1c      	ldr	r3, [pc, #112]	; (80031b8 <HAL_RCC_GetSysClockFreq+0x78>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	2238      	movs	r2, #56	; 0x38
 800314c:	4013      	ands	r3, r2
 800314e:	d10f      	bne.n	8003170 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003150:	4b19      	ldr	r3, [pc, #100]	; (80031b8 <HAL_RCC_GetSysClockFreq+0x78>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	0adb      	lsrs	r3, r3, #11
 8003156:	2207      	movs	r2, #7
 8003158:	4013      	ands	r3, r2
 800315a:	2201      	movs	r2, #1
 800315c:	409a      	lsls	r2, r3
 800315e:	0013      	movs	r3, r2
 8003160:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003162:	6839      	ldr	r1, [r7, #0]
 8003164:	4815      	ldr	r0, [pc, #84]	; (80031bc <HAL_RCC_GetSysClockFreq+0x7c>)
 8003166:	f7fc ffcf 	bl	8000108 <__udivsi3>
 800316a:	0003      	movs	r3, r0
 800316c:	607b      	str	r3, [r7, #4]
 800316e:	e01e      	b.n	80031ae <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003170:	4b11      	ldr	r3, [pc, #68]	; (80031b8 <HAL_RCC_GetSysClockFreq+0x78>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	2238      	movs	r2, #56	; 0x38
 8003176:	4013      	ands	r3, r2
 8003178:	2b08      	cmp	r3, #8
 800317a:	d102      	bne.n	8003182 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800317c:	4b10      	ldr	r3, [pc, #64]	; (80031c0 <HAL_RCC_GetSysClockFreq+0x80>)
 800317e:	607b      	str	r3, [r7, #4]
 8003180:	e015      	b.n	80031ae <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8003182:	4b0d      	ldr	r3, [pc, #52]	; (80031b8 <HAL_RCC_GetSysClockFreq+0x78>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	2238      	movs	r2, #56	; 0x38
 8003188:	4013      	ands	r3, r2
 800318a:	2b20      	cmp	r3, #32
 800318c:	d103      	bne.n	8003196 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800318e:	2380      	movs	r3, #128	; 0x80
 8003190:	021b      	lsls	r3, r3, #8
 8003192:	607b      	str	r3, [r7, #4]
 8003194:	e00b      	b.n	80031ae <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8003196:	4b08      	ldr	r3, [pc, #32]	; (80031b8 <HAL_RCC_GetSysClockFreq+0x78>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	2238      	movs	r2, #56	; 0x38
 800319c:	4013      	ands	r3, r2
 800319e:	2b18      	cmp	r3, #24
 80031a0:	d103      	bne.n	80031aa <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80031a2:	23fa      	movs	r3, #250	; 0xfa
 80031a4:	01db      	lsls	r3, r3, #7
 80031a6:	607b      	str	r3, [r7, #4]
 80031a8:	e001      	b.n	80031ae <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 80031aa:	2300      	movs	r3, #0
 80031ac:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 80031ae:	687b      	ldr	r3, [r7, #4]
}
 80031b0:	0018      	movs	r0, r3
 80031b2:	46bd      	mov	sp, r7
 80031b4:	b002      	add	sp, #8
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	40021000 	.word	0x40021000
 80031bc:	02dc6c00 	.word	0x02dc6c00
 80031c0:	007a1200 	.word	0x007a1200

080031c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80031cc:	2313      	movs	r3, #19
 80031ce:	18fb      	adds	r3, r7, r3
 80031d0:	2200      	movs	r2, #0
 80031d2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031d4:	2312      	movs	r3, #18
 80031d6:	18fb      	adds	r3, r7, r3
 80031d8:	2200      	movs	r2, #0
 80031da:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	2380      	movs	r3, #128	; 0x80
 80031e2:	029b      	lsls	r3, r3, #10
 80031e4:	4013      	ands	r3, r2
 80031e6:	d100      	bne.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x26>
 80031e8:	e079      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031ea:	2011      	movs	r0, #17
 80031ec:	183b      	adds	r3, r7, r0
 80031ee:	2200      	movs	r2, #0
 80031f0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031f2:	4b64      	ldr	r3, [pc, #400]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80031f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031f6:	2380      	movs	r3, #128	; 0x80
 80031f8:	055b      	lsls	r3, r3, #21
 80031fa:	4013      	ands	r3, r2
 80031fc:	d110      	bne.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031fe:	4b61      	ldr	r3, [pc, #388]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003200:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003202:	4b60      	ldr	r3, [pc, #384]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003204:	2180      	movs	r1, #128	; 0x80
 8003206:	0549      	lsls	r1, r1, #21
 8003208:	430a      	orrs	r2, r1
 800320a:	63da      	str	r2, [r3, #60]	; 0x3c
 800320c:	4b5d      	ldr	r3, [pc, #372]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800320e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003210:	2380      	movs	r3, #128	; 0x80
 8003212:	055b      	lsls	r3, r3, #21
 8003214:	4013      	ands	r3, r2
 8003216:	60bb      	str	r3, [r7, #8]
 8003218:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800321a:	183b      	adds	r3, r7, r0
 800321c:	2201      	movs	r2, #1
 800321e:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8003220:	4b58      	ldr	r3, [pc, #352]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003222:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003224:	23c0      	movs	r3, #192	; 0xc0
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	4013      	ands	r3, r2
 800322a:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d019      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	429a      	cmp	r2, r3
 800323a:	d014      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 800323c:	4b51      	ldr	r3, [pc, #324]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800323e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003240:	4a51      	ldr	r2, [pc, #324]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003242:	4013      	ands	r3, r2
 8003244:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003246:	4b4f      	ldr	r3, [pc, #316]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003248:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800324a:	4b4e      	ldr	r3, [pc, #312]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800324c:	2180      	movs	r1, #128	; 0x80
 800324e:	0249      	lsls	r1, r1, #9
 8003250:	430a      	orrs	r2, r1
 8003252:	65da      	str	r2, [r3, #92]	; 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003254:	4b4b      	ldr	r3, [pc, #300]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003256:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003258:	4b4a      	ldr	r3, [pc, #296]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800325a:	494c      	ldr	r1, [pc, #304]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800325c:	400a      	ands	r2, r1
 800325e:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8003260:	4b48      	ldr	r3, [pc, #288]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003262:	697a      	ldr	r2, [r7, #20]
 8003264:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	2201      	movs	r2, #1
 800326a:	4013      	ands	r3, r2
 800326c:	d016      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800326e:	f7fe fc39 	bl	8001ae4 <HAL_GetTick>
 8003272:	0003      	movs	r3, r0
 8003274:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003276:	e00c      	b.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003278:	f7fe fc34 	bl	8001ae4 <HAL_GetTick>
 800327c:	0002      	movs	r2, r0
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	4a43      	ldr	r2, [pc, #268]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d904      	bls.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 8003288:	2313      	movs	r3, #19
 800328a:	18fb      	adds	r3, r7, r3
 800328c:	2203      	movs	r2, #3
 800328e:	701a      	strb	r2, [r3, #0]
          break;
 8003290:	e004      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003292:	4b3c      	ldr	r3, [pc, #240]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003296:	2202      	movs	r2, #2
 8003298:	4013      	ands	r3, r2
 800329a:	d0ed      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 800329c:	2313      	movs	r3, #19
 800329e:	18fb      	adds	r3, r7, r3
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10a      	bne.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032a6:	4b37      	ldr	r3, [pc, #220]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80032a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032aa:	4a37      	ldr	r2, [pc, #220]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80032ac:	4013      	ands	r3, r2
 80032ae:	0019      	movs	r1, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	699a      	ldr	r2, [r3, #24]
 80032b4:	4b33      	ldr	r3, [pc, #204]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80032b6:	430a      	orrs	r2, r1
 80032b8:	65da      	str	r2, [r3, #92]	; 0x5c
 80032ba:	e005      	b.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032bc:	2312      	movs	r3, #18
 80032be:	18fb      	adds	r3, r7, r3
 80032c0:	2213      	movs	r2, #19
 80032c2:	18ba      	adds	r2, r7, r2
 80032c4:	7812      	ldrb	r2, [r2, #0]
 80032c6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032c8:	2311      	movs	r3, #17
 80032ca:	18fb      	adds	r3, r7, r3
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d105      	bne.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032d2:	4b2c      	ldr	r3, [pc, #176]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80032d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032d6:	4b2b      	ldr	r3, [pc, #172]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80032d8:	492e      	ldr	r1, [pc, #184]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032da:	400a      	ands	r2, r1
 80032dc:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2201      	movs	r2, #1
 80032e4:	4013      	ands	r3, r2
 80032e6:	d009      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032e8:	4b26      	ldr	r3, [pc, #152]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80032ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ec:	2203      	movs	r2, #3
 80032ee:	4393      	bics	r3, r2
 80032f0:	0019      	movs	r1, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	689a      	ldr	r2, [r3, #8]
 80032f6:	4b23      	ldr	r3, [pc, #140]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80032f8:	430a      	orrs	r2, r1
 80032fa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2240      	movs	r2, #64	; 0x40
 8003302:	4013      	ands	r3, r2
 8003304:	d009      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003306:	4b1f      	ldr	r3, [pc, #124]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800330a:	4a23      	ldr	r2, [pc, #140]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800330c:	4013      	ands	r3, r2
 800330e:	0019      	movs	r1, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68da      	ldr	r2, [r3, #12]
 8003314:	4b1b      	ldr	r3, [pc, #108]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003316:	430a      	orrs	r2, r1
 8003318:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	2380      	movs	r3, #128	; 0x80
 8003320:	01db      	lsls	r3, r3, #7
 8003322:	4013      	ands	r3, r2
 8003324:	d008      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003326:	4b17      	ldr	r3, [pc, #92]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	0899      	lsrs	r1, r3, #2
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	695a      	ldr	r2, [r3, #20]
 8003332:	4b14      	ldr	r3, [pc, #80]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003334:	430a      	orrs	r2, r1
 8003336:	655a      	str	r2, [r3, #84]	; 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	2380      	movs	r3, #128	; 0x80
 800333e:	011b      	lsls	r3, r3, #4
 8003340:	4013      	ands	r3, r2
 8003342:	d009      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003344:	4b0f      	ldr	r3, [pc, #60]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003348:	4a14      	ldr	r2, [pc, #80]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800334a:	4013      	ands	r3, r2
 800334c:	0019      	movs	r1, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	691a      	ldr	r2, [r3, #16]
 8003352:	4b0c      	ldr	r3, [pc, #48]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003354:	430a      	orrs	r2, r1
 8003356:	655a      	str	r2, [r3, #84]	; 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2b00      	cmp	r3, #0
 800335e:	da09      	bge.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8003360:	4b08      	ldr	r3, [pc, #32]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	22e0      	movs	r2, #224	; 0xe0
 8003366:	4393      	bics	r3, r2
 8003368:	0019      	movs	r1, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	4b05      	ldr	r3, [pc, #20]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003370:	430a      	orrs	r2, r1
 8003372:	601a      	str	r2, [r3, #0]
  }
  return status;
 8003374:	2312      	movs	r3, #18
 8003376:	18fb      	adds	r3, r7, r3
 8003378:	781b      	ldrb	r3, [r3, #0]
}
 800337a:	0018      	movs	r0, r3
 800337c:	46bd      	mov	sp, r7
 800337e:	b006      	add	sp, #24
 8003380:	bd80      	pop	{r7, pc}
 8003382:	46c0      	nop			; (mov r8, r8)
 8003384:	40021000 	.word	0x40021000
 8003388:	fffffcff 	.word	0xfffffcff
 800338c:	fffeffff 	.word	0xfffeffff
 8003390:	00001388 	.word	0x00001388
 8003394:	efffffff 	.word	0xefffffff
 8003398:	ffffcfff 	.word	0xffffcfff
 800339c:	ffff3fff 	.word	0xffff3fff

080033a0 <__libc_init_array>:
 80033a0:	b570      	push	{r4, r5, r6, lr}
 80033a2:	2600      	movs	r6, #0
 80033a4:	4d0c      	ldr	r5, [pc, #48]	; (80033d8 <__libc_init_array+0x38>)
 80033a6:	4c0d      	ldr	r4, [pc, #52]	; (80033dc <__libc_init_array+0x3c>)
 80033a8:	1b64      	subs	r4, r4, r5
 80033aa:	10a4      	asrs	r4, r4, #2
 80033ac:	42a6      	cmp	r6, r4
 80033ae:	d109      	bne.n	80033c4 <__libc_init_array+0x24>
 80033b0:	2600      	movs	r6, #0
 80033b2:	f000 f821 	bl	80033f8 <_init>
 80033b6:	4d0a      	ldr	r5, [pc, #40]	; (80033e0 <__libc_init_array+0x40>)
 80033b8:	4c0a      	ldr	r4, [pc, #40]	; (80033e4 <__libc_init_array+0x44>)
 80033ba:	1b64      	subs	r4, r4, r5
 80033bc:	10a4      	asrs	r4, r4, #2
 80033be:	42a6      	cmp	r6, r4
 80033c0:	d105      	bne.n	80033ce <__libc_init_array+0x2e>
 80033c2:	bd70      	pop	{r4, r5, r6, pc}
 80033c4:	00b3      	lsls	r3, r6, #2
 80033c6:	58eb      	ldr	r3, [r5, r3]
 80033c8:	4798      	blx	r3
 80033ca:	3601      	adds	r6, #1
 80033cc:	e7ee      	b.n	80033ac <__libc_init_array+0xc>
 80033ce:	00b3      	lsls	r3, r6, #2
 80033d0:	58eb      	ldr	r3, [r5, r3]
 80033d2:	4798      	blx	r3
 80033d4:	3601      	adds	r6, #1
 80033d6:	e7f2      	b.n	80033be <__libc_init_array+0x1e>
 80033d8:	08003510 	.word	0x08003510
 80033dc:	08003510 	.word	0x08003510
 80033e0:	08003510 	.word	0x08003510
 80033e4:	08003514 	.word	0x08003514

080033e8 <memset>:
 80033e8:	0003      	movs	r3, r0
 80033ea:	1882      	adds	r2, r0, r2
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d100      	bne.n	80033f2 <memset+0xa>
 80033f0:	4770      	bx	lr
 80033f2:	7019      	strb	r1, [r3, #0]
 80033f4:	3301      	adds	r3, #1
 80033f6:	e7f9      	b.n	80033ec <memset+0x4>

080033f8 <_init>:
 80033f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033fa:	46c0      	nop			; (mov r8, r8)
 80033fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033fe:	bc08      	pop	{r3}
 8003400:	469e      	mov	lr, r3
 8003402:	4770      	bx	lr

08003404 <_fini>:
 8003404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003406:	46c0      	nop			; (mov r8, r8)
 8003408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800340a:	bc08      	pop	{r3}
 800340c:	469e      	mov	lr, r3
 800340e:	4770      	bx	lr
